---
title: Prey species in the California drylands
subtitle: Week 1 - Discussion section
week: 1
image: images/Tecopa_site2.JPG
sidebar: false
---

This discussion section will guide you through preliminary data exploration for a real world dataset about animal observations in the California drylands. In this discussion section, you will:

- Collaborate with your new team!
- Practice version control using git via the terminal
- Obtain information about a dataset from an online data repository
- Use the `pandas.read_csv()` function for loading files directly from a URL
- Use `pandas.DataFrame` methods to do preliminary analysis

## Teamwork
:::{.callout-tip appearance="minimal"}
To help everyone talk through ideas, catch errors early, and learn multiple ways to solve a problem, we will be working in  teams each week. 

There are two different roles every person in the team can have during discussion section: the **driver** or the **navigator**. There will be one driver and three navigators per discussion section. 

The driver will:

 - plug their computer into the monitor at your table 
 - be responsible for writing the code that the team comes up with 
 
 *Note: everyone in the team must write the code individually as well, but the person coding on the monitor will be typing on the notebook that the whole group works on together.*
 
The navigators will:

- read the prompts
- spot errors
- ask "what if" questions such as:


>1. “Can you narrate what you’re typing so I can follow?”
2. “I’m thinking the next step is … because …”
3. “Let’s pause and predict the output before we run it.”
4. “I’m not sure—can we check the documentation together?”
5. “What evidence do we have that this worked?”

Happy coding!
:::

## General directions

:::{.callout-tip appearance="minimal"}
- On each exercise, include markdown cells in between your code cells to add titles and information.
- Indications about when to commit and push changes are included, but you are encouraged to commit and push more often. 
- You won't need to upload any data.
:::

## Setup

:::{.callout-tip appearance="minimal"}
1. In the workbench-1 server, start a new JupyterLab session or access an active one.

2. In the terminal, use `cd` to navigate into the `eds-220-sections` directory. Use `pwd` to verify `eds-220-sections` is your current working directory.

3. Create a new Python notebook inside your `eds-220-sections` directory and rename it to `section-1-data-selection-drylands.ipynb`. 

4. Use the terminal to stage, commit, and push this file to the remote repository. Remember:
    1. `git status` : check git status
    2. `git add FILE-NAME` : stage updated file
    3. `git status` : check git status again to confirm
    4. `git commit -m "Commit message"` : commit with message
    5. `git pull` : check local repo is up to date (best practice)
    5. `git push` : push changes to upstream repository

<p style="text-align: center;">
**CHECK IN WITH YOUR TEAM** 
</p>
<p style="text-align: center;">
**MAKE SURE YOU'VE ALL SUCCESSFULLY SET UP YOUR NOTEBOOKS BEFORE CONTINUING**
</p>
:::

## About the data
For these exercises we will use data about [prey items for endangered terrestrial vertebrate species within central California drylands](https://knb.ecoinformatics.org/view/doi%3A10.5063%2FF1VM49RH)@king_compiled_2023 @lortie_importance_2023.

This dataset is stored in the [Knowledge Network for Biocomplexity (KNB)](https://knb.ecoinformatics.org) data repository. This is an international repository intended to facilitate ecological and environmental research. It has thousands of open datasets and is hosted by the [National Center for Ecological Analysis and Synthesis (NCEAS)](http://NCEAS.ucsb.edu).

![Data collection plot at Mojave Desert near Tecopa. Photo courtesy of Dr. Rachel King.](/discussion-sections/images/Tecopa_site2.JPG)

## 1. Archive exploration
When possible, data exploration should start at the data repository. Take some time to look through the dataset's description in the KNB data repository. Discuss the following questions with your team:

a. What is this data about?
b. Is this data collected in-situ by the authors or is it a synthesis of multiple datasets?
c. During what time frame were the observations in the dataset collected?
d. Does this dataset come with an associated metadata file?
e. Does the dataset contain sensitive data?

In your notebook: use a markdown cell to add a brief description of the dataset, including a citation, date of access, and a link to the archive. 

<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>

## 2. Metadata exploration

You may have noticed there are two metadata files: `Compiled_occurrence_records_for_prey_items_of.xml` and `metadata_arth_occurrences.csv`. 
The `.xml` document file type is `EML` which stands for [EML: Ecological Metadata Language](https://eml.ecoinformatics.org). This is a machine-readable file that has metadata about the whole dataset. In this section we will only use the metadata in the CSV file.

Back in your notebook, import the `pandas` package using standard abbreviation in a code cell. Then follow these steps to read in the metadata CSV using the `pandas.read_csv()` function:

a. Navigate to the [data package site](https://knb.ecoinformatics.org/view/doi%3A10.5063%2FF1VM49RH) and copy the URL to access the `metadata_arth_occurrences` CSV file. To copy the URL: 

- hover over the Download button –> right click –> “Copy Link".

b. Read in the data from the URL using the `pd.read_csv()` function like this:

    ```python
    # Access metadata from repository
    pd.read_csv('the URL goes here')
    ```

c. Take a minute to look at the descriptions for the columns. 

**Note:** Not all datasets have column descriptions in a CSV file. Often they come with a `.doc` or `.txt` file with information. 


## 3. Data loading
a. Follow steps (a) and (b) from the previous exercise to read in the drylands prey data file `arth_occurrences_with_env.csv` using `pd.read_csv()`. Store the dataframe to a variable called `prey` like this:

```python
# Load data
prey = pd.read_csv('the URL goes here')
```

b. What is the type of the `prey` variable? Use a Python function get this information.

<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>

<p style="text-align: center;">
**CHECK IN WITH YOUR TEAM** 
</p>
<p style="text-align: center;">
**MAKE SURE YOU'VE ALL SUCCESSFULLY ACCESSED THE DATA BEFORE CONTINUING**
</p>

## 4. Look at your data

a. Run `prey` in a cell. What do you notice in the columns section?

b. To see all the column names in the same display we need to set a `pandas` option. Run the following command and then look at the `prey` data again:
```python
pd.set_option("display.max.columns", None)
```

c. Add a comment explaining what `pd.set_option("display.max.columns", None)` does. 

<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>

## 5. `pd.DataFrame` preliminary exploration

Run each of the following methods for `prey` in a different cell and write a brief description of what they do as a comment: 

a. `head()`
b. `tail()`
c. `info()`
d. `nunique()`

For example:

```
# head()
# returns the first five rows of the data frame
prey.head()
```

If you're not sure about what the method does, try looking it up in the [`pandas.DataFrame` documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html).

e. Check the [documentation for `head()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head). If this function has any optional parameters, change the default value to get a different output. 

Print each of the following attributes of `prey` in a different cell and write a brief explanation of what they are as a comment:

f. `shape`
g. `columns`
h. `dtypes`

If you're not sure about what information is the attribute showing, look it up in the [`pandas.DataFrame` documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)!

<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>

## 6. Update column names
Change the column names of `institutionCode` and `datasetKey` to `institution_code` and  `dataset_key`, respectively. Make sure you're actually updating the dataframe. HINT: look for the documentation on the `rename` method for `pandas.DataFrames`.


## 7. Subsetting 
Complete the following subsetting tasks.

1. Select only the preservered specimes from `prey`. 
2. Select observations between 1992 and 2000
3. Select all rows for columns `species` and `eventDate`.
4. Select observations that are greater than 37&deg; latitude  and less than 39&deg; latitude 


<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>
