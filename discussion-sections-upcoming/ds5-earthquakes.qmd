---
title: Plotting geospatial data with Git Branching
subtitle: Week 5 - Discussion section
week: 5
image: images/earthquakes_map.png
sidebar: false
---
## ðŸŽƒ Happy Halloween!! ðŸŽƒ 
In this discussion section you will wrangle data about earthquakes and practice:

- Breaking down a question into accessible data wrangling steps
- Importing and plotting different types of geospatial data
- Finding additional guidance online to carry out your data wrangling plans 
- Git branching and pull requests with a partner


## Setup

:::{.callout-tip appearance="minimal"}
With your partner, decide which one of you will be Partner 1 and Partner 2. Then complete the following setup: 

### **Partner 1:**

1.  Create a new Github repository titled `earthquake-branching `. Add a README, a python gitignore, and an MIT License.

2.  Add your partner as a collaborator on your remote repository.
-  In your remote repo, navigate to **Settings**
- Click on "Collaborators" > "Add People"
- Add Partner #2 's Github username as a collaborator. 

3.  Access the workbench-1 server and clone your new repository in your EDS 220 folder. 

4.  Create a new Python notebook inside your `earthquake-branching` directory and rename it to `section-5-earthquakes.ipynb`. 

5.  Use the terminal to commit and push this file to your remote repository. 

### **Partner 2:**

No setup right now!

:::



## General directions
:::{.callout-tip appearance="minimal"}
- Add comments as appropriate along your code following the course commenting standards.
- Include markdown cells in between your code cells to add titles and information to each exercise
- Commit every time you finish a major step. **Remember to write informative commits in the imperative mood.**
:::

## About the data

For this task you will use two datasets. 

The first dataset is simplified data from the [USGS Earthquakes Database](https://earthquake.usgs.gov/earthquakes/search/). This data is in tabular format and has the following columns:

| Column | Description |
|------|-----|
| time |  date and time of event (all events from 2014)     |
| latitude | decimal degrees [-90,90]|
| longitude | decimal degrees [-360,360] |
| depth | depth of the event (km) |
| mag | magnitude of event  |
| id | event identifier  |
| place | where the event took place  |
| type | type of event  |

This is the same dataset you used in assginment 1. You can access the data through [this link](https://raw.githubusercontent.com/carmengg/eds220-hwk-1/main/data/earthquake_data.csv).

Further information about the dataset can be accessed in the [ANSS Comprehensive Earthquake Catalog (ComCat) Documentation](https://earthquake.usgs.gov/data/comcat/).

The second dataset is [Natural Earth](https://www.naturalearthdata.com)'s low resolution cultural boundaries data. These are useful to make maps of the whole world, although might not be suitable for mapping individual nations or finer geospatial analysis. You can access the "Admin 0 â€“ Countries" dataset available in [this link](https://www.naturalearthdata.com/downloads/110m-cultural-vectors/).

:::{.callout-tip appearance="minimal"}
Complete exercises 1, 2, and 3 together on Partner #1's computer. Don't worry, Partner #2- since you are a collaborator, you have access to this repository like it is your own!
:::

## 1. Brainstorm

In this session you will recreate the following map:

![](/discussion-sections/images/earthquakes_map.png)

1. Individually, write down high-level steps on how you would explore and wrangle the data to produce this map. Do not code anything yet. 

2. Discuss your high-level steps with your team. What do you see as potential challenges to implementing your plan?

3. As a team, select an initial plan for recreating this plot.

## 2. Create the plot

Use your plan as a starting point to recreate the plot.

- You may (or not) need to look online to carry out some of the steps in your plan. It is completely fine to seek help online! Resourceful troubleshooting is a key skill in data science.

- Itâ€™s ok if your initial plan changes as you work with the data and discuss challenges with your team! This brainstorm is to create a shared starting point.

<p style="text-align: center;">
**Don't forget to write informative commits in the imperative every time you finish a major step.**
</p>

## 3. Update your notebook

a. Include any takeaways from the map in a markdown cell after your plot.

b. Go over your notebook and add markdown cells with appropriate titles and subtitles to guide the reader through the different steps in your workflow. 

c. Include a markdown cell at the top with a title for your notebook and a description of what it is about.

:::{.callout-tip appearance="minimal"}
Commit and push all changes to your remote repository! 
:::


# Branching

It's time to practice some branching! Creating branches on Github encourages collaboration on Github repos without all the merge conflicts! A branch gives you an isolated environment to make changes without immediatley effecting the `main` branch. 

## Partner 2 Tasks

### **Partner 2**


 1. Check your email for the invitation to the earthquake-branching repository your partner added you as a collaborator to. Accept the invitation. Then, clone the  `earthquake-branching` repository to your workbench. 



 2. Create a new branch to make edits on with the following command in the workbnech terminal. This command is creating a new branch and calling it `partner1-branch` (be sure to update "partner1" with Partner #2's name!)

```default
git checkout -b partner2-branch
```

 3. Double check that you are on your new branch. Run the following code in the terminal. If it returns an asterik (*) next to your new branch name, you are on your new branch! 

```default
git branch
```

Output: 

![](../discussion-sections/images/git_branch_output.png)


4. Set the upstream remote branch

Before pushing, you need to set the upstream branch! This sets up a tracking relationship between your local branch and your remote branch. You will only need to set this up once for each individual branch you make! 

```default 
--set-upstream origin partner2-branch
```
5. Make the following changes on your new branch: 

- Update the color to be a fun Halloween color! 
- Follow the documentation for [`plt.figtext`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figtext.html) to add your name as an author on this plot in the bottom right corner. 




6. Push your changes! 

Run `git pull` to make sure you have the most up to date remote changes. Then run `git push`. 

:::{.callout-tip icon=true collapse=true}
# Comprehension Check
Where did you just push your changes to? Where do you need to go to check the changes you just made on your remote repository? 
:::


7. Create a pull request! 

You now have a branch called `main` that has the plot you and your partner created. You also have a branch called `partner2-branch` that has updated colors and Partner #2's name as an author. We want to merge the changes from this `partner2-branch` into our main branch. To do so, we will create a pull request. 

1. Navigate to the remote repository on github.com
2.  Click on the pull request icon
3.  Click "New Pull Request"
4.  In the compare changes tab, merge your branch into the main branch 
        
![](../discussion-sections/images/pull_request.png)

5. Click "Create Pull Request"
6.  Github will compare your branch with main and make sure there are no conflicts. If not, a "Merge pull request option" will appear. Click on this! 
7.  Write a commit message that encompasses the changes you are merging into the main branch
8.  Finally, click "Confirm Merge". You have just merged your branch into main!!! 




## Partner 1 Tasks

### **Partner 1**

Partner 1 will now follow a similar sequence of tasks, with a very important addition! The remote repository now contains changes from your parnter that you do not have locally. You need to do a ` git pull` to avoid merge conflicts! 

1. In ther workbench terminal, run `git pull` to make sure you have all changes that your partner made locally. 

2. Create a new branch to make edits on with the following command in the workbnech terminal. This command is creating a new branch and calling it `partner1-branch` (be sure to update "partner1" with Partner #1's name!)


```default
git checkout -b partner1-branch
```

3. Double check that you are on your new branch. Run the following code in the terminal. 
##### If it returns an asterik (*) next to your new branch name, you are on your new branch! 

```default
git branch
```
Output : 

![](../discussion-sections/images/git_branch_output.png)

4. Set the upstream remote branch

Before pushing, you need to set the upstream branch! This sets up a tracking relationship between your local branch and your remote branch. You will only need to set this up once for each individual branch you make! 

```default 
--set-upstream origin partner1-branch
```

5. Make the following changes on your new branch: 

- Follow the documentation for [`plt.figtext`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figtext.html) to add your name as an author on this plot in the bottom right corner. 

6. Push your changes! 

Run `git pull` to make sure you have the most up to date remote changes. Then run `git push`. 

:::{.callout-tip icon=true collapse=true}
# Comprehension Check
Where did you just push your changes to? Where do you need to go to check the changes you just made on your remote repository? 
:::


You now have a branch called `main` that has the plot you and your partner created. You also have a branch called `partner1-branch` that has Partner #1's name as an author. We want to merge the changes from this `partner1-branch` into our main branch. To do so, we will create a pull request. 

1. Navigate to the remote repository on github.com
2.  Click on the pull request icon
3.  Click "New Pull Request"
4.  In the compare changes tab, merge your branch into the main branch 

![](../discussion-sections/images/pull_request.png)

5. Click "Create Pull Request"
6.  Github will compare your branch with main and make sure there are no conflicts. If not, a "Merge pull request option" will appear. Click on this! 
7.  Write a commit message that encompasses the changes you are merging into the main branch
8.  Finally, click "Confirm Merge". You have just merged your branch into main!!! 






<!--
```python

import os
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

# Read in data
raw_eqk = pd.read_csv('https://raw.githubusercontent.com/carmengg/eds220-hwk-1/main/data/earthquake_data.csv')

fp = os.path.join('data','ne_110m_admin_0_countries','ne_110m_admin_0_countries.shp')
worldmap = gpd.read_file(fp)

# Select only earthquakes of magnitude geq 6.5
eqk = raw_eqk[(raw_eqk.type == 'earthquake') & (raw_eqk.mag >= 6.5)]

# Convert earthquake data into geo-df
eqk = gpd.GeoDataFrame(eqk, 
                       geometry = gpd.points_from_xy(eqk.longitude, eqk.latitude),
                       crs='EPSG:4326'
                       )

# Create plot
fig, ax = plt.subplots(figsize=(10,8))
ax.axis('off')

worldmap.plot(ax=ax,
           color='lightgrey')
eqk.plot(ax=ax,
        column='mag',
        cmap='Oranges',
        edgecolor='brown',
        legend=True,
        legend_kwds={'shrink':.6,
                    'label':'moment magnitude'})

ax.set_title('Earthquakes of magnitude at least 6.5 in 2014')

ax.annotate('Data: USGS Earthquakes Database',
             xy=(0.085,0.15),
             xycoords='figure fraction',
             fontsize=9,
             color='0.7')

plt.show()
```
-->