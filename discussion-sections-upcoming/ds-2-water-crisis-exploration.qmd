---
title: Water conflicts in the Colorado River Basin
subtitle: Week 2 - Discussion section
week: 2
image: images/Tecopa_site2.JPG
sidebar: false
jupyter: mpc-env-kernel
---

This discussion section will guide you exploring data about water-related conflicts at the Colorado River Basin using data from the [U.S. Geological Survey (USGS)](https://www.usgs.gov). In this discussion section, you will:

- Practice version control using git via the terminal
- Discuss advantages and disadvantages about different methods of data loading
- Use methods to work with `pandas.Series` of strings using the `.str` accessor

## Setup

:::{.callout-tip appearance="minimal"}
1. In the Taylor server, start a new JupyterLab session or access an active one.

2. In the terminal, use `cd` to navigate into the `eds-220-sections` directory. Use `pwd` to verify `eds-220-sections` is your current working directory.

3. Create a new Python Notebook inside your `eds-220-sections` directory and rename it to `section-2-co-basin-water-conflicts.ipynb`. 

4. Use the terminal to stage, commit, and push this file to the remote repository. Remember:
    1. `git status` : check git status
    2. `git add FILE-NAME` : stage updated file
    3. `git status` : check git status again to confirm
    4. `git commit -m "Commit message"` : commit with message
    5. `git pull` : check local repo is up to date (best practice)
    5. `git push` : push changes to upstream repository

<p style="text-align: center;">
**CHECK IN WITH YOUR TEAM** 
</p>
<p style="text-align: center;">
**MAKE SURE YOU'VE ALL SUCCESSFULLY SET UP YOUR NOTEBOOKS BEFORE CONTINUING**
</p>
:::

## General directions
:::{.callout-tip appearance="minimal"}
- Add comments in each one of your code cells. 
- On each exercise, include markdown cells in between your code cells to add titles and information.
- Indications about when to commit and push changes are included, but you are encouraged to commit and push more often. 
:::

## About the data
For these exercises we will use data about [Water Conflict and Crisis Events in the Colorado River Basin](https://www.sciencebase.gov/catalog/item/63acac09d34e92aad3ca1480) @holloman_coded_2023. This dataset is stored at [ScienceBase](https://www.sciencebase.gov/catalog/),a digital repository from the U.S. Geological Survey (USGS) created to share scientific data products and USGS resources. 

The dataset is a CSV file containing conflict or crisis around water resource management in the Colorado River Basin. 
The Colorado River Basin, inhabited by several Native American tribes for centuries, is a crucial water source in the southwestern United States and northern Mexico, supporting over 40 million people, extensive agricultural lands, and diverse ecosystems. 
Its management is vital due to the region's arid climate and the competing demands for water, leading to significant challenges related to water allocation and conservation. 

![Colorado River Basin.  U.S. Bureau of Reclamation. ](/discussion-sections-upcoming/images/co-river-basin.png)


<!-- 10 minutes -->
## 1. Archive exploration
Take some time to look through the dataset's description in the ScienceBase repository. Look for the following information:

a. Where was the data collected from?
<!-- 
articles from newspapers describing water-related events in geographic areas in the Basin
-->
b. During what time frame were the observations in the dataset collected?
<!--
2005-2021
-->
c. What was the author's perceived value of this dataset?
<!--
 examining crisis on a continual basis toward identification of hotspots from conflict, identifying primary stakeholders, and who experiences crises.
-->


In a markdown cell, use your answers to the previous questions to add a brief description of the dataset. Briefly discuss anything else that seems like relevant information. Include a citation, date of access, and a link to the archive. 

<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>

<!-- 3 minutes -->
## 2. Data loading

a. In class we have (so far) loaded data into our workspace either by downloading the file and storing a copy of it in our computer or by accessing the file directly through a URL. With your team, discuss what are, in general, the advantages and disadvantages of these two methods of data access. 

b. Import the `Colorado River Basin Water Conflict Table.csv` file [from the Science Base repository](https://www.sciencebase.gov/catalog/item/63acac09d34e92aad3ca1480) into your workspace. Name your data frame variable `df`.

<p style="text-align: center;">
**CHECK IN WITH YOUR TEAM** 
</p>
<p style="text-align: center;">
**MAKE SURE YOU'VE ALL SUCCESSFULLY LOADED THE DATA BEFORE CONTINUING**
</p>

<p style="text-align: center;">
**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**
</p>

<!--
```{python}
import pandas as pd

df = pd.read_csv('data/Colorado River Basin Water Conflict Table.csv')
df.head(5)
```
-->

## 3. Preliminary data exploration

Write a list with at least four ways in which you coud gain preliminary information about this dataset and why these are relevant.

<!--
```{python}
# df.head()
# df.shape
# df.columns
# df.Stakeholders.unique()
```

```{python}
(df['State'].dropna()
            .str.split(';', expand=True)
            .stack()
            .str.strip()
            .value_counts())
```
-->

## 4. String accessor for `pandas.Series`

In the following exercises we will work with `pandas.Series` whose values are strings. This is a common scenario, so `pandas` has special [string methods](https://pandas.pydata.org/docs/user_guide/text.html#string-methods) for this kind of series. These methods are accessed via the **`str` accessor**. **Accessors** provide additional functionality for working with specific kinds of data (in this case, strings). 


1. Carefully read the code below. We'll use some of it soon.

```{python}
import pandas as pd 
import numpy as np

# Example series
s = pd.Series(['California; Nevada', 'Arizona', np.nan, 'Utah; Colorado'])
s
```
```{python}
# str accessor (doesn't do anything by itself)
s.str
```
```{python}
# Use str accessor with additional methods to perform string operations
# .split splits strings by ';' and expands output into separate columns
s.str.split(';', expand=True)
```



## Examine state codes

Our goal today is to **find which states are reported in the dataset as having a water conflict**. 

1. What are the unique values in the `States` column? What could be a challenge to writing code to find which states are listed (without repetition)? Remember to write longer answers in mardown cells, not as comments.

```{python}
print(df['State'].unique())
```

```{python}
for x in df['State'].unique():
    print(x)
```

## Brainstorm

1. Individually, write step-by-step instructions on how you would create a list (without repetition) with the state codes in which a water conflict reported has been reported. It's ok if you don't know how to code each step - it's more important to have an idea of what we'll do.

2. Discuss your ideas on how to approach this problem with your team.

The next exercises will guide you through finding the state codes in the dataset. There are *many* ways of extracting this information. The one presented here might not be the same way you thought about doing it - that's ok! This one was designed to practice using the `.str` accessor in a `pandas.Series`.

## Drop NAs

Use the `dropna()` method on the State column to create a new `pandas.Series` called `states` without NAs. Check there are no NAs in the new `states` series.

```{python}
states = df['State'].dropna()
states
```

```{python}
states.hasnans
```

## Split strings

## Stack the data frame

## Value counts

## Method chaining


```{python}
# stakeholders = (df['Stakeholders'].dropna()
#                      .str.split(',', expand=True)
#                      .apply(lambda x: x.str.strip())
#                      .values
#                      .ravel())

# stakeholders = pd.unique(stakeholders)
# print(stakeholders)
```

