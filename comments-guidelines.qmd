
# Course Comments Standards

## The basics

- Comment should start with a pound sign `#` followed by a single space, then the text.
- The first word in the comment should be capitalized @pep8.
- Always use proper spelling.
- Periods at the end of short comments are optional, but you should be consistent across your code.

#### Example

‚úÖ Comments follow all the basic standards
```python
# Calculate the average temperature from the dataset
average_temp = sum(temperatures) / len(temperatures)

# Apply the temperature correction
corrected_temp = average_temp + correction_factor
```

üö´ Typos, incosistent capitalization, spacing, and punctuation
```python
#calculate teh average temp from dataset.
average_temp = sum(temperatures) / len(temperatures)

    ##      Apply the temperature correction
corrected_temp = average_temp + correction_factor
```

## Content 

### Make sure comments are consistent with the code  {.unlisted}

As stated in the Python PEP 8 @pep8 guide:

> Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!

‚úÖ Comments must be consistent with the code
```python
# Convert temperature from Celsius to Fahrenheit.
df['temp_f'] = df['temp_c'] * 9/5 + 32

```

üö´ Comment is outdated and contradicts the code
```python
# Convert temperature from Fahrenheit to Celsius
df['temp_f'] = df['temp_c'] * 9/5 + 32

```

### Keep comments short and clear {.unlisted}

Make comments concise and easy to understand. Avoid long-winded explanations.

#### Example
‚úÖ Comments follow all the basic standards
```python
# Filter rows where the region is a wetland
wetland_data = df[df['region_type'] == 'wetland']
```

üö´ Typos, incosistent capitalization, spacing, and punctuation
```python
# In this part of the code, we are filtering the DataFrame 'df' to keep only 
# the rows where the value in the 'region_type' column is equal to 'wetland'. 
# This will give us data specifically for wetland regions.
wetland_data = df[df['region_type'] == 'wetland']

```

### Use comments to explain why, not what {.unlisted}

Write comments to explain why a piece of code exists, what it‚Äôs doing at a high level, or to describe a complex algorithm. Avoid comments that explain what the code is doing in obvious ways.

#### Example

‚úÖ  Comment explains the rationale behind the code
```python
# Find the largest value to normalize the data.
x = find_max_value(array)  
```

üö´ Redundant and obvious comment
```python
# Assign the maximum value of the array to x.
x = find_max_value(array)  
```

### Keep it professional {.unlisted}

Comments should be professional and avoid jokes, personal remarks, or irrelevant information.

‚úÖ  Professional and relevant comment
```python
# Calculate the total carbon emissions for the region
total_emissions = df['emissions'].sum()
```

üö´ Unprofessional comment with casual remarks
```python
# Time to crunch some numbers and save the planet! üåç
total_emissions = df['emissions'].sum()
```

## Special types of comments

### Inline comments
9. Use inline comments sparingly
Inline comments (comments on the same line as code) should be used only when necessary. Keep them short and place them two spaces after the code.

**Example:**
```python
value = compute_value(x, y)  # This handles edge cases for x and y.
```

### Block comments

For more complex explanations, use block comments spanning multiple lines. Each line should start with a `#` and be aligned with the code it describes.

**Example:**
```python
# This function normalizes the data by subtracting the mean
# and dividing by the standard deviation. We do this to ensure
# the data is on a comparable scale.
def normalize(data):
    mean = sum(data) / len(data)
    std_dev = (sum((x - mean)**2 for x in data) / len(data)) ** 0.5
    return [(x - mean) / std_dev for x in data]
```

Don't get creative with indentations {.unlisted}

Proper alignment and consistent indentation contribute to clean, readable comments and code.

```python
# e - I want to view the 'ecoregion' and 'habitat' columns to see how they differ
    # do this using df[['col1', 'col2']]
coral_div[['Ecoregion', 'Habitat']].head()
```

### Docstrings
7. Use Docstrings for Functions and Classes
For functions, classes, and modules, use docstrings (triple quotes) to describe the purpose, parameters, and return values. The first line should be a summary, followed by a blank line, and then a more detailed description if needed.

**Example:**
```python
def add_numbers(a, b):
    """
    Adds two numbers and returns the result.

    Parameters:
    a (int): The first number.
    b (int): The second number.

    Returns:
    int: The sum of the two numbers.
    """
    return a + b
```

### TODO comments
For reminders about future code improvements or unresolved issues, use `TODO:` followed by a brief explanation.

**Example:**
```python
# TODO: Add error handling for invalid input
```

## General advice

### Avoid over-commenting
Do not over-comment obvious code, as this can clutter your code and reduce readability.

**Example:**
```python
# Bad: Over-commenting
i = 0  # Set i to 0
while i < 10:  # Loop while i is less than 10
    print(i)  # Print the value of i
    i += 1  # Increment i
```

### Avoid under-commenting


### Avoid "comments as deodorant"
The phrase "code smells" refers to symptoms in our code that may indicate deeper problems with its design or structure. In this case, using "comments as deodorant" means using comments to explain overly-complicated code, instead of making your code as self-explanatory as possible. Avoid comments as deodorant and, instead, work on making your code simple and understandable. @fowler_refactoring_1999

