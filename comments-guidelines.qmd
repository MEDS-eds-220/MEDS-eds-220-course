
# Course Comments Standards

## The basics

- Comment should start with a pound sign `#` followed by a single space, then the text.
- The first word in the comment should be capitalized @pep8.
- Always use proper spelling.
- Periods at the end of short comments are optional, but you should be consistent across your code.

#### Example

üö´ Typos, incosistent capitalization, spacing, and punctuation
```python
#calculate teh average temp from dataset.
average_temp = sum(temperatures) / len(temperatures)
##
    ##      Apply the TEMPERATURE correction
corrected_temp = average_temp + correction_factor
```

‚úÖ Comments follow all the basic standards
```python
# Calculate average temperature from dataset
average_temp = sum(temperatures) / len(temperatures)

# Apply temperature correction
corrected_temp = average_temp + correction_factor
```

## Content 

### Make sure comments are consistent with the code  {.unlisted}

As stated in the Python PEP 8 @pep8 guide:

> Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!

üö´ Comment is outdated and contradicts the code
```python
# Convert temperature from Fahrenheit to Celsius
df['temp_f'] = df['temp_c'] * 9/5 + 32
```

‚úÖ Comments must be consistent with the code
```python
# Convert temperature from Celsius to Fahrenheit
df['temp_f'] = df['temp_c'] * 9/5 + 32

```

### Keep comments short and clear {.unlisted}

Make comments concise and easy to understand. Avoid long-winded explanations.

#### Example

üö´ Too long and redundant
```python
# In this part of the code, we are filtering the DataFrame 'df' to keep only 
# the rows where the value in the 'region_type' column is equal to 'wetland'. 
# This will give us data specifically for wetland regions.
wetland_data = df[df['region_type'] == 'wetland']
```

‚úÖ Concise and clear comments
```python
# Filter rows where the region is a wetland
wetland_data = df[df['region_type'] == 'wetland']
```

### Keep it professional {.unlisted}

Comments should be professional and avoid jokes, personal remarks, or irrelevant information.

üö´ Unprofessional comment with casual remarks
```python
# Time to crunch some numbers and save the planet! üåç
total_emissions = df['emissions'].sum()
```

‚úÖ Professional and relevant comment
```python
# Calculate the total carbon emissions for the region
total_emissions = df['emissions'].sum()
```


## Special types of comments

### Inline comments
Inline comments are comments on the same line as the code. Best practices are:

- Use inline comments sparingly.
- Keep them short and place them two spaces after the code.

üö´ In-line comments are overused and don't follow regular spacing and capitalization
```python
years = [2000, 2005, 2010, 2015, 2020]#list of years for x-axis
co2_levels = [370, 380, 390, 400, 410]  #CO2 levels for y-axis

plt.plot(years, co2_levels)        # Plot years against CO2 levels
plt.title('CO2 Levels Over Time')  # Add a title
plt.xlabel('Year')                 # x-axis = Year
plt.ylabel('CO2 Levels (ppm)')     # y-axis = CO2 Levels (ppm)
plt.grid(True) # Enable grid on the plot
plt.axhline(y=400, color='r', linestyle='--', label='400 ppm Threshold')
plt.show()         #display the plot

```

‚úÖ In-line comments are sparingly used and focused
```python
years = [2000, 2005, 2010, 2015, 2020]
co2_levels = [370, 380, 390, 400, 410]

# Plot to see trend in atmospheric CO2 concentrations
plt.plot(years, co2_levels)

plt.title('CO2 Levels Over Time')
plt.xlabel('Year')
plt.ylabel('CO2 Levels (ppm)')

plt.grid(True)  # Show grid for better readability
plt.axhline(y=400,  # Add a threshold line for 400 ppm
            color='r', 
            linestyle='--', 
            label='400 ppm Threshold')  
plt.show()
```

### Block comments

For more complex explanations, use block comments spanning multiple lines. Each line should start with a `#` and be aligned with the code it describes.

**Example:**
```python
# This function normalizes the data by subtracting the mean
# and dividing by the standard deviation. We do this to ensure
# the data is on a comparable scale.
def normalize(data):
    mean = sum(data) / len(data)
    std_dev = (sum((x - mean)**2 for x in data) / len(data)) ** 0.5
    return [(x - mean) / std_dev for x in data]
```

Don't get creative with indentations {.unlisted}

Proper alignment and consistent indentation contribute to clean, readable comments and code.

```python
# e - I want to view the 'ecoregion' and 'habitat' columns to see how they differ
    # do this using df[['col1', 'col2']]
coral_div[['Ecoregion', 'Habitat']].head()
```
<!--
### Docstrings
7. Use Docstrings for Functions and Classes
For functions, classes, and modules, use docstrings (triple quotes) to describe the purpose, parameters, and return values. The first line should be a summary, followed by a blank line, and then a more detailed description if needed.

**Example:**
```python
def add_numbers(a, b):
    """
    Adds two numbers and returns the result.

    Parameters:
    a (int): The first number.
    b (int): The second number.

    Returns:
    int: The sum of the two numbers.
    """
    return a + b
```
### TODO comments
For reminders about future code improvements or unresolved issues, use `TODO:` followed by a brief explanation.

**Example:**
```python
# TODO: Add error handling for invalid input
```
-->

<!--
## General advice

### Avoid over-commenting
Do not over-comment obvious code, as this can clutter your code and reduce readability.

**Example:**
```python
# Bad: Over-commenting
i = 0  # Set i to 0
while i < 10:  # Loop while i is less than 10
    print(i)  # Print the value of i
    i += 1  # Increment i
```


### Avoid under-commenting

```python
# Temporal range of interest
time_range_1 = "2017"
time_range_2 = "2020"

bbox = [-112.826843, 32.974108, -111.184387, 33.863574]

# catalog search
search = catalog.search(
    collections=['io-biodiversity'],
    bbox=bbox,
    datetime=time_range_1)
```

### Do not rely on commenting for running code

### Avoid "comments as deodorant"
The phrase "code smells" refers to symptoms in our code that may indicate deeper problems with its design or structure. In this case, using "comments as deodorant" means using comments to explain overly-complicated code, instead of making your code as self-explanatory as possible. Avoid comments as deodorant and, instead, work on making your code simple and understandable. @fowler_refactoring_1999
-->

## Next level comments


### Use comments to explain why, not what {.unlisted}

When we are learning to code, **it can be super useful to comment on 'what' each line of code does. That's ok!** Over time, as you become more comfortable with the syntax, try to focus your comments on 'why' certain choices were made or when something might not be immediately obvious to others. 
**Use comments to explain why a piece of code exists, what it‚Äôs doing at a high level, or to describe a complex algorithm.** Great comments add value to the code, going beyond describing what is clear from the function and variable names.

Your comments will become more streamlined and naturally shift from technical to conceptual as your coding skills improve!

#### Example

‚ö†Ô∏è Comment restates in plain language what the code does
```python
# Assign the maximum value of the array to x
x = find_max_value(array)  
```

‚úÖ Comment explains the rationale behind the code
```python
# Find the largest value to normalize the data
x = find_max_value(array)  
```

### Avoid over-commenting
Do not over-comment obvious code, as this can clutter your code and reduce readability.

**Example:**
```python
# Bad: Over-commenting
i = 0  # Set i to 0
while i < 10:  # Loop while i is less than 10
    print(i)  # Print the value of i
    i += 1  # Increment i
```