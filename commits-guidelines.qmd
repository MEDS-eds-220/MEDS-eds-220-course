
# Guidelines for Writing Good Commit Messages

## 1. Use the Imperative Mood
Write commit messages in the imperative mood (i.e., as if youâ€™re giving a command). This is a widely accepted convention.

**Example:**
- Good: `Add function to process user input`
- Bad: `Added function to process user input` or `Adding function to process user input`

## 2. Keep the First Line Short and Descriptive
The first line of the commit message should summarize the changes in around 50 characters or less. This makes it easy to scan in logs or on GitHub.

**Example:**
```bash
Fix bug in data processing pipeline
```

## 3. Provide More Detail in the Body (If Necessary)
If the commit requires further explanation, add a blank line after the summary and provide a more detailed description in the body. Focus on **what** and **why**, not necessarily **how**.

**Example:**
```bash
Add user authentication check before data access

Previously, users could access the data without proper authentication.
This commit adds a check to ensure that only authenticated users can
access the sensitive data.
```

## 4. Explain the "Why" and the Impact
Make sure the commit message explains the reason behind the change, not just what was changed. This helps future developers (or your future self) understand the motivation.

**Example:**
```bash
Refactor database query to improve performance

The previous query was causing significant lag for larger datasets.
This change optimizes the query and reduces execution time by 40%.
```

## 5. Be Consistent
Use a consistent format for commit messages throughout the project. If your team follows a particular convention (e.g., prefixing messages with issue numbers), stick to it.

**Example:**
```bash
# Consistent format with issue tracking
[ISSUE-123] Fix broken link in user dashboard
```

## 6. Capitalize the First Letter of the Summary
Always start the commit message with a capital letter to keep it professional and uniform.

**Example:**
- Good: `Update documentation for new feature`
- Bad: `update documentation for new feature`

## 7. Avoid Commit Messages Like "Fixes" or "Miscellaneous"
Vague or uninformative commit messages are not helpful. Avoid commit messages like "Fixes," "Updates," "Miscellaneous changes," or "WIP."

**Example:**
```bash
Bad: "Fix stuff"
Good: "Fix missing validation for email input"
```

## 8. Group Related Changes Together
A commit should represent a single logical change. Avoid lumping multiple unrelated changes into a single commit. Instead, break them up into separate, focused commits.

**Example:**
- Good: Commit the bug fix in one commit and the new feature in another.
- Bad: Combine multiple changes in one commit with a message like "Fix bug and add new feature."

## 9. Reference Relevant Issues or Pull Requests
If applicable, reference issue numbers, bug reports, or pull requests in the commit message to tie the commit to the broader project context.

**Example:**
```bash
Fix typo in data validation logic (#456)
```

## 10. Use Short, Informative Messages for Small Changes
Even for small changes, write clear and meaningful messages. Something like `Fix typo` or `Update README` is fine for minor commits as long as it's clear what the change is about.

## 11. Test Before Committing
Ensure the code works as expected before committing, and write a commit message that reflects the final, working state of the change.

## 12. Avoid Emoticons and Slang
Commit messages should be professional. Avoid using emojis, abbreviations, or casual language.

**Example:**
- Bad: `ðŸ”¥ Fix all the things! ðŸš€`
- Good: `Fix critical bugs in data parsing logic`

## Example of a Well-Structured Commit Message:

```bash
Refactor user input validation to reduce redundancy

The validation logic for user input was repeated in multiple places.
This commit refactors the validation into a separate function that
can be reused across different modules. This improves code maintainability
and reduces potential errors.

Closes #123
```
