---
toc-title: In this lesson
slides: https://docs.google.com/presentation/d/1IeqTcZFZHsk93ASsU6VTNC68vwlaRbfg-eC9uMzfVow/edit?usp=sharing
---

# Merge conflicts

<!-- *This activity has been adapted to quarto and Jupyter notebooks from [Casey Oâ€™Haraâ€™s git activity for EDS 211](https://docs.google.com/document/d/1ZLD7CQXCgCp2B1xXGlwoJHOB_dzWe088lOVsJmqA3eY/edit?usp=sharing) with information from [NCEAS Learning Hub 10  Collaborating using Git and GitHub & Merge Conflicts](https://learning.nceas.ucsb.edu/2023-10-coreR/session_10.html).* -->

Git tracks changes by noting which lines of code have changed - you can only add, delete, or change (delete then add) a line at a time.  When collaborating with others on coding tasks, occasionally two people try to change the same line at the same time.  This results in a merge conflict!


In this activity we will:

1) Create and resolve a merge conflict individually on a Quarto file. 

2) Create and resolve a merge conflict in pairs on a Quarto file.

3) Create and resolve a merge conflict individually on a Jupyter notebook using VSCode. 

## Setup (everyone, individual)

1. Log in to GitHub.

2.  Create a new repository on GitHub. Use the following settings:

    - Repository name: `merge_test_YOURLASTNAME`.

    - Description: Repo to practice resolving git merge conflicts (delete later).

    - Visibility: Keep the repository public.

    - Don't select any template to start.

    - Add a README file.

    - Add a Python .gitignore template.

    - No license.

3. On your personal computer and using VSCode, clone your repository.

4. Update the default method for pulling into repository by running this line of code in the terminal: 
```bash
git config pull.rebase false
```
This establishes that the default strategy for pulling is that git will first try to auto-merge the files. If auto-merging is not possible, it will then indicate a merge conflict.


## Activity 1: merge conflict

### Step 1 (@ personal computer): Write some code

1. Create a new Quarto document called `merge_test_YOURLASTNAME.qmd`.

2. Add this YAML header to specify which jupyter kernel will be used to render the file:
```yml
---
jupyter: eds220-env
---
```

3. Copy the following code into a Python code chunk in your Quarto file:

```python
import pandas as pd
import numpy as np

# Create a test 10x3 dataframe
df = pd.DataFrame({
    "A": np.arange(1, 11),
    "B": np.random.randint(10, 100, size=10),
    "C": np.random.choice(["w", "x", "y", "z"], size=10)
})

print(df)

# Select rows subset
subset = df[df['C'] == 'w']

print("Subset has ", len(subset), "rows.")
```

4. Examine the code, make sure you understanding what it is doing! Preview the output by running 
```bash
quarto preview merge_test_YOURLASTNAME.qmd
```

5. Save your file, pull, commit, and push your updates to GitHub. 

6. Go over to GitHub and look at your repository. Your Quarto file is now upstream!

### Step 2 (@ workbench): Clone repo and update code

1. Clone the `merge_test_YOURLASTNAME` repository to your workbench-1 workspace. 

2. In the terminal, run
```bash
git config pull.rebase false
```

3. Open the Quarto file and update the selection code to *select a different letter*.

4. Preview the output by running 
```bash
quarto preview merge_test_YOURLASTNAME.qmd
```

5. Save and try to pull. What does it tell you and why?

6. Commit, pull, and push your changes. Do your changes go through? Why or why not?

7. Go over to GitHub and look at your repository. Your updated Quarto file is now upstream!

### Step 3  (@ personal computer): Update code without pulling changes

**Let's go back to the repo `merge_test_YOURLASTNAME` in your personal computer.**

1. **Do not pull.** Not pulling when you re-engage with your work is a bad practice! But we need to do it in order to create the merge conflict. ðŸ˜ˆ

2. Update the selection again to be a different letter. You may preview the ouput if you want. 

3. Save and commit your work, then try to pull again.  What does it tell you?  Read the message carefully!

4. Congrats, youâ€™ve created a merge conflict! 

### Step 4  (@ personal computer): Resolve merge conflict

1. Donâ€™t panic!

2. Look at the Quarto document and identify where the conflict has occurred:

```bash
<<<<<<< HEAD
### Your local changes
=======
### The upstream code (latest version on GH)
>>>>>>> a4b95dc743f0244b11754e9cb8c6385d427eaa9b
```

3. Decide what to do with the code inside the  `<<<<<<<` and `>>>>>>>`.  Four options:

    a. Keep your new code! 
    b. Keep your upstream code! 
    c. Combine the best parts of code from each!  
    d. Delete it all and write something completely different! 

4. Resolve the conflict. On VSCode you can use the IDE buttons at the top of the conflict:

![](images/git-merge-conflicts/VSCode-merge-conflict.png)

Or you can also manually edit the file by deleting the boundary lines around the merge conflict (the lines containing `<<<<<<<`, `=======`, and `>>>>>>>`).

5. Once you are done resolving the conflict, save your work, commit (explaining how you resolve it), pull, and push.

**NOTE: sometimes, multiple conflicts may have occurred in different places in the same script, or in separate scripts.**  You must resolve them all before you can wrap up the merge conflict.

6. Celebrate! ðŸŽ‰

::: {.callout-tip}
## Always do `git pull` before starting to update your code!

If you are your only collaborator, the safest way to avoid creating merge conflicts with yourself is to always run `git pull` when you start working locally. 
:::

## Activity 2: merge gone right

We don't necessarily get a merge conflict every time that a file is modified separately more than once. Sometimes git actually tries its best and is able to reconcile the two versions. Conflicts often happen when the same line of code is being udpated. Here we'll see an example of a merge gone right.

### Setup

1. Do `git pull` on your personal computer.

2. Do `git pull` on  workbench-1.

Now we are sure we have the latest version of the file on both computers. 

### Step 1 (@ personal computer): Update code

1. Update some of the code that is creating the data frame. Perhaps update the letters or numbers that are selected or the column names, or the shape of the data frame. *Do not update any other code.*

2. Commit, pull, and push your changes.


### Step 2 (@ workbench): Update code (a different section)

1. **Do not pull.** We already know better, but let's pretend we were distracted today and we forgot! 

2. Update the code that subsets the dataframe by selecting a different letter. Notice we are not updating the same code as before. 

3. Save and commit your work, then try to pull again.  What does it tell you?  Read the message carefully!

### Step 3 (@ workbench): Commit the merge

There were no merge conflicts because git tried it's best and managed to merge your code with the upstream code. However, git still needs to create a **merge commit message**. So, it opens a text editor where you can update the draft merge commit message. 

1. Make any updates to the git merge message. This is optional, you can just keep the default message. 

2. If the text editor looks like this, you are in `Vim`:

```bash
Merge branch 'main' of https://github.com/carmengg/merge_test-DELETE
# Please enter a commit message to explain why this merge is necessary,
# especially if it merges an updated upstream into a topic branch.
#
# Lines starting with '#' will be ignored, and an empty message aborts
# the commit.
~                                                                                                   
~                                                                                                   
~                                                                                                   
~          
```

Update the message if needed. To exit the editor:

a. Press `Esc`
b. Type `:wq` (which means write and quit)
c. Press `Enter`

3. If the text editor looks like this, you are in `nano`:

![](images/git-merge-conflicts/nano.png){width=60%}

Update the message if needed. To exit the editor:

a. Press `CTRL + O` (the letter O, not zero) to save.
b. Press `Enter` to confirm the file name.
c. Exit the editor by pressing `CTRL + X`.

4. Congrats! You merged without conflicts! ðŸŽŠ


::: {.callout-tip}
## Remember: Always do `git pull` before starting to update your code!

Even if merge commits are not a big deal, the best practice is to keep your git history clean by running `git pull` when you start working. 
:::


<!-- 
NEXT TIME: merge conflicts with notebooks.
https://www.reviewnb.com/git-jupyter-notebook-ultimate-guide
 -->