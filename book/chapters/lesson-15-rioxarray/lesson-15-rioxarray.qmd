# `rioxarray`

In this lesson we will introduce [`rioxarray`](https://corteva.github.io/rioxarray/stable/), a Python extension for `xarray` to manipulate `xarray.DataArray`s as rasters. 
The name `rioxarray` stands for *raster input/output + xarray*. 

We will use the `rioxarray`'s `rio` accessor to obtain raster information from an `xarray.DataArray` and do some raster manipulations (calculate NDVI). 

## About the data
The raster files we will use today come from the [US National Agriculture Imagery Program (NAIP)](https://naip-usdaonline.hub.arcgis.com). 
NAIP images are are high-resolution aerial images with four spectral bands: red (R), green (G), blue (B) and near-infrared (NIR). 
The raster's we'll use today are from 2020.

The data used in this lesson was pre-processing from a complete NAIP scene to separate the RGB bands from the NIR band and reduce the spatial extent. 
The data was accessed through [Microsoft's Planetary Computer NAIP data repository](https://planetarycomputer.microsoft.com/dataset/naip#overview).

## Import a TIF file

Let's start by loading the libraries we will use: 

```{python}
import os

import numpy as np
import matplotlib.pyplot as plt

import geopandas as gpd
from shapely.geometry import Polygon

import rioxarray as rioxr
```

There are [multiple ways of opening a TIF file using `xarray` or `rioxarray`](https://corteva.github.io/rioxarray/html/getting_started/getting_started.html). 
Using the `rioxarray.open_rasterio()` function to open the TIF file is a simple way to make sure all our geospatial data gets loaded correctly:

```{python}
# Import NIR tif file
fp = os.path.join('data','NAIP_SB_nir.tif')
nir = rioxr.open_rasterio(fp)
nir
```

## `xarray.DataArray` exploration

First, let's verify the raster we loaded is an `xarray.DataArray`:

```{python}
type(nir)
nir
```

Notice we see all the components of an `xarray.DataArray`: its dimensions (band, y, x), the coordiantes for each dimension, and some attributes. We can also directly access some of these attribues:

```{python}
print('Shape: ', nir.shape)
print('Data type: ', nir.dtype, '\n')
```

Using the `.values` attribute we can retrieve the underlying `numpy.array` holding the values of the variable:

```{python}
print(type(nir.values))
nir.values
```

We can also plot our data:

```{python}
nir.plot()
```

Notice the coordinates on the x and y axes.

This map shows the light captured in the near-infrared spectrum by a sensor on a plane. 
**Can you guess where this?** 
If you guessed Santa Barbara downtown, you guessed right! 

## Drop a dimension

Notice that our raster has an unnecessary extra dimension: band.

```{python}
print("Sizes of dimensions:", nir.sizes)
```

This is making this `xarray.DataArray` three-dimensional when it is not needed. 
We can "squeeze this dimension" of length 1 by:

1. using the [`squeeze()` method](https://docs.xarray.dev/en/stable/generated/xarray.DataArray.squeeze.html).
If we don't pass any parameters, then `squeeze()` gets rid of all dimensions with length one, and then

2. getting rid of the associated coordinates for this dimension. 
We can do this using the `xarray.DataArray` `drop()` method and specifying the name of the coordinates we want to remove, in this case 'band'.

Let's do this:
```{python}
# Original dimensions and coordinates
print(nir.dims, nir.coords,'\n')

# Remove length 1 dimension (band)
nir = nir.squeeze()
print(nir.dims, nir.coords,'\n')

# Remove coordinates associated to band
nir = nir.drop('band')
print(nir.dims, nir.coords)
```

## `rio` accessor

Remember an **accessor** in Python let's us access a different set of properties of an object. We have previously used accesors like `.str` and `.dt` in `pandas` to work with strings and dates. In this lesson, we will use the `.rio` accessor for an `xarray.DataArray` to access its raster properties. 
For example, we can access the number of bands, height, width, spatial bounding box, and CRS:

```{python}
# Examine raster attributes using rio accessor
print('Number of bands: ', nir.rio.count)
print('Height: ', nir.rio.height)
print('Width: ', nir.rio.width, '\n')

print('Spatial bounding box: ')
print(nir.rio.bounds(), '\n')

print('CRS: ', nir.rio.crs)
```

<!--
![Source: [spatialreference.org](https://spatialreference.org/ref/epsg/26911/)]()
-->

## Multi-band raster

Let's now import the RGB raster
```{python}
# Import RGB raster
fp = os.path.join('data','NAIP_SB_rgb.tif')
rgb = rioxr.open_rasterio(fp)
rgb
```

Notice this raster has three bands, instead of one. 
This makes sense because we know these bands correspond to the red, green and blue bands of the image. 

:::{.callout-tip}
Obtain the following information about the RGB raster: shape, number of bands, data type of its values and CRS.

<!--
```python
print('rgb shape: ', rgb.shape)
print('data type: ', rgb.dtype)
print('# bands: ', rgb.rio.count)
print('CRS: ', rgb.rio.crs)
```
-->
:::

Finally, let's plot this raster.
Since it has three bands, we can plot it as an image using the `.plot.imshow()` method, which will interpret the three bands of the object as RGB.

```{python}
# Plot three bands as RGB image
rgb.plot.imshow(size=6,  # Plot's height in inches
                aspect=rgb.rio.aspect  # Ratio of width/height
                )
```

## Box for clipping

Our area of interest (aoi) for this lesson is a smaller region that includes only a few blocks around the NCEAS building. 
An easy way to obtain coordinates for such a region:

![Screenshot from geojson.io](/images/geojsonio-sb.png)

1. go to  [https://geojson.io/](https://geojson.io/) website,
2. zoom in until you find the NCEAS building in Santa Barbara, it might help to change to 'Satellite Streets' view on the bottom left corner, 
3. click on the rectangle icon on the right-side toolbar and draw a small region around the NCEAS buildng,
4. the geoJSON code representing this area will appear in the code box,
5. one option is two copy-paste this geoJSON into an empty text file and save such file with the .json extension, we could then read it in using `geopandas`
6. instead, we will create our region of index by just *copy-pasting the list of points* and storing it as a variable:

```{python}
# vertices of our aoi box
points = [[-119.70608227128903, 34.426300194372274],
          [-119.70608227128903, 34.42041139020533],
          [-119.6967885126002, 34.42041139020533],
          [-119.6967885126002, 34.426300194372274],
          [-119.70608227128903, 34.426300194372274]]
```

We can then create a new `geopandas.GeoDataFrame`:

```{python}
# create geodataframe with aoi 
aoi = gpd.GeoDataFrame(geometry=[Polygon(points)],
                           crs='epsg:4326')
aoi
```

Let's break this down a bit:

- first, we use the `shapely`'s `Polygon()` function to create a polygon from our `points` list. 
- in `[Polygon(points)]` we put this polygon inside a list so we can form the geometry column of our new `gpd.GeoDataFrame`
- we know all the geoJSON files have CRS equal to EPSG:4326/WGS 84, so we set the the CRS of our new `gpd.GeoDataFrame` to this.

## Clip raster

Remember: **if two geospatial sets will interact they need to be in the same CRS**.  
In our case, the aoi `gpd.GeoDataFrame` does not have the same CRS as the rasters:

```{python}
# check CRss
print('aoi CRS: ', aoi.crs)
print('nir CRS: ', nir.rio.crs)
print('rgb CRS: ', rgb.rio.crs)
```

So let's reproject:
```{python}
# reproject aoi to rgb crs
aoi = aoi.to_crs(rgb.rio.crs)
print('matched crs?',  aoi.crs == rgb.rio.crs)
aoi.crs
```

And plot them together:

```{python}
# plot aoi outline and RGB raster together
fig, ax = plt.subplots()
fig.set_size_inches((size, size*aspect)) # reuse size and aspect
rgb.plot.imshow(ax=ax)
aoi.plot(ax=ax, alpha=0.6)
```

To clip the raster using the aoi polygon we use the `.rio.clip_box()` method:

```{python}
# clip rasters to aoi
rgb_small = rgb.rio.clip_box(*aoi.total_bounds)
nir_small = nir.rio.clip_box(*aoi.total_bounds)
```

Notice a few things:
- we had to use the `.rio` accessor to access the `clip_box()` method 
- similarly to the `shapely.box()` function [we've used previously](https://carmengg.github.io/eds-220-book/lectures/lesson-13-standin.html#clipping-with-bounding-box), [`.rio.clip_box()` usual parameters](https://corteva.github.io/rioxarray/stable/rioxarray.html#rioxarray.raster_dataset.RasterDataset.clip_box) are minx, miny, maxx, maxy. We are using the `*` asterisk as an unpacking operator to get these from the list `aoi.total_bounds`.

Let's check our clipped data:

```{python}
# check shape updates
print('original shape: ', rgb.shape)
print('reduced shape: ', rgb_small.shape)

# plot with correct sizes
size = 4
aspect = rgb_small.rio.width/ rgb_small.rio.height
rgb_small.plot.imshow(size=size, aspect=aspect)
```

```{python}
# check shape updates
print('original shape: ', nir.shape)
print('reduced shape: ', nir_small.shape)

nir_small.plot()
```

## Compute NDVI

We often want to combine values of and perform calculations on rasters to create a new output raster. 
In our case, we are interested in computing the Normalized Difference Vegetation Index (NDVI) over our area of interest. 
The NDVI is an index commonly used to check if an area has live green vegetation or not.

According to the [Earth Observing System](https://eos.com/blog/ndvi-faq-all-you-need-to-know-about-ndvi/)
> The results of the NDVI calculation range from -1 to 1. Negative values correspond to areas with water surfaces, manmade structures, rocks, clouds, snow; bare soil usually falls within 0.1-0.2 range; and plants will always have positive values between 0.2 and 1. Healthy, dense vegetation canopy should be above 0.5, and sparse vegetation will most likely fall within 0.2 to 0.5. 

The NDVI is calculated using the NIR and red bands. 
The formula is

$NDVI = \frac{NIR - Red}{NIR + Red}.$

First, we need to select the red band:

```{python}
red = rgb_small.sel(band=1)
red
```

To be able to perform the calculation successfully, we will need to udpate the data type of our rasters:

```{python}
red16 = red.astype('int16')
nir16 = nir_small.astype('int16')
print('RED: original dtype:', rgb_small.dtype, '.... converted dtype:', red16.dtype)
print('NIR: original dtype:', nir.dtype, '.... converted dtype:', nir16.dtype)
```

We can perform raster calculations using the same arithmetic we use for `np.array`s (because, underneath it all, they are). 
So our NDVI calculation is as follows:

```{python}
# calculate and plot NDVI
ndvi = (nir16 - red16)/(nir16+red16)
ndvi.plot()
```

Remember that plants will always have positive NDVI values between 0.2 and 1. 
Can you spot the Courthouse?

::: {.callout-warning}
# Why change the data type?
The `uint8` (8-bit unsigned integer) is a very small data type that only holds integers from 0 up to 255. 
In particular, calculations don't return what what we are used to when working with intgers ([they're done module 256](https://en.wikipedia.org/wiki/Modular_arithmetic)):

```{python}
np.uint8(150) + np.uint8(150)
```

In the NDVI formula we have to add NIR + Red. 
If both NIR and Red are very close to 255, when we add them, the calculation overflows the `uint8` data type and we don't get the expected results:
```{python}
x = (nir - red)/(nir + red)
x.plot()
```

This is why we need to manually convert both rasters into `int16`, which will be big enough to hold all the numbers that appear in the calculations.

Notice too, that when we performed the NDVI calculation we did not get any warning, although we were overflowing the computation at every cell of our array. 
This is can be an example of *failing silently*, where we don't get any warnings about the errors in our computation. 
That's why it's so important to double-check our results!
:::