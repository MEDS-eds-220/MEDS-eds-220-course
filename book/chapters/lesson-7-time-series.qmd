# Time series

In this section we will learn some basic handling of time series. 

This lesson was adapted from [Dr. Sam Stevenson's lecture on Data quality control and outliers: 1D time series](https://github.com/samanthastevenson/EDS220_Fall2022/blob/main/Precipitation_QCexample_BoulderCO.ipynb) and [Earth Lab's Lesson 1. Work With Datetime Format in Python - Time Series Data](https://www.earthdatascience.org/courses/use-data-open-source-python/use-time-series-data-in-python/introduction-to-time-series-in-pandas-python/).


<!--
TODO
## Learning objectives

-->

## About the data

To exemplify some of the basic time series functionalities we will use data about hourly precipitation in the county of Boulder, Colorado from 2000 to 2014. In September 2013, an unusual weather pattern led to some of the most intense precipitation ever recorded in this region, causing [devastating floods throughout the Colorado Front Range](https://www.weather.gov/safety/flood-states-co). Our goal is to visualize precipitation data in 2013 and identify this unusual weather event.

![Aerial view of floods during September 2013 in Colorado. Photo by State of Colorado.](/book/images/lesson-7/co-2013-2.jpg)

This data was obtained via the [National Oceanic and Atmosperic Administration (NOAA) Climate Data Online service](https://www.ncdc.noaa.gov/cdo-web/) and the resulting CSV that can be acceses at [this link](https://raw.githubusercontent.com/carmengg/eds-220-book/main/data/boulder_colorado_2013_hourly_precipitation.csv). The following is a a short description of the columns we will work with (the full documentation can be accessed [here](https://www.ncei.noaa.gov/pub/data/cdo/documentation/PRECIP_HLY_documentation.pdf)):

| Column | Description |
|-| -----|
| STATION | Identification number indentifying the station. |
|STATION_NAME | Optional field, name identifying the station location.  |
| DATE | this is the year of the record (4 digits), followed by month (2 digits), followed by day of the month (2 digits), followed by a space and ending with a time of observation that is a two digit indication of the local time hour, followed by a colon (:) followed by a two digit indication of the minute which for this dataset will always be 00. Note: The subsequent data value will be for the hour ending at the time specified here. Hour 00:00 will be listed as the first hour of each date, however since this data is by definition an accumulation of the previous 60 minutes, it actually occurred on the previous day.
| HPCP | The amount of precipitation recorded at the station for the hour ending at the time specified for DATE above given in inches. The values 999.99 means the data value is missing. Hours with no precipitation are not shown. |


## Timestamps

The `pandas` library represents an instant in time using the `pandas.Timestamp` class. For example:

```{python}
import pandas as pd

# Create a timestamp
pd.Timestamp(year=2020, 
             month=10, 
             day=18, 
             hour=12, 
             minute=30, 
             second=15)
```

When we store multiple `pandas.Timestamps` in a `pandas.Series` the data type of the column is set to `datetime64[ns]`:

```{python}
# Notice the data type of the column is datetime64
pd.Series([pd.Timestamp(2020,10,18), 
           pd.Timestamp(2020,10,17),
           pd.Timestamp(2020,10,16)])
```

<!--
- NaT = not a time. `pd.NaT` = nd behaves similar as np.nan does for float data.
-->

## Data exploration

Let's start by reading in the data and taking a look at it:
```{python}
# Read in data 
URL = 'https://raw.githubusercontent.com/carmengg/eds-220-book/main/data/boulder_colorado_2013_hourly_precipitation.csv'
precip = pd.read_csv(URL)

precip.head()
```

```{python}
# Plot hourly precipitation in Boulder CO 
precip.plot()
```

There are a few things going on with this graph:
 
1. Outliers: There are many jumps close to 1000. This is clearly not right and these are outliers. Looking at the column descriptions we can see 999.99 indicates the hourly precipitation data is missing.

2. Indexing: The $x$-axis values are given by the index of the dataframe and not relative to time. 

3. Time range: We are only intersted in the precipitation data from 2013, this graph is trying to plot all our data.

Let's fix each one of these issues separately.

## Reading in missing data values

The metadata states the missing values are indicated by the number 999.99. 
We can use this information to reload the dataframe indicating 999.99 is the missing value. 
To do this, we add the `na_values` parameter to the `pandas.read_csv()` function to indicitate additional values that should be recognized as `NA`:

```{python}
# Read in CSV indicating NA values based on metadata
precip = pd.read_csv(URL, na_values=[999.99])

precip.head()
```

Notice that the first hourly precipitation value used to be 999.99 and it is now set to a `NaN`. Check the `na_values` parameter in the [`pd.read_csv()` documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) to learn more about which values are identified as `NA` by default. 

We can try making our plot again:

```{python}
precip.plot()
```

This looks better and we can already see there is something going on close to the end of the time series. 

## Casting strings into dates
Notice that the `DATE` column in our dataframe is not of type `datetime`. We can check this using the `dtypes` attribute for dataframes:
```{python}
# Check whether DATE column is of type datetime
precip.dtypes
```

<!--
precip.DATE.apply(type).unique()
-->
Remember that the `object` dtype means that (most likely) all values in that column are strings. We can easily convert strings to datetime objects using the `pandas.to_datetime()` function:

- `pandas.to_datetime()` input: a `pandas.Series` with strings that can be converted to dates
- `pandas.to_datetime()` output: a `pandas.Series` with the strings converted to `datetime` objects
 
 #### Example

```{python}
# Convert DATE column to timestamps
pd.to_datetime(precip.DATE)
```

We can overwrite the `DATE` column with this output:

```{python}
# Convert DATE column to timestamps
precip.DATE = pd.to_datetime(precip.DATE)

# Check DATE column data type is updated
print(precip.dtypes)

# Check new values
precip.DATE.head()
```

We can make another attempt at plotting our precipitation data:

```{python}
precip.plot(x='DATE', y='HPCP')
```

Notice the $x$-axis is now neatly organized into years. 

Next, using our `DATE` column as the index will allows to perform operations with respect to time, including subsetting and resampling. 

```{python}
# Set DATE coumn as index
precip = precip.set_index('DATE')

# Inspect new index
precip.head()
```

Since we know the default behaviour of `plot()` is to use the index as the $x$-axis and make a line plot for each numeric column, we can simplify our plot making like this:

```{python}
precip.plot()
```

<!--
:::{.callout-note}
More on pd.read_csv(). You can set the index and the date columns
df = pd.read_csv(file, index_col=['date'], parse_dates=['date'])

:::
-->

## Subsetting by date
`pandas` has great functionality to subset a dataframe when using a time index. 

#### Example

We can use `.loc[year-month]` to select data from a specific year and month:
```{python}
# Select precipitation data from September 2013
precip.loc['2013-09']
```

Or simply select data from a given year using `.loc[year]`:
```{python}
# Select 2013 precipitation data
precip.loc['2013']
```

We can use this selection to plot data as usual. Notice we have a lot of gaps due to missing data. 

```{python}
precip.loc['2013'].plot()
```

## Resample
Resampling a time series means converting a time series from one frequency to another. For example, monthly to yearly (downsampling) or weekly to daily (upsampling). We can resample with the [`resample()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.resample.html) method. The simplest use is to call
```python
df.resample(new_frequency).aggregator_function()
```
where:
-  `new_frequency` is a string representing the new frequence to resample the data, for example `'D'` for day, `w` for week, `M` for month, `Y` for year, and
- `aggregator_function()` is the function we will use to aggregate the data into the new frequency. For example, `max()`, `min()`, `sum()`, or `average()`. 

The `resample()` method works similarly to `groupby()` in the sense that you need to specify a way to aggregate the data to get any output. 

#### Example

Our 2013 precipitation data has hourly frequency, we want to resample it to daily frequency. 

```{python}
# Resample 2013 hourly data to daily frequency: no output
precip.loc['2013'].resample('D')
```

To get an output we need to add an aggregator function that indicates how we want to summarize the data that falls on each day. In this case we want the total precipitation on a day, so we will aggreagate it using `sum()`:

```{python}
# Total daily precipitation in 2013
daily_precip_2013 = precip.loc['2013'].resample('D').sum()

daily_precip_2013
```

Notice the index has now changed to be days in 2013. We should also rename the `HPCP` column since it is not longer hourly precipitation:

```{python}
# Rename hourly precipitation column to match resample
daily_precip_2013 = daily_precip_2013.rename(columns={'HPCP':'daily_precipitation'})
```

 Finally, we can plot our data:

```{python}
daily_precip_2013.plot(ylabel='daily precipitation (in)', 
                       xlabel=' ',
                       title='Precipitation in Boulder, CO during 2013',
                       legend=False)
```

## Complete workflow

```{python}
import pandas as pd

# Read in Boulder, CO hourly precipitation data 
URL = 'https://raw.githubusercontent.com/carmengg/eds-220-book/main/data/boulder_colorado_2013_hourly_precipitation.csv'
precip = pd.read_csv(URL, index_col=['DATE'], parse_dates=['DATE'])


# Calculate daily total precipitation during 2013
daily_precip_2013 = (precip.loc['2013']
                            .resample('D')
                            .sum()
                            .rename(columns={'HPCP':'daily_precipitation'})
                            )

# Plot time series
daily_precip_2013.plot(ylabel='daily precipitation (in)', 
                       xlabel=' ',
                       title='Precipitation in Boulder, CO during 2013',
                       legend=False)
```


## More info

There is so much more to learn about time series data. These documents will allow you to dive deeper:

📖 [`pandas` getting started tutorials - How to handle time series data with ease](https://pandas.pydata.org/docs/getting_started/intro_tutorials/09_timeseries.html#min-tut-09-timeseries)

📖 [Time Series Chapter, Python for Data Analysis, Wes McKinney](https://wesmckinney.com/book/time-series)

📖 [`pandas` User Guide - Time series/date functionality](https://pandas.pydata.org/docs/user_guide/timeseries.html)

