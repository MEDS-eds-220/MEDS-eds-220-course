---
toc-title: In this lesson
---

# 3 Basic plotting
In this lesson we will learn to use the `plot()` method of a `pandas.DataFrame` to create simple exploratory graphs from tabular data. 

## Learning objectives
By the end of this lesson students will be able to: 

- Obtain and interpret preliminary information about a `pandas.DataFrame` using methods such as `info()` (structure), `describe()` (summary statistics), `nunique()` (unique value counts), `unique()` (distinct values), `and value_counts()` (frequency counts)
- Create simple exploratory plots using the `plot()` method for `pandas.DataFrames` to visualize trends and distributions
- Understand the concept of performing operations on a `pandas.DataFrame` in-place
- Apply method chaining to enable concise and readable code

## About the data

In this lesson we will reuse the annual estimates of bird species abundance in four coastal wetlands along the California coast that we used in the previous lesson on subsetting a `pandas.DataFrame`. This dataset was derived for education purposes for this course from the [UCSB SONGS Mitigation Monitoring: Wetland Performance Standard - Bird Abundance and Species Richness dataset](https://portal.edirepository.org/nis/mapbrowse?packageid=edi.649.6) @schroeter_ucsb_2024. 
The SONGS dataset was collected as part of the [San Onofre Nuclear Generating Station (SONGS) San Dieguito Wetland Restoration monitoring program](https://marinemitigation.msi.ucsb.edu). 

The annual bird species abundance estimates is a CSV file with 13 columns and 14 rows. You can see the first three rows below.
<!-- TODO: add link to other lesson. Add pictures of birds -->

```{python}
#| echo: false
import pandas as pd

# Read in file
df = pd.read_csv('lesson-3-pandas-subsetting/data/wetlands_seasonal_bird_diversity.csv')

# See the first 3 rows
df.head(3)
```

The four wetlands where the bird surveys occured are Carpinteria Salt Marsh (CSM),  Mugu Lagoon (MUL), the San Dieguito Wetland (SDW), and the Tijuana Estuary (TJE). The values from the second column to the last column correspond to the number of different bird species recorded across the survey sites in each wetland during winter, spring, and fall of a given year. For example, the `CSM_fall` column has the number of species recorded in fall at Carpinteria Salt Marsh across years. The `year` column corresponds to the calendar year on which the data was collected. Surveys have happened yearly from 2010 to 2023. 


## `plot()` method

Let us start by loading the data:

```python
import pandas as pd

# Read in file
df = pd.read_csv('data/wetlands_seasonal_bird_diversity.csv')

# Check the first 5 rows
df.head()
```
```{python}
#| echo: false
df.head()
```


A `pandas.DataFrame` has a [built-in method `plot()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html) for plotting. 
When we call it without specifying any other parameters `plot()` creates one line plot for each of the columns with numeric data. 

```{python}
# Default plot(): one line plot per column with numeric data
df.plot()
```

As we can see, this doesn't make much sense! In particular, look at the x-axis. The default for `plot` is to use the values of the index as the x-axis values. Let's see some examples about how to improve this situation.

## Line plots

We can make a line plot of one column against another by using the following the general syntax:

```python
df.plot(x='x_values_column', y='y_values_column')
```
#### Example

If we want to plot the bird surveys at Carpinteria Salt Marsh across years we can do:

```{python}
# Birds species registered during winter at CSM yearly
df.plot(x='year', y='CSM_winter')
```

We can do some basic customization specifying other parameters of the `plot()` method. Some basic ones are:

- `title`: title to use for the plot.
- `xlabel`: name to use for the x-label on x-axis
- `ylabel`: bame to use for the y-label on y-axis
- `color`: change the color of our plot
- `legend`: boolean value `True` or `False`. `True` (default) includes the legend, `False` removes the legend

In action:

```{python}
df.plot(x='year', 
        y='CSM_winter',
        title='Bird species registered during winter at Carpinteria Salt Marsh',
        xlabel='Year',
        ylabel='Number of bird species',
        color='green',
        legend=False
        )
```

You can see all the [optional parameters for the `plot()` function in the documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html).

:::{.callout-tip}
## Check-in
Plot a graph of the bird surveys at Mugu Lagoon with respect to the years. Include some basic customization.
:::

## Multiple line plots

We can plot multiple line plots by updating these parameters in the `plot()` method:

- `y` : a list of column names that will be plotted against the x-axis
- `color`: a dictionary `{'column_1' : 'color_1', 'column_2':'color_2}` specifying the color of each column's line plot

#### Example

Let's say we want to compare the bird surveys at the Tijuana Estuary during spring and fall across years. 

```{python}
df.plot(x='year', 
        y=['TJE_spring', 'TJE_fall'],
        title = 'Seasonal bird surveys at Tijuana Estuary',
        xlabel='Year',
        ylabel='Number of bird species',        
        color = {'TJE_spring':'#F48FB1',
                 'TJE_fall': '#AB47BC'
                 }
        )
```

<!--It is not possible to rename the labels in the legend only using the plot() method and without updating the column names.-->

Notice that for specifying the colors we used a **HEX code**, this gives us more control over how our graph looks.


We can also create separate plots for each column by setting the `subset` to `True`.

```{python}
df.plot(x='year', 
        y=['TJE_spring', 'TJE_fall'],
        title = 'Seasonal bird surveys at Tijuana Estuary',
        xlabel='Year',
        ylabel='Number of bird species',        
        color = {'TJE_spring':'#F48FB1',
                 'TJE_fall': '#AB47BC'
                 },
        subplots=True
        )
```

## Updating the index

**Updating the index** of our data frame's to be something other than the default integers numbering the rows can be a useful operation for plotting. 
To update the index we use the [`set_index()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.set_index.html) method for a `pandas.DataFrame`. 
The general syntax for setting a column as the new index is:

```python
df.set_index('column_name')
```
where `column_name` is the name of the column in the data frame `df` we want to use as new index.

This operation does not happen in-place. 

- A funciton **acting in-place** means that our original data frame is modified. 
- If the function **does not act in-place**, a new data frame is created and the original is not modified. 

If we wanted to update our `df` data frame we could do an **explicit assignment** to reassign the output of `set_index()` to `df`:

```python
df = df.set_index('column_name')
```

or use the optional `inplace` parameter:

```python
df.set_index('column_name', inplace=True)
```

:::{.callout-caution}
## Avoid using the `inplace=True` argument, favor explicit variable assignments
Check the information about the `inplace` parameter in the [`set_index()` documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.set_index.html). You will often see the `inplace` parameter in methods for `pandas.DataFrames`. The best practice is to avoid `inplace=True` for better readability and maintainable code. Explicitly assigning the result to a new variable or the same variable makes it clear that an operation has occurred.
:::

#### Example

In all our previous examples we used the year column as the x-axis. Since all our bird survey variables are dependent on the year, it makes sense to use the year column as the index of the data frame:

```{python}
# Update index to be the year column
df = df.set_index('year')
df.head()
```



```{python}
# Simple plot of Carpinteria Salt Marsh winter surveys
df.plot(y='CSM_winter')
```

 needed, we can reset the index to be the numbering of the rows:
```{python}
df = df.reset_index()
df.head()
```


:::{.callout-tip}
## Check-in
1. Without running the code, give a step-by-step breakdown of what this code is doing:
```python
df.set_index('year').loc[:,'SDW_winter':'TJE_fall'].plot()
```

2. Is this code modifying the data frame `df`? Why or why not?

3. Run the code and examine the graph. Do we have all the necessary information to make sure it makes sense to directly compare the surveys at these different sites? 
<!--The different sites have very different sizes and the surveys show the total number of birds identified, not the number of birds relative to the extent. -->
:::

## Method chaining
The code used in the check-in

```python
df.set_index('year').loc[:,'SDW_winter':'TJE_fall'].plot()
```

is an example of **method chaining**. Each method in the chain returns an object (typically the same object), allowing the next method to be called directly on the result.  This is a powerful technique that makes code concise and readable. 

An alternative to the previous code chaining could have been:
```python
year_index_df = df.set_index('year')
subset_df = year_index_df.loc[:,'SDW_winter':'TJE_fall']
subset_df.plot()
```

While this accomplishes the same output, several variables are created along the way and it can be difficult to keep track of what is what.  Method chaining is particularly useful in `pandas` for streamlining multiple data manipulations. However, it should be used with care to avoid overly complex and difficult-to-debug code!

We will move on to another dataset for the rest of this lesson.



## About the data

For the next plots we will use the  Palmer Penguins dataset @palmerpenguins developed by Drs. Allison Horst, Alison Hill and Kristen Gorman. This dataset contains size measurements for three penguin species in the Palmer Archipelago, Antarctica. 

![The Palmer Archipelago penguins. Artwork by Dr. Allison Horst.](/book/images/lesson-4/lter_penguins.png)

The dataset has 344 rows and 8 columns. We can see it's first three rows below:

```{python}
#| echo: false
URL = 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'
penguins = pd.read_csv(URL)

penguins.head(3)
```

## Data exploration

The data is usually accessed through the `palmerpenguins` R data package @palmerpenguins. Today we will access the CSV directly into Python using the URL: [https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv]()


Let's start by reading in the data:

```{python}
# Read in data
URL = 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'
penguins = pd.read_csv(URL)

penguins.head()
```

And getting some preliminary information:
```{python}
# Check column data types and NA values
penguins.info()
```

```{python}
# Simple statistics about numeric columns
penguins.describe()
```

We can also subset the dataframe to get information about a particular column or groups of columns:

```{python}
# Count unique values in categorical columns and year
penguins[['species', 'island', 'sex', 'year']].nunique()
```

```{python}
# Get unique values in species column
penguins.species.unique()
```

```{python}
# Number of values per unique value in species column
penguins.species.value_counts()
```

## `kind` argument in `plot()`

At the beginning of the lesson we talked about how the `plot()` method creates a line plot by default. The parameter that controls this behaviour is the `kind` parameter. By changing the value of `kind` we can create different kinds of plots. Let's look at the documentation to see what these values are:

![Extract from the `pandas.DataFrame.plot` documentation. Accessed on Sept 25,2024](/book/images/lesson-4/df-plot-doc.png)

Notice the default value of `kind` is `'line'`. 

Let's change the `kind` parameter to create some different plots. 

## Scatter plots
Suppose we want to visualy compare the flipper length against the body mass, we can do this with a scatterplot: 

```{python}
penguins.plot(kind='scatter',
              x='flipper_length_mm', 
              y='body_mass_g')
```

We can update some other arguments to customize the graph:

```{python}
penguins.plot(kind='scatter',
              x='flipper_length_mm', 
              y='body_mass_g',
              title='Flipper length and body mass for Palmer penguins',
              xlabel='Flipper length (mm)',
              ylabel='Body mass (g)',
              color='#ff3b01',
              alpha=0.4  # Controls transparency
              )
```

## Bar plots

We can create bar plots of our data setting `kind='bar'` in the `plot()` method.

For example, let's say we want to get data about the 10 penguins with lowest body mass. We can first select this data using the `nsmallest()` method for series:

```{python}
smallest = penguins.body_mass_g.nsmallest(10).sort_values()
smallest
```

We can then plot this data as a bar plot

```{python}
smallest.plot(kind='bar')
```

If we wanted to look at other data for these smallest penguins we can use the index of the `smallest` `pandas.Series` to select those rows in the original `penguins` data frame using `loc`:

```{python}
penguins.loc[smallest.index]
```

## Histograms

We can create a histogram of our data setting `kind='hist'` in `plot()`. 

```{python}
# Using plot without subsetting data - a mess again
penguins.plot(kind='hist')
```

To gain actual information, let's subset the data before plotting it. For example, suppose we want to do a preliminary graph for the distribution of flipper length. We could do it in this way:

```{python}
# Distribution of flipper length measurements
# First select data, then plot
penguins['flipper_length_mm'].plot(kind='hist',
                                title='Penguin flipper lengths',
                                xlabel='Flipper length (mm)',
                                grid=True)
```


:::{.callout-tip}
## Check-in
1. Select the `bill_length_mm` and `bill_depth_mm` columns in the `penguins` dataframe and then update the kind parameter to `box` to make boxplots of the bill length and bill depth.
<!--
```{python}
penguins[['bill_length_mm','bill_depth_mm']].plot(kind='box')
```
-->
<!--
2. Select both rows and columns to create a histogram of the flipper length of gentoo penguins. 


```{python}
penguins.loc[penguins.species == 'Gentoo', 'flipper_length_mm'].plot(kind='hist')
```
-->

2. Create a histogram of the flipper length of female gentoo penguins.
<!--
```{python}
penguins.loc[(penguins.species == 'gentoo') & (penguins.sex == 'female'), 'flipper_length_mm'].plot(kind='hist')
```
-->
:::