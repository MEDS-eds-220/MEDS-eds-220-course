
<!--
Ignore specific warnings in render

```{python}
import shapely
import warnings
from shapely.errors import ShapelyDeprecationWarning

warnings.filterwarnings("ignore", category=ShapelyDeprecationWarning) 
warnings.filterwarnings("ignore", message="is_categorical_dtype is deprecated")
```
-->

# 12 Clipping

In this lesson we will learn how to to clip different geometries.

## About the data

We will use three datasets in this lesson. 

The first dataset is a [TIGER shapefile of the US states from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). Follow these steps to download shapefile with the United States' states:

1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on "Web Interface"
2. For year, select 2022, and for layer type select "States (and equivalent)". Click submit. 
3. Click on "Download national file".

You can check the [metadata for all the TIGER shapefiles here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). 
The columns for this shapefile are:

![Source: TIGER/Line Shapefiles Technical Documentation](/book/images/lesson-11/tiger_shp_columns.png){width="70%"}

The second dataset we'll use is [Natural Earth's simple medium scale populated places dataset](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/). We can obtain this dataset by downloading the shapefile (choose the one that says "simple (less columns)").

The third dataset we'll use is [Natural Earth's road dataset](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/roads/). 
We can obtain this dataset by downloading the shapefile 

We will combine these datasets to create the following map of infrastructure in Alaska:

![](/book/images/lesson-13/alaska.png)

For these notes, all the data is inside a `data/` directory at the same level as the notebook. 

## Import data

Let's start by loading our libraries and then importing the datasets we will use.
<!--
Reading in states shapefile from a different directory
```{python}
import os
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd

from shapely.geometry import box  # To create polygon bounding box

pd.set_option("display.max.columns", None)

# -------------------------------------
# Import and simplify states polygons
states = gpd.read_file('/Users/galaz-garcia/Documents/MEDS/MEDS-eds-220-course/book/chapters/lesson-11-csv-to-geodataframe/data/tl_2022_us_state/tl_2022_us_state.shp')
states.columns = states.columns.str.lower()

# Import Natural Earth populated places points
places = gpd.read_file(os.path.join('data',
                                    'ne_50m_populated_places',
                                    'ne_50m_populated_places.shp')
                                    )

# Import ferry routes lines
roads = gpd.read_file(os.path.join('data',
                                   'ne_10m_roads',
                                   'ne_10m_roads.shp')
                                   )
```
-->

```python

import os
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd

from shapely.geometry import box  # To create polygon bounding box

pd.set_option("display.max.columns", None)

# -------------------------------------
# Import and simplify states polygons
states = gpd.read_file(os.path.join('data',
                                    'tl_2022_us_state',
                                    'tl_2022_us_state.shp')
                                    )

# Import Natural Earth populated places points
places = gpd.read_file(os.path.join('data',
                                    'ne_50m_populated_places_simple',
                                    'ne_50m_populated_places_simple.shp')
                                    )

# Import ferry routes lines
roads = gpd.read_file(os.path.join('data',
                                   'ne_10m_roads',
                                   'ne_10m_roads.shp')
                                   )
```

:::{.callout-tip}
## Check-in
Use a `for` loop to iterate over the three geo-dataframes we imported and change their column names to lower caps.

<!--

```{python}
for df in [states, places, roads]:
    df.columns = df.columns.str.lower()
```
-->
:::

## Prepare Alaska multipolygon

Let's start by taking taking a look at our `states` geo-dataframe. 
Since this is a geospatial dataset, exploration should include *at least* checking the head of the dataset, plotting the data, and looking at its CRS.

```{python}
print(f"CRS: {states.crs}")

states.head(3)
```

```{python}
states.plot()
```

For this lesson, we are intersted in plotting data only Alaska, se let's select this data:

```{python}
alaska = states[states.name =='Alaska']
alaska.plot()
```

Notice that the way the Alaska multipolygon is plotted under the NAD83/EPSG:4269 CRS separates the islands and unnaturally elongates the map. 
To fix this, we will reproject the Alaska geo-dataframe to the EPSG:3338 CRS. 
This CRS is a *projected* CRS, better suited for working with data from Alaska:

![Source: [spatialreference.org](https://spatialreference.org/ref/epsg/3338/)](/book/images/lesson-13/epsg_3338.png)

```{python}
# Reproject to CRS optimized for Alaska
alaska = alaska.to_crs('epsg:3338')

# Inspect the new CRS
print('Is this CRS projected? ', alaska.crs.is_projected)
alaska.crs
```

```{python}
alaska.plot()
```

## Prepare populated places points

Let's now explore the populated places data. 

```{python}
print(f"CRS: {places.crs}")

places.head(3)
```

```{python}
places.plot()
```

This dataset has the EPSG:4326 CRS. Remember this is the EPSG code for the WGS 84 CRS. 
This is not a surprise since the places data is global and EPSG:4326/WGS84 is the most widely used CRS for such data.

Let's see what happens when we try to plot this data on top of Alaska:

```{python}
# Trouble
fig, ax = plt.subplots()

alaska.plot(ax=ax)
places.plot(ax=ax, color='red')

plt.show()
```

::: {.callout-warning}
## Data in weird places? Check your CRSs
This is a classic slip in geospatial analysis. 
To plot, analyze, or integrate different geospatial datasets they **must have the same CRS**. 

Here, `alaska` and `places` have different CRSs, leading to unexpected results when plotting them together:
```{python}
alaska.crs == places.crs
```
:::

:::{.callout-tip}
## Check-in
Reproject the `places` geo-datafarme into `alaska`'s CRS and verify the CRSs match using `assert`.

<!--
```{python}
# Reproject to match Alaska CRS
places = places.to_crs(alaska.crs)
assert alaska.crs == places.crs
```
-->
:::


Let's check that map again:

```{python}
fig, ax = plt.subplots()

alaska.plot(ax=ax)
places.plot(ax=ax, color='red', markersize=2)

plt.show()
```

This is better: we can see there the Alaska poygons and some of the `places` points on top of it. 
Our next step is to select these points. 

<!--TODO: add if-else here with reprojecting -->

## Clipping

**Clipping** means using a polygon (or polygons) to only select geospatial data within them. 
Clipping a `geopandas.GeoDataFrame` is simple using the geopandas [`clip()` function](https://geopandas.org/en/stable/docs/reference/api/geopandas.clip.html). 
The general syntax is:
```python
updated_geodf = geopandas.clip(geodf, mask)
```
where:

- `updated_geodf` is the output of the method: the intersection of the geometries in `geodf` with `mask`,
- `geodf` is the `geopandas.GeoDataFrame` we want to clip, 
- `mask` is a `geopandas.GeoDataFrame` with the polygon(s) we want to use for clipping. This `mask` must be in the same CRS as `geodf`!

In our case:

```{python}
# Clip populated places to Alaska multipolygon
ak_places = gpd.clip(places, alaska)

fig, ax = plt.subplots()
alaska.plot(ax=ax)
ak_places.plot(ax=ax, color='red')
plt.show()
```

## Prepare roads 

Now we move on to our roads dataset. 

```{python}
print(roads.crs)

roads.head(3)
```

```{python}
roads.plot()
```

You may have already noticed that the `roads` data is not in the same CRS as the `alaska` polygons, so these geo-datasets shound't interact until they're in the same CRS. 
Before jumping right into reprojecting and clipping, we will subset the data to select only US roads:

```{python}
usa_roads = roads[roads.sov_a3 == 'USA']
usa_roads.plot()
```

::: {.callout-caution}
## Reduce your tabular data before reducing via geometries
Geospatial operations are usually costly in terms of computing power. 
The more detailed our geometries are, the longer in takes to do geospatial computations. 
It's a good practice to reduce your data as much as possible before applying any geospatial transformation. 
:::

<!--
YOU CAN JUMP FROM HERE TO CLIPPING WITH BOUNDING BOX
-->

We will now compose functions to clip `usa_roads` using the `alaska` multipolygon. Notice we are using the ouput of `usa_roads.to_crs(alaska.crs)` directly and thus not changing the `usa_roads` geo-dataframe or creating new variables:

```{python}
# Clip usa_roads to alaska geometry
ak_roads = gpd.clip(usa_roads.to_crs(alaska.crs), alaska)


fig, ax = plt.subplots()
alaska.plot(ax=ax)
ak_roads.plot(ax=ax, color='red')
plt.show()

```

Notice how the lines break on the small islands? 
However, in the `usa_roads` there are no broken lines. 
This should make us suspect we are leaving data out and clipping *exactly* to the polygons in `alaska` is not quite what we want. 

### Clipping with a bounding box
We will clip the `usa_roads` geo-dataframe with the **bounding box** of `alaska` instead of its polygons. 
To create a bounding box, we first use the [`box()` function](https://shapely.readthedocs.io/en/stable/manual.html#shapely.geometry.box) we imported from `shapely.geometry`. 
The syntax for `box()` is:
```python
box(minx, miny, maxx, maxy)
```
the output is a polygon representing a box constructed like this:

![Image adapted from: National Ecological Observatory Network (NEON)](/book/images/lesson-13/bounding-box.png)

If we want to create a `shapely` polygon from the bounds of a geo-dataframe `gdf`, a more straightforward syntax is:
```python 
box(*gdf.total_bounds)
```
In our case:

```{python}
bbox = box(*alaska.total_bounds)
print(type(bbox))
bbox
```

::: {.callout-tip}
## `*` = unpacking operator
In the last syntax we used the asterisk `*` as an **unpacking operator** on the array `alaska.total_bounds`. 
Think about it as unpacking the elements of `alaska.total_bounds` and assigning them one-by-one to the paremeters `minx, miny, maxx, maxy` of the `box()` function.

This is a good article explaining more about unpacking with `*` in Python:
https://geekflare.com/python-unpacking-operators/
:::

Notice that the bounding box is not a geodataframe, it is a stand alone, abstract polygon without any geospatial information. To interpret this polygon as something on the Earth's surface we need to wrap it into a geo-datfrane abd assign it a CRS:

```{python}
# Create geo-dataframe from bounding box
ak_bbox = gpd.GeoDataFrame(geometry = [bbox],  # Assign geometry column
                           crs = alaska.crs)  # Assign CRS
print(type(ak_bbox))
ak_bbox
```

We can now clip the roads using Alaska's bounding box:
```{python}
ak_complete_roads = gpd.clip(usa_roads.to_crs(ak_bbox.crs), ak_bbox)
```

Notice the difference between the two clipping methods:

```{python}
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10,10))

ak_roads.plot(ax=ax1)
ax1.set_title('Roads clipped with AK multipolygon')

ak_complete_roads.plot(ax=ax2)
ax2.set_title('Roads clipped with AK bounding box')

plt.show()
```

## Plot

Finally, we can put all our data together in the same map:

```{python}
#| code-fold: true

fig, ax = plt.subplots(figsize=(11,5))
ax.axis('off')

alaska.plot(ax=ax, color='whitesmoke', edgecolor='0.7')

ak_complete_roads.plot(ax=ax, 
                       zorder=1,  # Specify layer plotting order
                       column='type', 
                       legend=True,
                       legend_kwds={'title': "Road Types", 
                                    'loc': 'upper left',
                                    'bbox_to_anchor':(0,0.9),
                                    'fontsize':'small'}
                                    )

ak_places.plot(ax=ax, 
               zorder=2,  # Specify layer plotting order
               color='red', 
               marker='s'  # Square marker
               )
# Add city names as text annotations
for x, y, name in zip(ak_places.geometry.x, ak_places.geometry.y, ak_places['name']):
    ax.text(x-30000, y+20000, name, fontsize=8, ha='right')

ax.set_title("Road Networks and Major Cities in Alaska", fontsize=14, fontweight='bold')

plt.show()
```

:::{.callout-tip}
## Exercise
Notice the overlaying labels for Anchorage and Valdez:

![](/book/images/lesson-13/overlapping_points.png){width="40%" fig-align="center"}

Update the map so these labels do not overlap. One way to do it is using an `if` when iterating over the Alaska populated places.

<!--
Update text labels to this:

```python
# Add city names as text annotations
for x, y, name in zip(ak_places.geometry.x, ak_places.geometry.y, ak_places['name']):
    if name != 'Valdez':
        ax.text(x-30000, y+20000, name, fontsize=8, ha='right')

# Add text label for Valdez
valdez = ak_places[ak_places['name']=='Valdez']
ax.text(valdez.geometry.x.iloc[0]+30000, valdez.geometry.y.iloc[0]+20000, 'Valdez', fontsize=8, ha='left')
```
-->
:::

