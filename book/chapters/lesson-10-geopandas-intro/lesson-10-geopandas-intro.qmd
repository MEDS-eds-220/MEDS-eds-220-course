---
toc-title: In this lesson
---

# 9 `geopandas`

GeoPandas is a Python library that extends the `pandas` library by adding support for geospatial data. In this lesson we will introduce the `geopandas` library to work with vector data. We will also make our first map. 

<!-- TODO
## Learning objectives
-->

## About the data

Wild pigs (*Sus scrofa*) are a destructive invasive species in California, causing significant environmental and agricultural damage. Introduced to the region in the 1700s, they have since spread across the state, impacting native ecosystems through habitat destruction, soil disturbance due to their rooting behavior, and competition with native wildlife for food @finzel_wild_2015. This widespread damage has made managing wild pig populations a critical issue for conservation and agricultural communities in California.

![Wild pig in Santa Teresa Park, CA. [Photo by Don DeBold](https://www.flickr.com/photos/ddebold/52936296848)](/book/images/lesson-10/wild_pig.png){width="70%"}

In this lesson we will use simplified point data about wild pig sightings in California from the [Global Biodiversity Information Facility (GBIF)](https://www.gbif.org). 
GBIF is an international network and data platform that provides open access to biodiversity data from around the world. By aggregating data from multiple sources, including museums, research institutions, and citizen science initiatives, GBIF enables scientists, policymakers, and the public to explore and analyze species distribution and environmental trends. 

The data we will use today has been simplified from the complete *Sus scrofa* occurrencies data accessed through the GBIF website @gbiforg_user_occurrence_2023 . 

<!-- TODO: column descriptions -->
<!-- TODO: add info about the CA shapefile -->

## Reproducible file paths
In this lesson we will introduce three Python packages:

- `geopandas` @jordahl_geopandasgeopandas_2020: a package that extends `pandas` to work with geospatial data. This is the main package we will be working with in the next few lessons.
- `os`: a package that provides functions for interacting with the operating system, allowing us to perform tasks like file manipulation in a platform-independent way.
- `matplotlib` @Hunter:2007: one of the most popular and widely used Python libraries for data visualization.

Let's start by importing these packages:

```{python}
import os
import geopandas as gpd
import matplotlib.pyplot as plt
```

To import our data we will first use the `os` package to create a reproducible file path:

```{python}
fp = os.path.join('data','gbif_sus_scrofa_california','gbif_sus_scrofa_california.shp')
fp
```

Using the `os.path.join()` function allows us to create file paths that work on any operating system. Each operating system uses a different way to separate folders in a path (e.g., Windows uses backslashes `\`, while macOS and Linux use forward slashes `/`). By using `os.path.join()`, Python automatically handles the correct separator for the operating system you're working on. This avoids errors and makes your code more portable.

We can then use this file path to read in a shapefile with `geopandas` by using the `geopandas.read_file()` function:

```{python}
pigs = gpd.read_file(fp)
pigs.head()
```

::: {.callout-caution}
## One shapefile = multiple files
Although the parameter for `geopandas.read_file()` is only the file with `.shp` extension, remember that we need to have at least the `.shx` and `.dbf` files in the same directory as the `.shp` to read in the data. 
:::

::: {.callout-tip}
## Check-in
Create a file path using `os.path.join()` to import the shapefile of the California state boundary as a `geopandas.GeoDataFrame`. Once imported, take a look at the data.
:::

<!--
```{python}
#| include: false

fp = os.path.join('data','ca_state_boundary','ca_state_boundary.shp')
ca_boundary = gpd.read_file(fp)
ca_boundary
```
-->

## `GeoSeries` and `GeoDataFrame`

The core data structure in GeoPandas is the `geopandas.GeoDataFrame`. 
We can think of it as a `pandas.DataFrame` with a dedicated geometry column that can perform spatial operations. 

The **geometry column** in a `geopandas.GeoDataFrame` holds the geometry (point, polygon, etc.) of each spatial feature. This geometry column is of type `geopandas.GeoSeries`. Columns in the `geopandas.GeoDataFrame` with attributes about the features are `pandas.Series` like in a regular `pandas.DataFrame`. 

![Image adapted from [*Introduction to GeoPandas*](https://geopandas.org/en/stable/getting_started/introduction.html).](/book/images/lesson-10/geodataframe.png){width="70%"}

#### Example

First, notice that the rightmost column of the `pigs` geo-dataframe is a column named `geometry` whose values indicate points:

```{python}
pigs.head(3)
```

As usual, we can check the type of our objects using the `type` Python function:

```{python}
# Check the data type of the pigs dataframe 
print(type(pigs))

# Check the data type of the geometry column
print(type(pigs.geometry))

# Check the data type of the gbifID column
print(type(pigs.gbifID))
```

The data type of the geometry column is also reflected when we look at the data types of the values in each column:

```{python}
# Check the data type of each column
pigs.dtypes
```

We can also check the type of each element in the geometry column using the `geom_type` attribute of a `geopandas.GeoDataFrame`:

```{python}
pigs.geom_type
```

<!--
This is a `shapely` point. `shapely` is another Python library that to construct and modify points, lines, and polygons. We will talk more about it in the next lessons.
-->

::: {.callout-tip}
## Check-in
What is the geometry type of the single feature in the California state boundary?
:::

## CRS

Two other important attributes of a `geopandas.GeoDataFrame` are its coordinate reference system (CRS) and its extent. 

We can think of the **coordinate reference system (CRS)** as the instructions to locate each spatial feature of our data frame on the surface of the Earth. We access the CRS of a `geopandas.GeoDataFrame` using the `crs` attribute:

<!--TODO: add the other information about CRS as in the in-class notebook and csv to geodf lesson -->
```{python}
# Access the CRS of the GeoDataFrame
pigs.crs
```

The CRS for our data is the World Geodetic System 1984 (WGS84), represented by the code EPSG:4326. It uses latitude and longitude in degrees to represent places on Earth. This is a very popular CRS, used by Google Earth, GPS systems, and many web-based mapping tools, including Google Maps and OpenStreetMap. We can obtain more information about our CRS by accessing other attributes:

```{python}
# Examine CRS details
print('Ellipsoid: ', pigs.crs.ellipsoid)
print('Datum: ', pigs.crs.datum)
print('Is geographic?: ', pigs.crs.is_geographic)
print('Is projected?: ', pigs.crs.is_projected)
```

## Extent

The **extent** of the geo-dataframe is the bounding box covering *all* the spatial features in our geo-dataframe. This is formed by finding the points that are furthest west, east, south, and north.

![Spatial extent of different vector data. Image adapted from: National Ecological Observatory Network (NEON)](/book/images/lesson-10/spatial-extent-annotated.png){width="80%"}

We access the extent of a `geopandas.GeoDataFrame` using the `total_bounds` attribute:

```{python}
# Obtain the geographic extent of the geo-dataframe
pigs.total_bounds
```

These four numbers represent the `minx`, `miny`, `maxx`, `maxy` values for the bounds of the entire geo-dataframe. 

::: {.callout-tip}
## Check-in
Print the CRS and extent of the California state boundary. 
:::

<!--
```{python}
#| include: false

print('CRS: ', ca_boundary.crs, '\n')
print(ca_boundary.total_bounds)
```
-->

## Data wrangling

GeoPandas is conveniently built on top of `pandas`, so we may use everything we have learned about data selection, wrangling, and modification for a `pandas.DataFrame` to wrange `geopandas.GeoDataFrames`.

#### Example

We only want to use recent data for wild pig observations. A quick check shows that this dataframe has data since 1818:

```{python}
# Examine pig observation by year
pigs['year'].value_counts().sort_index()
```

We can use our usual data selection to get data from 2020 onwards:

```{python}
# Select data from 2020 onwards
pigs_recent = pigs[pigs.year>=2020]

# Check length of original dataframe
print('Total number of observations: ' , len(pigs))

# Check length of new dataframe
print('Number of observations since 2020: ' , len(pigs_recent))
```

## Create a map

### `plot()`

Similarly to a `pandas.DataFrame`, a `geopandas.GeoDataFrame` has a `plot()` method that we can call directly to create a quick view of our data. 
The geospatial information of the `geopandas.GeoDataFrame` will be used to create the axes of the plot.

#### Example

Let's take a quick look at our recent pigs data:

```{python}
pigs_recent.plot()
```

### `matplotlib`'s `fig` and `ax`

Going forward, we will make more complex visualizations where we add different layers to a graph and customize it. 
To do this, we will use the `matplotlib` Python library for creating visualizations. 
We can interact with `matplotlib` via its `pyplot` interface, which we imported at the top of the notebook.

Matplotlib graphs the data in a **figure** which can have one or more **axes**. 
The axes is *only* the area specified by the $x$ axis and $y$ axis and what is plotted in it, while the figure can include multiple axes in it.  

![Image source: [Getting Started with Matplotlib.](https://www.skytowner.com/explore/getting_started_with_matplotlib)](/book/images/lesson-10/matplotlib_figure_axes_axis.png)

To create a new blank figure:

1. Initialize a new figure and axes by calling `pyplot`'s `subplots()` function
2. Display the figure using `plt.show()`:

```{python}
# Initialize empty figure (fig) and axis (ax)
fig, ax = plt.subplots()

# Display figure
plt.show()
```

Notice that `plt.subplots()` is a function that returns two objects, when we call it, we get a figure `fig` with a single empty axis `ax`. We can think of this step as setting a new blank canvas on which we will paint upon. 


### Adding a layer

When using `matplotlib`, it can be useful to think of creating a plot as adding layers to an axis.
The general syntax to plot data from a dataframe `df` onto an axis is:
```python
# Initialize empty figure and axis
fig, ax = plt.subplots()

# Plot df on the ax axis
df.plot(ax=ax,  # Add plot to axis
        ...)    # Other arguments for plot function

# Display figure
plt.show()
``` 

#### Example

The first layer that we want to add to our axis is the `pigs_recent` point data. 
We can plot our data using `matplotlib` like this:

```{python}
# Initialize empyt figure and axis
fig, ax = plt.subplots()

# Add pigs point plot to our figure's axis
pigs_recent.plot(ax=ax)

# Display figure
plt.show()
```

### Customization 

Matplotlib allows for a lot of customization. 
Some of it can be done directly in the `plot()` method for the dataframe (like we've done when ploting data using `pandas`), while other is done by updating attributes of the `ax` axis. 
The following diagram shows some examples of elements in the axis that can be updated.

![Image source: Matplotlib documentation.](/book/images/lesson-10/anatomy.png){width="70%"}

#### Example

Some basic customization for our pigs data could looke like this:

```{python}
# Initialize empty figure
fig, ax = plt.subplots()

# Add data to axis
pigs_recent.plot(ax=ax,         # Add plot to axis
                 alpha=0.5,     # Adjust transparency
                 color='brown'  # Update point color
                 )

# Update axis 
ax.set_title('Reported "Sus scrofa" sightings in CA (2020-2023)')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')

# Display figure
plt.show()
```

::: {.callout-tip}
## Check-in 
1. Add the California state boundary to the plot so the boundary appears behind the points as below. Don't forget to customize your graph!

2. Write a short caption for your map describing the spatial distribution of observations. What patterns or clusters do you notice?

3. Discuss with a partner: what are some possible biases or limitations in GBIF species occurrence data (e.g., spatial coverage, sampling effort, data quality)?

```{python}
#| echo: false

# Initialize an empty figure 
fig, ax = plt.subplots()

# Add CA boundary
ca_boundary.plot(ax = ax,
                color = 'none',
                edgecolor = '#362312')

# Add pig point data
pigs_recent.plot(ax = ax,
                alpha = .5,
                color = '#FF5768',
                edgecolor = '#FFBF65')

# Customization
ax.set_title('Reported "Sus scrofa" sightings in CA (2020-2023)')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')

# Display figure
plt.show()
```

:::