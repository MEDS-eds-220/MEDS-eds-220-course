# 16 Land cover statistics

## About the data

In this lesson we will use two datasets.

The first one is [GAP/LANDFIRE National Terrestrial Ecosystems data for 2011 @davidson_gaplandfire_2016](https://www.sciencebase.gov/catalog/item/573cc51be4b0dae0d5e4b0c5), from the [US Geological Survey (USGS)](https://www.usgs.gov). This is a categorical raster with a 30 m x 30 m pixel resolution representing highly thematically detailed land cover map of the U.S. We will access this data through the [Microsoft Planetary Computer (MPC) data catalog](https://planetarycomputer.microsoft.com/dataset/gap). The class names and corresponding codes have been saved to a separete CSV to simplify access in this lesson. Further information on how to access the classes directly from the data are available in the [MPC catalog](https://planetarycomputer.microsoft.com/dataset/gap#Example-Notebook).


The second dataset is a shapefile with the perimeters for 2017 California fires. This data was extracted from the CALFIRE's [Historical Wildland Fire Perimeters](https://gis.data.ca.gov/datasets/CALFIRE-Forestry::california-fire-perimeters-all/about).

## Fire perimeter preparation

Let's start by importing the necessary libraries:

```{python}
import os

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import geopandas as gpd
import rioxarray as rioxr
from shapely import box

import pystac_client
import planetary_computer

from IPython.display import Image 
```

Then import and select the Thomas Fire within the fire perimeters data:

```{python}
fire_perimeters = gpd.read_file(os.path.join('data',
                                             'California_Fire_Perimeters_2017',
                                             'California_Fire_Perimeters_2017.shp')
                                             )
thomas_fire = fire_perimeters[fire_perimeters['FIRE_NAME']=='THOMAS']

# Examin fire perimeter data
thomas_fire.crs
thomas_fire.plot()
```

## Catalog search

Our goal is to retrieve the National Terrestrial Ecosystems data over the fire perimeter. In the [last lesson](/book/chapters/lesson-16-STAC.qmd) we used GeoJSON-type dictionary to do the catalog search. Here we will use a list `[xmin, ymin, xmax, ymax]` with the coordinate values defining the four corners of the region we want to search data over. Just as the GeoJSON, these coordinates have to be in the EPSG:4326 CRS. 

Our bounding box will come from the Thomas Fire perimeter. Notice we use method chaining to reproject and extract the bounds.

```{python}
# Create bounding box for search
thomas_fire_bbox = list(thomas_fire.to_crs('epsg:4326') # Reproject for search
                                   .total_bounds
                                    )
thomas_fire_bbox
```

Next, we connect to the Microsoft Planetary Computer data catalog and perform the search. The collection ID for the National Terrestrial Ecosystems data is `gap`:

```{python}
# Open MPC data catalog
catalog = pystac_client.Client.open(
    "https://planetarycomputer.microsoft.com/api/stac/v1",
    modifier=planetary_computer.sign_inplace,
)

# Search MPC catalog 
search = catalog.search(collections=['gap'], 
                        bbox=thomas_fire_bbox)

# Retrieve search items
items = search.item_collection()
print(f"Returned {len(items)} Items")
items
```

There is a single item in the search, so let's go ahead and select it and view its pre-rendered image:

```{python}
# Select unique search item
item = items[0]  

# Display pre-rendered image
Image(url=item.assets['rendered_preview'].href, width=600)
```

We can see this is a big raster! 

## Explore raster

Next, we can go ahead an open the raster:

```{python}
# Access raster data from item
lulc = rioxr.open_rasterio(item.assets['data'].href)
lulc
```

Notice that `band` is a dimension of length 1. We can go ahead and "squeeze" the raster to simplify it:

```{python}
# Remove length 1 dimension (band)
lulc = lulc.squeeze().drop_vars('band')
print("Sizes of dimensions:", dict(lulc.sizes))
```

Next, let's look at how the raster is locatd with respect to the Thomas Fire perimeter and the CA state boundary:

```{python}
# Create GeoDataFrame from raster bounding box
lulc_bbox = gpd.GeoDataFrame(geometry = [box(*lulc.rio.bounds())],
                             crs = lulc.rio.crs)

ca = gpd.read_file(os.path.join('data',
                                'ca_state_boundary',   
                                'ca_state_boundary.shp'))

# ------------------------------------------------------------------
# Plot raster boundary, fire perimeter, and CA boundary
fig, ax = plt.subplots()
ca.plot(ax=ax, color='white', edgecolor ='black')

# Reproject lulc_bbox and fire perimeter to match CA crs
lulc_bbox.to_crs(ca.crs).plot(ax=ax, alpha=0.3)  
thomas_fire.to_crs(ca.crs).plot(ax=ax, color='red')

plt.show()
```

We can see the raster covers a big area relative to the fire perimeter. Since we want to calculate the land coverage statistics within the fire perimeter, we will have to clip the raster to this area. 

## Clip raster

In our [first lesson about rasters](/book/chapters/lesson-15-rioxarray/lesson-15-rioxarray.qmd) we saw how to clip a raster to a rectangular region using the `rio.clip_box()` method. In our case, we want to clip the raster exactly to the fire perimeter. Clipping can be a costly operation for such a big raster relative to a detailed geometry. So we will do clipping in two steps:

1. Clip raster using the fire perimeter bounding box and then
2. Clip the simplified raster to the fire perimeter. 

```{python}
# Match CRSs and verify update
thomas_fire = thomas_fire.to_crs(lulc.rio.crs)
assert thomas_fire.crs == lulc.rio.crs

# Clip in two steps for efficiency
lulc_clip = (lulc.rio.clip_box(*thomas_fire.total_bounds)
                 .rio.clip(thomas_fire.geometry)
                 )

# Examine results
lulc_clip.plot()                 
```

Notice the clipped areas were assigned the 0 value (instead of NA).

```{python}
lulc_clip.rio.nodata
```

## Reproject raster


## Save raster

## Land cover statistics

In the rest of this lesson we will compute land cover statistics within the Thomas Fire perimeter. The following exercises will guide you through this process:

:::{.callout-tip}
## Exercises

1. Use the `numpy` function `np.unique()` to get the number of pixels per class in `lulc_clip`. HINT: check [the `np.unique()` documentation](https://numpy.org/doc/stable/reference/generated/numpy.unique.html) to see what the `return_counts` parameter does and read the last example. 

2. Create a data frame `pix_counts` with two columns: column one must be the code numbers for the pixels in `lulc_clip` and column two must be the number of pixels corresponding to each code. HINT: [check our class notes on `pandas.DataFrame`s](/book/chapters/lesson-2-series-dataframes.qmd)

3. Import the class names CSV file as `class_names`. The file's name is `GAP_National_Terrestrial_Ecosystems.csv` and it is located in the EDS220 data folder in workbench 1.

4. Use the `class_names` data frame to add the class names to the codes in the `pix_counts` data frame. 
Store the resulting data frame as `classes`. 

5. What *area* within the fire perimeter was estimated to be developed? HINT: what is the raster's resolution? 

6. Store the total number of pixels within the fire perimeter as a variable `total_pixels`.

7. Add the percentage of area covered by each class as a new column `percentage` to the `classes` data frame. 

8. Create a horizontal bar plot showing the classes with more than 1% land cover in decreasing order (longest bar should be at the top). 
The names of the classes should be the tick labels of the vertical axis. 
:::