---
toc-title: In this lesson
fig-cap-location: margin
---

# `pandas` series and data frames

In this lesson we introduce the two core objects in the `pandas` library, the `pandas.Series` and the `pandas.DataFrame`. 
The overall goal is to gain familiarity with these two objects, understand their relation to each other, and review Python data structures such as dictionaries and lists.

## Learning objectives 
By the end of this unit, students will be able to:

- Explain the relation between `pandas.Series` and `pandas.DataFrame`
- Construct simple `pandas.Series` and `pandas.DataFrame` from scratch using different initalization methods 
- Identify and modify the index in a `pandas.Series` or `pandas.DataFrame`
- Navigate the `pandas` documentation to look for attributes and methods of `pandas.series` and `pandas.DataFrame`

## `pandas`

`pandas` @reback2020pandas @mckinney-proc-scipy-2010 is a Python package to wrangle and analyze tabular data. It is built on top of NumPy and has become the core tool for doing data analysis in Python. 

The standard abbreviation for `pandas` is `pd`. Here we will import it together with NumPy:

```{python}
import pandas as pd
import numpy as np
```

::: {.callout-caution}
## Convention: importing packages
Always import all your packages in a single cell at the top of you notebook! Following the [PEP 8 - Style Guide for Python Code](https://peps.python.org/pep-0008/#imports) @pep8, each package or library import should be in a separate line. 
:::
<!--
There is so much to learn about `pandas`. While we won't be able to cover every single functionality of this package in the next three lecutres, the goal is to get you started with the basic tools for data wrangling and give you a solid basis on which you can explore further. 
-->
## Series

The first core object of pandas is the **series**. 
A series is a *one-dimensional* array of *indexed* data. 

![Image adapted from [Introduction to GeoPandas.](https://geopandas.org/en/stable/getting_started/introduction.html)](/book/images/lesson-2/series-diagram.png){width=30%}

A `pandas.Series` having an **index** is the main difference between a `pandas.Series` and a NumPy array. Let's see the difference:

```{python}
# a numpy array
arr = np.random.randn(4) # random values from std normal distribution
print(type(arr))
print(arr, "\n")

# a pandas series made from the previous array
s = pd.Series(arr)
print(type(s))
print(s)
```

Notice the index is printed as part of the `pandas.Series` while, although the `np.array` is indexable, the index is not part of this data structure. Printing the `pandas.Series` also shows the values and their data type.

![](/book/images/lesson-2/series-parts.png){width=80%}

### Creating a `pandas.Series`

The basic method to create a `pandas.Series` is to call

``` python
s = pd.Series(data, index=index)
```

The `data` parameter can be:

- a list or NumPy array,
- a Python dictionary, or 
- a single number, boolean (`True`/`False`), or string.

The `index` parameter is optional, if we wish to include it, it must be a list of list of indices of the same length as data. 

#### Example: Creating a `pandas.Series` from a NumPy array
Let's create a `pandas.Series` from a NumPy array. To use this method we need to pass a NumPy array (or a list of objects that can be converted to NumPy types) as `data`. Here, we will also include the list `[2023, 2024, 2025]` to be used as an index:

```{python}
# a series from a numpy array 
pd.Series(np.arange(3), index=[2023, 2024, 2025])
```

#### Example: Creating a `pandas.Series` from a list
 Here we create a `pandas.Series` from a list of strings. Remember that the `index` parameter is optional. If we don't include it, the default is to make the index equal to `[0,...,len(data)-1]`. For example:

```{python}
# a series from a list of strings with default index
pd.Series(['EDS 220', 'EDS 222', 'EDS 223', 'EDS 242'])
```

#### Example: Creating a `pandas.Series` from a dictionary
Recall that a dictionary is a set of key-value pairs. If we create a `pandas.Series` via a dictionary the keys will become the index and the values the corresponding data.

```{python}
# construct dictionary
d = {'key_0':2, 'key_1':'3', 'key_2':5}

# initialize series using a dictionary
pd.Series(d)
```

:::{.callout-note}
## `dtype: object`
Notice that in this and the previous example the data type of the values in the series is `object`. This data type in `pandas` *usually* indicates that the series is made up of strings. However, we can see in this example that the `object` data type can also indicate a mix of strings *and* numbers. 
:::

#### Example: Creating a `pandas.Series` from a single value
If we only provide a single number, boolean, or string as the data for the series, we need to provide an index. The value will be repeated to match the length of the index. Here, we create a series from a single float number with an index given by a list of strings:

```{python}
pd.Series(3.0, index = ['A', 'B', 'C'])
```

### Simple operations

Arithmetic operations work on series and so most NumPy functions. For example:

```{python}
# define a series
s = pd.Series([98,73,65],index=['Andrea', 'Beth', 'Carolina'])

# divide each element in series by 10
print(s /10, '\n')

# take the exponential of each element in series
print(np.exp(s), '\n')

# original series is unchanged
print(s)

```

We can also produce new `pandas.Series` with `True`/`False` values indicating whether the elements in a series satisfy a condition or not:

```{python}
s > 70
```

This kind of simple conditions on `pandas.Series` will be key when we are selecting data from data frames.

### Identifying missing values
In `pandas` we can represent a missing, NULL, or NA value with the float value `numpy.nan`, which stands for "not a number". Let's construct a small series with some NA values represented this way:

```{python}
# series with NAs in it
s = pd.Series([1, 2, np.nan, 4, np.nan])
s
```
Notice the data type of the values it he series is still `float64`. 

The [`hasnans` attribute](https://pandas.pydata.org/docs/reference/api/pandas.Series.hasnans.html) for a `pandas.Series` returns `True` if there are any NA values in it and false otherwise:

```{python}
# check if series has NAs
s.hasnans
```

After detecting there are Na values, we might be intersted in knowing which elements in the series are NAs. We can do this using the [`isna` method](https://pandas.pydata.org/docs/reference/api/pandas.Series.isna.html):

```{python}
s.isna()
```

The ouput is a `pandas.Series` of boolean values indicating if an element in the row at the given index is `np.nan` (`True` = is NA) or not (`False` = not NA).

:::{.callout-tip}
## Check-in

1. The integer number -999 is often used to represent missing values. Create a `pandas.Series` named `s` with four integer values, two of which are -999. The index of this series should be the the letters A through D.

<!--
```{python}
s = pd.Series([10,10, -999, - 999], index= ['A','B','C','D'])
s
```
-->

2. In the [`pandas.Series` documentation](https://pandas.pydata.org/docs/reference/api/pandas.Series.html), look for the method `mask()`. Use this method to update the series `s` so that the -999 values are replaced by NA values. HINT: check the first example in the method's documentation.

<!--
```{python}
s = s.mask(s == -999)
s
```
-->
:::

There's *much* more to say about `pandas.Series`, but this is enough to get us going. At this point, we mainly want to know about `pandas.Series` because `pandas.Series` are the columns of a `pandas.DataFrame`.

<!--
::: {.callout-caution}
## slicing with `loc`
Notice that when use slicing with `loc` we get both the start *and the end* of the indices we indicated. This is different to slicing in numpy arrays or lists where we do not get the element at the end of the slice. Compare the following:

```{python}
x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(x)

# slicing will return elements at indices 2 trhough 4 (inclusive)
x[2:5]
```

```{python}
# define a np array with integers from 0 to 9
y = np.arange(10)
print(y)

# slicing will return elements at indices 2 trhough 4 (inclusive)
y[2:5]
```

```{python}
 z = pd.Series(y)
 print(z)

# slicing will return elements with index labels 2 through 5 (inclusive)
 z.loc[2:5]
```
::: 
-->

## Data frames

The `pandas.DataFrame` is the most used `pandas` object. It represents tabular data and we can think of it as a spreadhseet. Each column of a `pandas.DataFrame` is a `pandas.Series`. 

![Image adapted from [Introduction to GeoPandas.](https://geopandas.org/en/stable/getting_started/introduction.html)](/book/images/lesson-2/data-frame-diagram.png){width=65%}

### Creating a `pandas.DataFrame`
There are [many ways of creating a `pandas.DataFrame`](https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe). We present one simple one in this section. 

We already mentioned each column of a `pandas.DataFrame` is a `pandas.Series`. In fact, the `pandas.DataFrame` is a dictionary of `pandas.Series`, with each column name being the key and the column values being the key's value. Thus, we can create a `pandas.DataFrame` in this way:

```{python}
# initialize dictionary with columns' data 
d = {'col_name_1' : pd.Series(np.arange(3)),
     'col_name_2' : pd.Series([3.1, 3.2, 3.3]),
     }

# create data frame
df = pd.DataFrame(d)
df
``` 

We can change the index by changing the `index` attribute in the data frame:

```{python}
# change index
df.index = ['a','b','c']
df
```

:::{.callout-tip}
## Check-in
We can access the data frame's column names via the [`columns` attribute](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.columns.html#pandas.DataFrame.columns). Update the column names to C1 and C2 by updating this attribute.
:::

<!--
```{python}
# print original column names
print(df.columns)

# change column names 
df.columns = ['C1','C2']
df
```
-->

## Next

Jump to the week 1 discussion section to practice preliminary data exploration with a real world dataset. Then, continue with the next lesson on subsetting data frames.