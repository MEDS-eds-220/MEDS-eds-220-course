# 5 Grouping
<!-- TODO: improve introduction -->
In this section we will go over the split-apply-combine strategy and the `groupby()` function.

This lesson is based on the [R lesson on summary statistics using group-by and summarize](https://learning.nceas.ucsb.edu/2023-06-delta/session_11.html#summary-statistics-using-group_by-and-summarize) @do-linh_open_2023 co-developed at the NCEAS Learning Hub.

<!-- TODO: add learning objectives -->

## About the data

For this section we will use the  Palmer Penguins dataset @palmerpenguins developed by Drs. Allison Horst, Alison Hill and Kristen Gorman. This dataset contains size measurements for three penguin species in the Palmer Archipelago, Antarctica  during 2007, 2008, and 2009. 

![The Palmer Archipelago penguins. Artwork by Dr. Allison Horst.](/book/images/lesson-5/penguins-logo.png)

The dataset has 344 rows and 8 columns. 
Let's start by loading the data:

```{python}
import numpy as np
import pandas as pd

# Load Palmer penguins data
URL = 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'
penguins = pd.read_csv(URL)

penguins.head()
```

## Summary statistics

It is easy to get summary statistics for each column in a `pandas.DataFrame` by using methods such as 

- `sum()`: sum values in each column,
- `count()`: count non-NA values in each column,
- `min()` and `max()`: get the minimum and maximum value in each column,  
- `mean()` and `median()`: get the mean and median value in each column,
- `std()` and `var()`: get the standard deviation and variance in each column.

#### Example

```{python}
# Get the number of non-NA values in each column 
penguins.count()
```

```{python}
# Get minimum value in each column with numerical values
penguins.select_dtypes('number').min()
```

<!--
TO DO:
Add a note about select_dtypes
-->

## Grouping

Our penguins data is naturally split into different groups: there are three different species, two sexes, and three islands. Often, we want to calculate a certain statistic for each group. For example, suppose we want to calculate the average flipper length per species.  How would we do this "by hand"?

0. We start with our data and notice there are multiple species in the `species` column.

1. We split our original table to group all observations from the same species together.

2. We calculate the average flipper length for each of the groups we formed.

3. Then we combine the values for average flipper length per species into a single table.

This is known as the **Split-Apply-Combine strategy**. This strategy follows the three steps we explained above:

1. **Split**: Split the data into logical groups (e.g. species, sex, island, etc.)

2. **Apply**: Calculate some summary statistic on each group (e.g. average flipper length by species, number of individuals per island, body mass by sex, etc.)

3. **Combine**: Combine the statistic calculated on each group back together.

:::{.column-page}
![Split-apply-combine to calculate mean flipper length](/book/images/lesson-6/split-apply-combine-penguins-diagram.png)
:::

For a `pandas.DataFrame` or `pandas.Series`,  we can use the [`groupby()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html) method to split (i.e. group) the data into different categories. 

<!--
The general syntax for `groupby()` is

```python
df.groupby(columns_to_group_by).summary_method()
```
Most often, we will have that
`columns_to_group_by` will be a single column name (a string) or a list of column names. The unique values of the column (or columns) will be used as the groups of the data frame. The `summary_method()` will then be applied to each group.
-->

#### Example

If we don't use `groupby()` and directly apply the `mean()` method to our flipper length column, we obtain the average of all the values in the column:

```{python}
penguins['flipper_length_mm'].mean()
```

To get the mean flipper length by species we first group our dataset by the species column's values. However, if we just use the `groupby()` method without specifying what we wish to calculate on each group, not much happens up front:

```{python}
penguins.groupby('species')['flipper_length_mm']
```

We get a `GroupBy` object, which is like an intermediate step. It doesn't perform the actual calculations until we specify an operation:

```{python}
# Average flipper length per species
penguins.groupby('species')['flipper_length_mm'].mean()
```

Let's recap what went on in that line (remember the `.` can be read as "and then..."):

- start with the `penguins` data frame, and then...
- use `groupby()` to group the data frame by `species` values, and then...
- select the `'flipper_length_mm'` column, and then...
- calculate the `mean()` of this column with respect to the groups.

Notice that the name of the series is the same as the column on which we calculated the summary statistc. We can easily update this using the `rename()` method:

```{python}
# Average flipper length per species
avg_flipper = (penguins.groupby("species")
                        .flipper_length_mm
                        .mean()
                        .rename('mean_flipper_length')
                        .sort_values(ascending=False)
                        )
avg_flipper
```

We can also group by combinations of columns. 

#### Example

We want to know what was the number of penguins surveyed in each island on different years. We can use the `count()` method to count the number of non-NA values in each column like this:

```{python}
penguins.count()
```

When we group by island and year we get the count of non-NA values for each column across each combination of island and year:

```{python}
penguins.groupby(['island','year']).count()
```

Let's say we want to plot the surveyed population per year and island. We could then use method chaining to do this:

```{python}
(penguins.groupby(['island','year'])
         .count()
         .species
         .sort_values()
         .plot(kind='barh',
                title='Penguins surveyed at the Palmer Archipelago',
                ylabel=('Island, Year'))
         )
```

:::{.callout-tip }
## Check-in

(1) Use the `max()` method for `pands.DataFrames` to calculate the maximum value of a penguin's body mass by year and species.

<!--
```{python}
(penguins.groupby(['year','species'])
        .body_mass_g.max()
        .rename('max_body_mass')
        )
```
-->

(2) Use (1) to display the highest body masses per year and species as a bar plot in descending order.

<!--
```{python}
(penguins.groupby(['year','species'])
        .body_mass_g
        .max()
        .sort_values(ascending=False)
        .plot(kind='barh')
        )
```
-->

:::
