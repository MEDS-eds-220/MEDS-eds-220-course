{
  "hash": "6e7881b798d269e19ab0830280c61b03",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntoc-title: In this lesson\nslides: https://docs.google.com/presentation/d/1IeqTcZFZHsk93ASsU6VTNC68vwlaRbfg-eC9uMzfVow/edit?usp=sharing\n---\n\n\n# git merge conflicts\n\n*This activity has been adapted to quarto and Jupyter notebooks from [Casey O’Hara’s git activity for EDS 211](https://docs.google.com/document/d/1ZLD7CQXCgCp2B1xXGlwoJHOB_dzWe088lOVsJmqA3eY/edit?usp=sharing) with information from [NCEAS Learning Hub 10  Collaborating using Git and GitHub & Merge Conflicts](https://learning.nceas.ucsb.edu/2023-10-coreR/session_10.html).*\n\nGit tracks changes by noting which lines of code have changed - you can only add, delete, or change (delete then add) a line at a time.  When collaborating with others on coding tasks, occasionally two people try to change the same line at the same time.  This results in a merge conflict!\n\n\nIn this activity we will:\n\n1) Create and resolve a merge conflict individually on a Quarto file. \n\n2) Create and resolve a merge conflict in pairs on a Quarto file.\n\n3) Create and resolve a merge conflict individually on a Jupyter notebook using VSCode. \n\n## Setup (everyone, individual)\n\n1. Log in to GitHub.\n\n2. Create a new repository called `merge_test_YOURLASTNAME`, include a README.\n\n3. Clone your repository to your personal computer and open it on VSCode.\n\n4. Update the default method for pulling into repository by running this line of code in the terminal: \n```bash\ngit config pull.rebase false\n```\nThis establishes that the default strategy for pulling is that git will first try to auto-merge the files. If auto-merging is not possible, it will then indicate a merge conflict.\n\n\n## Activity 1: Quarto merge conflict\n\n### Step 1: Create a file on your personal computer\n\n1. Create a new Quarto document called `merge_test_YOURLASTNAME.qmd`.\n\n2. Copy the following code into a Python code chunk in your Quarto file:\n\n::: {#bf0afcf5 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Create a test 10x3 dataframe\ndf = pd.DataFrame({\n    \"A\": np.arange(1, 11),\n    \"B\": np.random.randint(10, 100, size=10),\n    \"C\": np.random.choice([\"x\", \"y\", \"z\"], size=10)\n})\n\nprint(df)\n\n# Select rows with letter = x\nsubset = df[df['C'] == 'x']\n\nprint(\"Subset has \", len(subset), \"rows.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    A   B  C\n0   1  91  z\n1   2  44  x\n2   3  20  y\n3   4  73  x\n4   5  37  y\n5   6  80  z\n6   7  31  x\n7   8  25  z\n8   9  44  y\n9  10  77  z\nSubset has  3 rows.\n```\n:::\n:::\n\n\n3. Save your file, pull, commit, and push your updates to GitHub. \n\n### Step 2: Clone your repo to the workbench\n\n2. \n\n",
    "supporting": [
      "git-merge-conflicts_files"
    ],
    "filters": [],
    "includes": {}
  }
}