{
  "hash": "c0aad9965c4e4d51fb41889f11e94bbe",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 5 Grouping\n---\n\n\n<!-- TODO: improve introduction -->\nIn this section we will go over the split-apply-combine strategy and the `groupby()` function.\n\nThis lesson is based on the [R lesson on summary statistics using group-by and summarize](https://learning.nceas.ucsb.edu/2023-06-delta/session_11.html#summary-statistics-using-group_by-and-summarize) @do-linh_open_2023 co-developed at the NCEAS Learning Hub.\n\n<!-- TODO: add learning objectives -->\n\n## About the data\n\nFor this section we will use the  Palmer Penguins dataset @palmerpenguins developed by Drs. Allison Horst, Alison Hill and Kristen Gorman. This dataset contains size measurements for three penguin species in the Palmer Archipelago, Antarctica  during 2007, 2008, and 2009. \n\n![The Palmer Archipelago penguins. Artwork by Dr. Allison Horst.](/book/images/lesson-5/penguins-logo.png)\n\nThe dataset has 344 rows and 8 columns. \nLet's start by loading the data:\n\n\n::: {#21cec303 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\n# Load Palmer penguins data\nURL = 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'\npenguins = pd.read_csv(URL)\n\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=166}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Summary statistics\n\nIt is easy to get summary statistics for each column in a `pandas.DataFrame` by using methods such as \n\n- `sum()`: sum values in each column,\n- `count()`: count non-NA values in each column,\n- `min()` and `max()`: get the minimum and maximum value in each column,  \n- `mean()` and `median()`: get the mean and median value in each column,\n- `std()` and `var()`: get the standard deviation and variance in each column.\n\n#### Example\n\n::: {#9ba7813c .cell execution_count=2}\n``` {.python .cell-code}\n# Get the number of non-NA values in each column \npenguins.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=167}\n```\nspecies              344\nisland               344\nbill_length_mm       342\nbill_depth_mm        342\nflipper_length_mm    342\nbody_mass_g          342\nsex                  333\nyear                 344\ndtype: int64\n```\n:::\n:::\n\n\n::: {#288334e3 .cell execution_count=3}\n``` {.python .cell-code}\n# Get minimum value in each column with numerical values\npenguins.select_dtypes('number').min()\n```\n\n::: {.cell-output .cell-output-display execution_count=168}\n```\nbill_length_mm         32.1\nbill_depth_mm          13.1\nflipper_length_mm     172.0\nbody_mass_g          2700.0\nyear                 2007.0\ndtype: float64\n```\n:::\n:::\n\n\n<!--\nTO DO:\nAdd a note about select_dtypes\n-->\n\n## Grouping\n\nOur penguins data is naturally split into different groups: there are three different species, two sexes, and three islands. Often, we want to calculate a certain statistic for each group. For example, suppose we want to calculate the average flipper length per species.  How would we do this \"by hand\"?\n\n0. We start with our data and notice there are multiple species in the `species` column.\n\n1. We split our original table to group all observations from the same species together.\n\n2. We calculate the average flipper length for each of the groups we formed.\n\n3. Then we combine the values for average flipper length per species into a single table.\n\nThis is known as the **Split-Apply-Combine strategy**. This strategy follows the three steps we explained above:\n\n1. **Split**: Split the data into logical groups (e.g. species, sex, island, etc.)\n\n2. **Apply**: Calculate some summary statistic on each group (e.g. average flipper length by species, number of individuals per island, body mass by sex, etc.)\n\n3. **Combine**: Combine the statistic calculated on each group back together.\n\n:::{.column-page}\n![Split-apply-combine to calculate mean flipper length](/book/images/lesson-6/split-apply-combine-penguins-diagram.png)\n:::\n\nFor a `pandas.DataFrame` or `pandas.Series`,  we can use the [`groupby()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html) method to split (i.e. group) the data into different categories. \n\n<!--\nThe general syntax for `groupby()` is\n\n```python\ndf.groupby(columns_to_group_by).summary_method()\n```\nMost often, we will have that\n`columns_to_group_by` will be a single column name (a string) or a list of column names. The unique values of the column (or columns) will be used as the groups of the data frame. The `summary_method()` will then be applied to each group.\n-->\n\n#### Example\n\nIf we don't use `groupby()` and directly apply the `mean()` method to our flipper length column, we obtain the average of all the values in the column:\n\n::: {#1a0ece1b .cell execution_count=4}\n``` {.python .cell-code}\npenguins['flipper_length_mm'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=169}\n```\n200.91520467836258\n```\n:::\n:::\n\n\nTo get the mean flipper length by species we first group our dataset by the species column's values. However, if we just use the `groupby()` method without specifying what we wish to calculate on each group, not much happens up front:\n\n::: {#2a53f7d7 .cell execution_count=5}\n``` {.python .cell-code}\npenguins.groupby('species')['flipper_length_mm']\n```\n\n::: {.cell-output .cell-output-display execution_count=170}\n```\n<pandas.core.groupby.generic.SeriesGroupBy object at 0x14ac73010>\n```\n:::\n:::\n\n\nWe get a `GroupBy` object, which is like an intermediate step. It doesn't perform the actual calculations until we specify an operation:\n\n::: {#a760d093 .cell execution_count=6}\n``` {.python .cell-code}\n# Average flipper length per species\npenguins.groupby('species')['flipper_length_mm'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=171}\n```\nspecies\nAdelie       189.953642\nChinstrap    195.823529\nGentoo       217.186992\nName: flipper_length_mm, dtype: float64\n```\n:::\n:::\n\n\nLet's recap what went on in that line (remember the `.` can be read as \"and then...\"):\n\n- start with the `penguins` data frame, and then...\n- use `groupby()` to group the data frame by `species` values, and then...\n- select the `'flipper_length_mm'` column, and then...\n- calculate the `mean()` of this column with respect to the groups.\n\nNotice that the name of the series is the same as the column on which we calculated the summary statistc. We can easily update this using the `rename()` method:\n\n::: {#dced9694 .cell execution_count=7}\n``` {.python .cell-code}\n# Average flipper length per species\navg_flipper = (penguins.groupby(\"species\")\n                        .flipper_length_mm\n                        .mean()\n                        .rename('mean_flipper_length')\n                        .sort_values(ascending=False)\n                        )\navg_flipper\n```\n\n::: {.cell-output .cell-output-display execution_count=172}\n```\nspecies\nGentoo       217.186992\nChinstrap    195.823529\nAdelie       189.953642\nName: mean_flipper_length, dtype: float64\n```\n:::\n:::\n\n\nWe can also group by combinations of columns. \n\n#### Example\n\nWe want to know what was the number of penguins surveyed in each island on different years. We can use the `count()` method to count the number of non-NA values in each column like this:\n\n::: {#cc87f4ea .cell execution_count=8}\n``` {.python .cell-code}\npenguins.count()\n```\n\n::: {.cell-output .cell-output-display execution_count=173}\n```\nspecies              344\nisland               344\nbill_length_mm       342\nbill_depth_mm        342\nflipper_length_mm    342\nbody_mass_g          342\nsex                  333\nyear                 344\ndtype: int64\n```\n:::\n:::\n\n\nWhen we group by island and year we get the count of non-NA values for each column across each combination of island and year:\n\n::: {#fe57d1fd .cell execution_count=9}\n``` {.python .cell-code}\npenguins.groupby(['island','year']).count()\n```\n\n::: {.cell-output .cell-output-display execution_count=174}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>species</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n    <tr>\n      <th>island</th>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Biscoe</th>\n      <th>2007</th>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>64</td>\n      <td>64</td>\n      <td>64</td>\n      <td>64</td>\n      <td>64</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>60</td>\n      <td>59</td>\n      <td>59</td>\n      <td>59</td>\n      <td>59</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Dream</th>\n      <th>2007</th>\n      <td>46</td>\n      <td>46</td>\n      <td>46</td>\n      <td>46</td>\n      <td>46</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Torgersen</th>\n      <th>2007</th>\n      <td>20</td>\n      <td>19</td>\n      <td>19</td>\n      <td>19</td>\n      <td>19</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's say we want to plot the surveyed population per year and island. We could then use method chaining to do this:\n\n::: {#1e729850 .cell execution_count=10}\n``` {.python .cell-code}\n(penguins.groupby(['island','year'])\n         .count()\n         .species\n         .sort_values()\n         .plot(kind='barh',\n                title='Penguins surveyed at the Palmer Archipelago',\n                ylabel=('Island, Year'))\n         )\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-6-groupby_files/figure-html/cell-11-output-1.png){width=686 height=431}\n:::\n:::\n\n\n:::{.callout-tip }\n## Check-in\n\n(1) Use the `max()` method for `pands.DataFrames` to calculate the maximum value of a penguin's body mass by year and species.\n\n<!--\n\n::: {#47d6b6ab .cell execution_count=11}\n``` {.python .cell-code}\n(penguins.groupby(['year','species'])\n        .body_mass_g.max()\n        .rename('max_body_mass')\n        )\n```\n\n::: {.cell-output .cell-output-display execution_count=176}\n```\nyear  species  \n2007  Adelie       4675.0\n      Chinstrap    4400.0\n      Gentoo       6300.0\n2008  Adelie       4700.0\n      Chinstrap    4800.0\n      Gentoo       6000.0\n2009  Adelie       4775.0\n      Chinstrap    4450.0\n      Gentoo       6000.0\nName: max_body_mass, dtype: float64\n```\n:::\n:::\n\n\n-->\n\n(2) Use (1) to display the highest body masses per year and species as a bar plot in descending order.\n\n<!--\n\n::: {#441a7a72 .cell execution_count=12}\n``` {.python .cell-code}\n(penguins.groupby(['year','species'])\n        .body_mass_g\n        .max()\n        .sort_values(ascending=False)\n        .plot(kind='barh')\n        )\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-6-groupby_files/figure-html/cell-13-output-1.png){width=685 height=411}\n:::\n:::\n\n\n-->\n\n:::\n\n",
    "supporting": [
      "lesson-6-groupby_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}