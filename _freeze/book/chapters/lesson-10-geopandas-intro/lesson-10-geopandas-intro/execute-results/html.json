{
  "hash": "d179ca6bb1fe9036eeab74ad90cafb6b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntoc-title: In this lesson\n---\n\n\n\n\n\n# 9 `geopandas`\n\nGeoPandas is a Python library that extends the `pandas` library by adding support for geospatial data. In this lesson we will introduce the `geopandas` library to work with vector data. We will also make our first map. \n\n<!-- TODO\n## Learning objectives\n-->\n\n## About the data\n\nWild pigs (*Sus scrofa*) are a destructive invasive species in California, causing significant environmental and agricultural damage. Introduced to the region in the 1700s, they have since spread across the state, impacting native ecosystems through habitat destruction, soil disturbance due to their rooting behavior, and competition with native wildlife for food @finzel_wild_2015. This widespread damage has made managing wild pig populations a critical issue for conservation and agricultural communities in California.\n\n![Wild pig in Santa Teresa Park, CA. [Photo by Don DeBold](https://www.flickr.com/photos/ddebold/52936296848)](/book/images/lesson-10/wild_pig.png){width=\"70%\"}\n\nIn this lesson we will use simplified point data about wild pig sightings in California from the [Global Biodiversity Information Facility (GBIF)](https://www.gbif.org). \nGBIF is an international network and data platform that provides open access to biodiversity data from around the world. By aggregating data from multiple sources, including museums, research institutions, and citizen science initiatives, GBIF enables scientists, policymakers, and the public to explore and analyze species distribution and environmental trends. \n\nThe data we will use today has been simplified from the complete *Sus scrofa* occurrencies data accessed through the GBIF website @gbiforg_user_occurrence_2023 . \n\n<!-- TODO: column descriptions -->\n<!-- TODO: add info about the CA shapefile -->\n\n## Reproducible file paths\nIn this lesson we will introduce three Python packages:\n\n- `geopandas` @jordahl_geopandasgeopandas_2020: a package that extends `pandas` to work with geospatial data. This is the main package we will be working with in the next few lessons.\n- `os`: a package that provides functions for interacting with the operating system, allowing us to perform tasks like file manipulation in a platform-independent way.\n- `matplotlib` @Hunter:2007: one of the most popular and widely used Python libraries for data visualization.\n\nLet's start by importing these packages:\n\n::: {#338049d5 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nTo import our data we will first use the `os` package to create a reproducible file path:\n\n::: {#6421ea7e .cell execution_count=2}\n``` {.python .cell-code}\nfp = os.path.join('data','gbif_sus_scrofa_california','gbif_sus_scrofa_california.shp')\nfp\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'data/gbif_sus_scrofa_california/gbif_sus_scrofa_california.shp'\n```\n:::\n:::\n\n\nUsing the `os.path.join()` function allows us to create file paths that work on any operating system. Each operating system uses a different way to separate folders in a path (e.g., Windows uses backslashes `\\`, while macOS and Linux use forward slashes `/`). By using `os.path.join()`, Python automatically handles the correct separator for the operating system you're working on. This avoids errors and makes your code more portable.\n\nWe can then use this file path to read in a shapefile with `geopandas` by using the `geopandas.read_file()` function:\n\n::: {#45567866 .cell execution_count=3}\n``` {.python .cell-code}\npigs = gpd.read_file(fp)\npigs.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gbifID</th>\n      <th>species</th>\n      <th>state</th>\n      <th>individual</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>inst</th>\n      <th>collection</th>\n      <th>catalogNum</th>\n      <th>identified</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>899953814</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>22.0</td>\n      <td>3.0</td>\n      <td>2014.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>581956</td>\n      <td>edwardrooks</td>\n      <td>POINT (-121.53812 37.08846)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>899951348</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>9.0</td>\n      <td>6.0</td>\n      <td>2007.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>576047</td>\n      <td>Bruce Freeman</td>\n      <td>POINT (-120.54942 35.47354)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>896560733</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>20.0</td>\n      <td>12.0</td>\n      <td>1937.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:195</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-122.27063 37.87610)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>896559958</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>1969.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:1213</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-121.82297 38.44543)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896559722</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1961.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:1004</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-121.74559 38.54882)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-caution}\n## One shapefile = multiple files\nAlthough the parameter for `geopandas.read_file()` is only the file with `.shp` extension, remember that we need to have at least the `.shx` and `.dbf` files in the same directory as the `.shp` to read in the data. \n:::\n\n::: {.callout-tip}\n## Check-in\nCreate a file path using `os.path.join()` to import the shapefile of the California state boundary as a `geopandas.GeoDataFrame`. Once imported, take a look at the data.\n:::\n\n<!--\n\n\n-->\n\n## `GeoSeries` and `GeoDataFrame`\n\nThe core data structure in GeoPandas is the `geopandas.GeoDataFrame`. \nWe can think of it as a `pandas.DataFrame` with a dedicated geometry column that can perform spatial operations. \n\nThe **geometry column** in a `geopandas.GeoDataFrame` holds the geometry (point, polygon, etc.) of each spatial feature. This geometry column is of type `geopandas.GeoSeries`. Columns in the `geopandas.GeoDataFrame` with attributes about the features are `pandas.Series` like in a regular `pandas.DataFrame`. \n\n![Image adapted from [*Introduction to GeoPandas*](https://geopandas.org/en/stable/getting_started/introduction.html).](/book/images/lesson-10/geodataframe.png){width=\"70%\"}\n\n#### Example\n\nFirst, notice that the rightmost column of the `pigs` geo-dataframe is a column named `geometry` whose values indicate points:\n\n::: {#01d1299d .cell execution_count=5}\n``` {.python .cell-code}\npigs.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gbifID</th>\n      <th>species</th>\n      <th>state</th>\n      <th>individual</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>inst</th>\n      <th>collection</th>\n      <th>catalogNum</th>\n      <th>identified</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>899953814</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>22.0</td>\n      <td>3.0</td>\n      <td>2014.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>581956</td>\n      <td>edwardrooks</td>\n      <td>POINT (-121.53812 37.08846)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>899951348</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>9.0</td>\n      <td>6.0</td>\n      <td>2007.0</td>\n      <td>iNaturalist</td>\n      <td>Observations</td>\n      <td>576047</td>\n      <td>Bruce Freeman</td>\n      <td>POINT (-120.54942 35.47354)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>896560733</td>\n      <td>Sus scrofa</td>\n      <td>California</td>\n      <td>NaN</td>\n      <td>20.0</td>\n      <td>12.0</td>\n      <td>1937.0</td>\n      <td>MVZ</td>\n      <td>Hild</td>\n      <td>MVZ:Hild:195</td>\n      <td>Museum of Vertebrate Zoology, University of Ca...</td>\n      <td>POINT (-122.27063 37.87610)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs usual, we can check the type of our objects using the `type` Python function:\n\n::: {#710f21fa .cell execution_count=6}\n``` {.python .cell-code}\n# Check the data type of the pigs dataframe \nprint(type(pigs))\n\n# Check the data type of the geometry column\nprint(type(pigs.geometry))\n\n# Check the data type of the gbifID column\nprint(type(pigs.gbifID))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n<class 'geopandas.geoseries.GeoSeries'>\n<class 'pandas.core.series.Series'>\n```\n:::\n:::\n\n\nThe data type of the geometry column is also reflected when we look at the data types of the values in each column:\n\n::: {#fbec30b6 .cell execution_count=7}\n``` {.python .cell-code}\n# Check the data type of each column\npigs.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ngbifID           int64\nspecies         object\nstate           object\nindividual     float64\nday            float64\nmonth          float64\nyear           float64\ninst            object\ncollection      object\ncatalogNum      object\nidentified      object\ngeometry      geometry\ndtype: object\n```\n:::\n:::\n\n\nWe can also check the type of each element in the geometry column using the `geom_type` attribute of a `geopandas.GeoDataFrame`:\n\n::: {#1e3a2be5 .cell execution_count=8}\n``` {.python .cell-code}\npigs.geom_type\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0       Point\n1       Point\n2       Point\n3       Point\n4       Point\n        ...  \n1041    Point\n1042    Point\n1043    Point\n1044    Point\n1045    Point\nLength: 1046, dtype: object\n```\n:::\n:::\n\n\n<!--\nThis is a `shapely` point. `shapely` is another Python library that to construct and modify points, lines, and polygons. We will talk more about it in the next lessons.\n-->\n\n::: {.callout-tip}\n## Check-in\nWhat is the geometry type of the single feature in the California state boundary?\n:::\n\n## CRS\n\nTwo other important attributes of a `geopandas.GeoDataFrame` are its coordinate reference system (CRS) and its extent. \n\nWe can think of the **coordinate reference system (CRS)** as the instructions to locate each spatial feature of our data frame on the surface of the Earth. We access the CRS of a `geopandas.GeoDataFrame` using the `crs` attribute:\n\n<!--TODO: add the other information about CRS as in the in-class notebook and csv to geodf lesson -->\n\n::: {#cd2e1735 .cell execution_count=9}\n``` {.python .cell-code}\n# Access the CRS of the GeoDataFrame\npigs.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\nThe CRS for our data is the World Geodetic System 1984 (WGS84), represented by the code EPSG:4326. It uses latitude and longitude in degrees to represent places on Earth. This is a very popular CRS, used by Google Earth, GPS systems, and many web-based mapping tools, including Google Maps and OpenStreetMap. We can obtain more information about our CRS by accessing other attributes:\n\n::: {#77954881 .cell execution_count=10}\n``` {.python .cell-code}\n# Examine CRS details\nprint('Ellipsoid: ', pigs.crs.ellipsoid)\nprint('Datum: ', pigs.crs.datum)\nprint('Is geographic?: ', pigs.crs.is_geographic)\nprint('Is projected?: ', pigs.crs.is_projected)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEllipsoid:  WGS 84\nDatum:  World Geodetic System 1984 ensemble\nIs geographic?:  True\nIs projected?:  False\n```\n:::\n:::\n\n\n## Extent\n\nThe **extent** of the geo-dataframe is the bounding box covering *all* the spatial features in our geo-dataframe. This is formed by finding the points that are furthest west, east, south, and north.\n\n![Spatial extent of different vector data. Image adapted from: National Ecological Observatory Network (NEON)](/book/images/lesson-10/spatial-extent-annotated.png){width=\"80%\"}\n\nWe access the extent of a `geopandas.GeoDataFrame` using the `total_bounds` attribute:\n\n::: {#6e302723 .cell execution_count=11}\n``` {.python .cell-code}\n# Obtain the geographic extent of the geo-dataframe\npigs.total_bounds\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([-124.29448 ,   32.593433, -115.4356  ,   40.934296])\n```\n:::\n:::\n\n\nThese four numbers represent the `minx`, `miny`, `maxx`, `maxy` values for the bounds of the entire geo-dataframe. \n\n::: {.callout-tip}\n## Check-in\nPrint the CRS and extent of the California state boundary. \n:::\n\n<!--\n\n\n-->\n\n## Data wrangling\n\nGeoPandas is conveniently built on top of `pandas`, so we may use everything we have learned about data selection, wrangling, and modification for a `pandas.DataFrame` to wrange `geopandas.GeoDataFrames`.\n\n#### Example\n\nWe only want to use recent data for wild pig observations. A quick check shows that this dataframe has data since 1818:\n\n::: {#74ab1b19 .cell execution_count=13}\n``` {.python .cell-code}\n# Examine pig observation by year\npigs['year'].value_counts().sort_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nyear\n1818.0     31\n1910.0      1\n1925.0      1\n1927.0      4\n1929.0      3\n         ... \n2019.0    101\n2020.0    159\n2021.0    164\n2022.0    185\n2023.0     98\nName: count, Length: 61, dtype: int64\n```\n:::\n:::\n\n\nWe can use our usual data selection to get data from 2020 onwards:\n\n::: {#8f748c0e .cell execution_count=14}\n``` {.python .cell-code}\n# Select data from 2020 onwards\npigs_recent = pigs[pigs.year>=2020]\n\n# Check length of original dataframe\nprint('Total number of observations: ' , len(pigs))\n\n# Check length of new dataframe\nprint('Number of observations since 2020: ' , len(pigs_recent))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal number of observations:  1046\nNumber of observations since 2020:  606\n```\n:::\n:::\n\n\n## Create a map\n\n### `plot()`\n\nSimilarly to a `pandas.DataFrame`, a `geopandas.GeoDataFrame` has a `plot()` method that we can call directly to create a quick view of our data. \nThe geospatial information of the `geopandas.GeoDataFrame` will be used to create the axes of the plot.\n\n#### Example\n\nLet's take a quick look at our recent pigs data:\n\n::: {#b70cde3d .cell execution_count=15}\n``` {.python .cell-code}\npigs_recent.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-geopandas-intro_files/figure-html/cell-16-output-1.png){}\n:::\n:::\n\n\n### `matplotlib`'s `fig` and `ax`\n\nGoing forward, we will make more complex visualizations where we add different layers to a graph and customize it. \nTo do this, we will use the `matplotlib` Python library for creating visualizations. \nWe can interact with `matplotlib` via its `pyplot` interface, which we imported at the top of the notebook.\n\nMatplotlib graphs the data in a **figure** which can have one or more **axes**. \nThe axes is *only* the area specified by the $x$ axis and $y$ axis and what is plotted in it, while the figure can include multiple axes in it.  \n\n![Image source: [Getting Started with Matplotlib.](https://www.skytowner.com/explore/getting_started_with_matplotlib)](/book/images/lesson-10/matplotlib_figure_axes_axis.png)\n\nTo create a new blank figure:\n\n1. Initialize a new figure and axes by calling `pyplot`'s `subplots()` function\n2. Display the figure using `plt.show()`:\n\n::: {#1ea60d51 .cell execution_count=16}\n``` {.python .cell-code}\n# Initialize empty figure (fig) and axis (ax)\nfig, ax = plt.subplots()\n\n# Display figure\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-geopandas-intro_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\nNotice that `plt.subplots()` is a function that returns two objects, when we call it, we get a figure `fig` with a single empty axis `ax`. We can think of this step as setting a new blank canvas on which we will paint upon. \n\n\n### Adding a layer\n\nWhen using `matplotlib`, it can be useful to think of creating a plot as adding layers to an axis.\nThe general syntax to plot data from a dataframe `df` onto an axis is:\n```python\n# Initialize empty figure and axis\nfig, ax = plt.subplots()\n\n# Plot df on the ax axis\ndf.plot(ax=ax,  # Add plot to axis\n        ...)    # Other arguments for plot function\n\n# Display figure\nplt.show()\n``` \n\n#### Example\n\nThe first layer that we want to add to our axis is the `pigs_recent` point data. \nWe can plot our data using `matplotlib` like this:\n\n::: {#0b17828b .cell execution_count=17}\n``` {.python .cell-code}\n# Initialize empyt figure and axis\nfig, ax = plt.subplots()\n\n# Add pigs point plot to our figure's axis\npigs_recent.plot(ax=ax)\n\n# Display figure\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-geopandas-intro_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\n### Customization \n\nMatplotlib allows for a lot of customization. \nSome of it can be done directly in the `plot()` method for the dataframe (like we've done when ploting data using `pandas`), while other is done by updating attributes of the `ax` axis. \nThe following diagram shows some examples of elements in the axis that can be updated.\n\n![Image source: Matplotlib documentation.](/book/images/lesson-10/anatomy.png){width=\"70%\"}\n\n#### Example\n\nSome basic customization for our pigs data could looke like this:\n\n::: {#222dee9b .cell execution_count=18}\n``` {.python .cell-code}\n# Initialize empty figure\nfig, ax = plt.subplots()\n\n# Add data to axis\npigs_recent.plot(ax=ax,         # Add plot to axis\n                 alpha=0.5,     # Adjust transparency\n                 color='brown'  # Update point color\n                 )\n\n# Update axis \nax.set_title('Reported \"Sus scrofa\" sightings in CA (2020-2023)')\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\n\n# Display figure\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-geopandas-intro_files/figure-html/cell-19-output-1.png){}\n:::\n:::\n\n\n::: {.callout-tip}\n## Check-in \n1. Add the California state boundary to the plot so the boundary appears behind the points as below. Don't forget to customize your graph!\n\n2. Write a short caption for your map describing the spatial distribution of observations. What patterns or clusters do you notice?\n\n3. Discuss with a partner: what are some possible biases or limitations in GBIF species occurrence data (e.g., spatial coverage, sampling effort, data quality)?\n\n::: {#ba728063 .cell execution_count=19}\n\n::: {.cell-output .cell-output-display}\n![](lesson-10-geopandas-intro_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "lesson-10-geopandas-intro_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}