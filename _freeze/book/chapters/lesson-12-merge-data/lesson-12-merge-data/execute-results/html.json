{
  "hash": "9c5adbece265e41714b7121e07c0bb4c",
  "result": {
    "engine": "jupyter",
    "markdown": "<!--\nIgnore ShapelyDeprecationWarning warning in render\n\n::: {#2d99c29a .cell execution_count=1}\n``` {.python .cell-code}\nimport shapely\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\nwarnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n```\n:::\n\n\n-->\n\n# 11 Reprojecting\n\nIn this section we will learn how to join dataframes and will apply this to creating a [choropleth map](https://en.wikipedia.org/wiki/Choropleth_map) with `geopandas`.\n\n## About the data\n\nThe first dataset we will use is a [list of Arctic communities and their location](https://search.dataone.org/view/doi%3A10.18739%2FA28S4JQ80) @brook_approximate_2023 created by the [Alaska Native Tribal Health Consortium](https://www.anthc.org). This data comess in GeoJSON file with the following attributes:\n\n- **name**: name of Arctic community, \n- **population**: population of Arctic community, as of 2022\n- **country**: country that the Arctic community falls within (see dataset metadata for the codes)\n- **geoname-id**: numeric codes that uniquely identify all administrative/legal and statistical geographic areas for which the Census Bureau tabulates data\n\nThe second dataset is [Natural Earth's medium scale  cultural boundaries data for countries (1:50m)](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/). \nWe can obtain this dataset by downloading the shapefile. \n[Natural Earth](https://www.naturalearthdata.com) is a public domain dataset with ready-to-use data for creating maps. \n\n## Import data\n\nWe will first import the countries shapefile and adapt it for wrangling purposes:\n\n<!--\n# will use this library to add a background to our map\nimport contextily as ctx\n-->\n\n::: {#92410303 .cell execution_count=2}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\n\n# Import countries polygons\nfp = os.path.join('data', 'ne_50m_admin_0_countries', 'ne_50m_admin_0_countries.shp')\ncountries = gpd.read_file(fp)\n\n# Simplify column names\ncountries.columns = countries.columns.str.lower()\n\n# Select columns for analysis\ncountries = countries[['admin', 'type', 'geometry']]\n\ncountries.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>admin</th>\n      <th>type</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Zimbabwe</td>\n      <td>Sovereign country</td>\n      <td>POLYGON ((31.28789 -22.40205, 31.19727 -22.344...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Zambia</td>\n      <td>Sovereign country</td>\n      <td>POLYGON ((30.39609 -15.64307, 30.25068 -15.643...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Yemen</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((53.08564 16.64839, 52.58145 16...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Vietnam</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((104.06396 10.39082, 104.08301 ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Venezuela</td>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((-60.82119 9.13838, -60.94141 9...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#728c786e .cell execution_count=3}\n``` {.python .cell-code}\n# Quick view\ncountries.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-merge-data_files/figure-html/cell-4-output-1.png){width=578 height=293}\n:::\n:::\n\n\nNext, we import the Arctic communitites data. In the same way as we previously used `pandas.read_csv()`, we can read in the Arctic communities GeoJSON data directly from the data repository using `geopandas.read_file()`:\n\n::: {#b4ff4337 .cell execution_count=4}\n``` {.python .cell-code}\n# Import Arctic communities data\nURL = 'https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Aed7718ae-fb0d-43dd-9270-fbfe80bfc7a4'\ncommunities = gpd.read_file(URL)\n\ncommunities.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>population</th>\n      <th>country</th>\n      <th>geoname-id</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Udomlya</td>\n      <td>32373</td>\n      <td>RU</td>\n      <td>452949</td>\n      <td>POINT (34.99250 57.87944)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Valmiera</td>\n      <td>26963</td>\n      <td>LV</td>\n      <td>453754</td>\n      <td>POINT (25.42751 57.54108)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Ventspils</td>\n      <td>42644</td>\n      <td>LV</td>\n      <td>454310</td>\n      <td>POINT (21.57288 57.38988)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Vec-LiepƒÅja</td>\n      <td>85260</td>\n      <td>LV</td>\n      <td>454432</td>\n      <td>POINT (21.01667 56.53333)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Tukums</td>\n      <td>18348</td>\n      <td>LV</td>\n      <td>454768</td>\n      <td>POINT (23.15528 56.96694)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe CRS of the `communitites` is EPSG:4326. Remember all GeoJSON files are given in this CRS and all points are expressed in longitude and latitude units of decimal degrees. In this case, the `countries` and `communities` GeoDataFrames both have the same CRS:\n\n::: {#747cac8b .cell execution_count=5}\n``` {.python .cell-code}\nprint(countries.crs)\n\n# Verify CRSs match\nassert countries.crs == communities.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEPSG:4326\n```\n:::\n:::\n\n\nSince the CRSs match, it is easy to take a quick look at our communities data by plotting it on top of the countries dataframe:\n\n::: {#b3853160 .cell execution_count=6}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\ncountries.plot(ax=ax)\ncommunities.plot(ax=ax, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-merge-data_files/figure-html/cell-7-output-1.png){width=403 height=411}\n:::\n:::\n\n\n## Arctic communities by country\n\nNext, we want to calculate the number of Arctic communities by country. \n\n::: {#849c0079 .cell execution_count=7}\n``` {.python .cell-code}\n# Create data frame with number of communities per country\nn_comms = (communities.groupby('country')\n                      .size()\n                      .reset_index(name='n_communities'))\n```\n:::\n\n\nLet's break this down a bit:\n\n- We start with our `communities` dataframe and use `groupby('country')` to group by country code, \n- then we use [`size()`](https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.size.html) as an aggregator function to calculate the size of each group.\n- The result of this operation is a `pandas.Series` indexed by the `country` values.\n- By resetting the index we transform the `pandas.Series` into a `pandas.DataFrame`, the index is now a column named `country` and the values of the series are named `n_communities`.\n\n::: {#8de0d2ab .cell execution_count=8}\n``` {.python .cell-code}\n# Number of Arctic communities per country\nn_comms\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>n_communities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AX</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>BY</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CA</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DK</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>EE</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>FI</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FO</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>GB</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>GL</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>IS</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>LT</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>LV</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>NO</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>RU</td>\n      <td>774</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>SE</td>\n      <td>133</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>US</td>\n      <td>115</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `if`-`else` statements\n\nOur goal is to merge the `n_comms` and the `countries` data frames. To merge two data frames they need to have at least one column in common. \nCurrently our datasets do not have any columns in common:\n\n::: {#9bb2fc92 .cell execution_count=9}\n``` {.python .cell-code}\nset(countries.columns).intersection(n_comms.columns)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\nset()\n```\n:::\n:::\n\n\nThe output `set()` represents the empty set. This might be as informative, so let's write a different information statement:\n\n::: {#d2ecf368 .cell execution_count=10}\n``` {.python .cell-code}\ncommon_columns = set(countries.columns).intersection(n_comms.columns)\n\n# Check if there are any common columns\nif len(common_columns) != 0:\n    print(f\"Common columns: {common_columns}\")\nelse:\n    print(\"No common columns\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo common columns\n```\n:::\n:::\n\n\nRemember that an `if-else` statement is a control structure that allows code to make decisions: it checks a condition, and if that condition is true, it executes one block of code (the `if` block); if the condition is false, it executes a different block (the `else` block). This enables programs to respond differently depending on specific criteria or inputs.\n\n:::{.callout-tip}\n## Check-in\nWrap up the previous code into a function called `check_common_columns` that prints a message depending of whether two data frames have common columns or not. Do not forget to include a docstring!\n<!--\n\n::: {#a61380ed .cell execution_count=11}\n``` {.python .cell-code}\ndef check_common_columns(df1, df2):\n    \"\"\"\n    Prints a message depending whether df1 and df2 have columns in common\n\n     Parameters:\n    - df1: The first DataFrame.\n    - df2: The second DataFrame.\n    \n    Returns:\n    - A set of common column names. If no columns are common, returns an empty set.\n    \"\"\"\n\n    common_columns = set(df1.columns).intersection(df2.columns)\n    \n    if common_columns:\n        print(f\"Common columns: {common_columns}\")\n    else:\n        print(\"No common columns\")\n    \n    return \n```\n:::\n\n\n-->\n:::\n\n## Merging data frames\n\nBased on the metadata of both datasets, we have created the following code with the complete names of the countries given the code in the Arctic communities data:\n\n::: {#9f9636b2 .cell execution_count=12}\n``` {.python .cell-code}\n# Text data as a dictionary\ndict = {\n    \"RU\": \"Russia\", \"LV\": \"Latvia\", \"EE\": \"Estonia\", \"LT\": \"Lithuania\",\n    \"SE\": \"Sweden\", \"BY\": \"Belarus\", \"FI\": \"Finland\", \"NO\": \"Norway\",\n    \"DK\": \"Denmark\", \"FO\": \"Faroe Islands\", \"IS\": \"Iceland\",\n    \"GB\": \"United Kingdom\",\n    \"AX\": \"Aland Islands\", \"GL\": \"Greenland\", \"US\": \"United States of America\", \"CA\": \"Canada\"\n}\n\n# Convert the dictionary to a DataFrame\ncountry_names = pd.DataFrame(list(dict.items()), columns=[\"country\", \"admin\"])\ncountry_names\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>admin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RU</td>\n      <td>Russia</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LV</td>\n      <td>Latvia</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>EE</td>\n      <td>Estonia</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LT</td>\n      <td>Lithuania</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SE</td>\n      <td>Sweden</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>BY</td>\n      <td>Belarus</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FI</td>\n      <td>Finland</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>NO</td>\n      <td>Norway</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>DK</td>\n      <td>Denmark</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>FO</td>\n      <td>Faroe Islands</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>IS</td>\n      <td>Iceland</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>GB</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>AX</td>\n      <td>Aland Islands</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>GL</td>\n      <td>Greenland</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>US</td>\n      <td>United States of America</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>CA</td>\n      <td>Canada</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can use this to add the names countries into the `n_comms` data which, in turn, will allow us to merge that data frame with the `country_names` data. To merge dataframes we can use the [`pandas.merge()` function](https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge). \nThe basic syntax for it is:\n\n```python\noutput_df = pd.merge(left_df,\n                     right_df, \n                     how = type_of_join, \n                     on = column_to_join)\n```\nwhere\n\n- `output_df` is the dataframe resulting from the merge,\n- `left_df` is the dataframe we have \"on the left side\",\n- `right_df` is the dataframe we have \"on the right side\",\n- `how` specifies the type of join between the left and right dataframes, ([check the options here](https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge)), the default is to do an inner join,\n- `on` specifies the column to join on, this column must be present in both our dataframes. \n\nSo, we merge the `n_comms` and `country_names` data frames using a left join:\n\n![Image source: Data Modeling Essentials, NCEAS Learning Hub @do-linh_open_2023](/book/images/merging_data/join-diagrams-left.png)\n\n::: {#ecf34c9a .cell execution_count=13}\n``` {.python .cell-code}\nn_comms = pd.merge(n_comms,\n                   country_names,\n                   how='left',\n                   on='country')\nn_comms\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>n_communities</th>\n      <th>admin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AX</td>\n      <td>1</td>\n      <td>Aland Islands</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>BY</td>\n      <td>8</td>\n      <td>Belarus</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CA</td>\n      <td>7</td>\n      <td>Canada</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DK</td>\n      <td>72</td>\n      <td>Denmark</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>EE</td>\n      <td>14</td>\n      <td>Estonia</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>FI</td>\n      <td>98</td>\n      <td>Finland</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>FO</td>\n      <td>1</td>\n      <td>Faroe Islands</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>GB</td>\n      <td>96</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>GL</td>\n      <td>1</td>\n      <td>Greenland</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>IS</td>\n      <td>5</td>\n      <td>Iceland</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>LT</td>\n      <td>26</td>\n      <td>Lithuania</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>LV</td>\n      <td>25</td>\n      <td>Latvia</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>NO</td>\n      <td>48</td>\n      <td>Norway</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>RU</td>\n      <td>774</td>\n      <td>Russia</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>SE</td>\n      <td>133</td>\n      <td>Sweden</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>US</td>\n      <td>115</td>\n      <td>United States of America</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can reuse our function to check that `n_comms` and `countries` now have a common column on which we can merge them:\n\n::: {#6d1e13f4 .cell execution_count=14}\n``` {.python .cell-code}\ncheck_common_columns(n_comms, countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCommon columns: {'admin'}\n```\n:::\n:::\n\n\n:::{.callout-tip}\n## Check-in\nPerform an inner join between our `countries` and `n_comms` dataframes. This will merge the subset of rows that have matches in both the left table and the right table.\n\n![Image source: Data Modeling Essentials, NCEAS Learning Hub @do-linh_open_2023](/book/images/merging_data/join-diagrams-inner.png)\n<!--\n\n::: {#f081575e .cell execution_count=15}\n``` {.python .cell-code}\n# Merge data frames \narctic_countries = pd.merge(countries,\n                            n_comms,\n                            how='inner',\n                            on='admin')\n# Update index\narctic_countries = arctic_countries.set_index('admin')\n```\n:::\n\n\n-->\n:::\n\n## Reviewing results\n\nNotice that the row for Aland Islands is not present in the merged dataframe:\n\n::: {#112ba44b .cell execution_count=16}\n``` {.python .cell-code}\narctic_countries\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>type</th>\n      <th>geometry</th>\n      <th>country</th>\n      <th>n_communities</th>\n    </tr>\n    <tr>\n      <th>admin</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>United States of America</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((-132.74687 56.52568, -132.7576...</td>\n      <td>US</td>\n      <td>115</td>\n    </tr>\n    <tr>\n      <th>United Kingdom</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((-2.66768 51.62300, -2.74214 51...</td>\n      <td>GB</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>Sweden</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((19.07646 57.83594, 18.99375 57...</td>\n      <td>SE</td>\n      <td>133</td>\n    </tr>\n    <tr>\n      <th>Russia</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((145.88154 43.45952, 145.89561 ...</td>\n      <td>RU</td>\n      <td>774</td>\n    </tr>\n    <tr>\n      <th>Norway</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((20.62217 69.03687, 20.49199 69...</td>\n      <td>NO</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>Lithuania</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((20.95781 55.27891, 20.89980 55...</td>\n      <td>LT</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>Latvia</th>\n      <td>Sovereign country</td>\n      <td>POLYGON ((26.59355 55.66753, 26.54287 55.67241...</td>\n      <td>LV</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>Iceland</th>\n      <td>Sovereign country</td>\n      <td>POLYGON ((-15.54312 66.22852, -15.42847 66.224...</td>\n      <td>IS</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>Finland</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((24.15547 65.80527, 24.04902 65...</td>\n      <td>FI</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>Estonia</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((27.35195 57.52812, 27.32656 57...</td>\n      <td>EE</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>Greenland</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((-29.95288 83.56484, -28.99199 ...</td>\n      <td>GL</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Faroe Islands</th>\n      <td>Dependency</td>\n      <td>MULTIPOLYGON (((-6.62319 61.80596, -6.64277 61...</td>\n      <td>FO</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Denmark</th>\n      <td>Country</td>\n      <td>MULTIPOLYGON (((12.56875 55.78506, 12.57119 55...</td>\n      <td>DK</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>Canada</th>\n      <td>Sovereign country</td>\n      <td>MULTIPOLYGON (((-132.65552 54.12749, -132.5640...</td>\n      <td>CA</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Belarus</th>\n      <td>Sovereign country</td>\n      <td>POLYGON ((31.76338 52.10107, 31.57373 52.10811...</td>\n      <td>BY</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe `values` attribute of a data frame returns *all* the values in the data frame as an array. We can verify the value 'Aland Islands' was *nowhere* in our original countries dataframe like this:\n\n::: {#fe9c7cfa .cell execution_count=17}\n``` {.python .cell-code}\n# Check Aland Islands is nowhere in data frame\n'Aland Islands' not in countries.values\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\nTrue\n```\n:::\n:::\n\n\nThe Aland Islands is an autonomous region of Finland and there is one Arctic community registered in this region. \nWe will directly add one to Finland to not lose this piece of data:\n\n::: {#c43651b9 .cell execution_count=18}\n``` {.python .cell-code}\narctic_countries.at['Finland', 'n_communities'] += 1\n```\n:::\n\n\n## Choropleth map\n\nA [choropleth map](https://en.wikipedia.org/wiki/Choropleth_map) is an efficient way to visualize aggregate data per region. \n\nMaking a choropleth map from our polygons `GeoDataFrame` is easy, we just need to specify the `column` parameter in `plot()` and make it equal to the column with the values we want to plot in each country:\n\n::: {#39c9920a .cell execution_count=19}\n``` {.python .cell-code}\narctic_countries.plot(column='n_communities',\n                      legend=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-merge-data_files/figure-html/cell-20-output-1.png){width=542 height=389}\n:::\n:::\n\n\n## Reprojecting\n\nRemember that CRSs reflect cultural views and even biases. Any map projection involves choices about which areas to emphasize, minimize, or distort, and those choices can influence how viewers perceive different regions. In our map, using the EPSG:4326 CRS is, among other things, mapping the Arctic regions as far apart, while they are actually near each other.\n\n**Reprojecting** means changing the coordinate reference system of your geospatial data. Do\nIn our case we will reproject the Alaska geo-dataframe to the CRS EPSG:3413. \nThis CRS is a *projected* CRS, better suited for working with data from Arctic region:\n\n![Source: [spatialreference.org](https://spatialreference.org/ref/epsg/3413/) ](/book/images/lesson-12/epsg_3413.png)\n\nChanging CRSs in GeoPandas is very simple using the `to_crs()` method for `geopandas.GeoDataFrame`s. \nThe general syntax is:\n```python\nupdated_geodf = geodf.to_crs(new_crs)\n```\nwhere:\n\n- `updated_geodf` is the output of the method, a new geodataframe (`to_crs()` does not work in place), \n- `geodf` is the `geopandas.GeoDataFrame` we want to transform, \n- `new_crs` the CRS we want to convert to, this is an object of type CRS or string representing the CRS (ex: `'epsg:3413'`). \n\nIn our case:\n\n::: {#f7a90839 .cell execution_count=20}\n``` {.python .cell-code}\n# Reproject to CRS optimized for Arctic region\narctic_countries = arctic_countries.to_crs('epsg:3413')\n```\n:::\n\n\nWe can now use the reprojected data to update our map:\n\n::: {#ae92da05 .cell execution_count=21}\n``` {.python .cell-code code-fold=\"true\"}\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Remove the axis for a cleaner map\nax.axis('off')\n\n# Create choropleth map of communities\n# Plot with refined color and edge style\narctic_countries.plot(\n    ax=ax,\n    column='n_communities',\n    cmap='PuBuGn',\n    legend=True,\n    edgecolor=\"0.6\",\n    linewidth=0.5,\n    legend_kwds={\n        \"shrink\": 0.7,\n        \"label\": \"Number of Arctic Communities\",\n        \"orientation\": \"horizontal\",\n        \"pad\": 0.05\n    }\n)\n\n# Add title and subtitle for better context\nax.set_title('Distribution of Arctic Communities', fontsize=18, weight='bold', pad=15)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-12-merge-data_files/figure-html/cell-22-output-1.png){width=488 height=496}\n:::\n:::\n\n\nAlthough the new projection clearly improves the presentation of the data, there are still issues with this plot! Mainly, the complete United States territory is in it, while we should only have Alaska. **In our next lesson we will review startegies to clip and subset vector data and return to this plot in our discussion section.**\n\n",
    "supporting": [
      "lesson-12-merge-data_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}