{
  "hash": "146c7298370a1f8c13da8eb05a0a856a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntoc-title: In this lesson\n---\n\n\n\n\n# 3 Basic plotting\nIn this lesson we will learn to use the `plot()` method of a `pandas.DataFrame` to create simple exploratory graphs from tabular data. \n\n## Learning objectives\nBy the end of this lesson students will be able to: \n\n- objective 1\n- objective 2\n- objective 3\n\n## About the data\n\nIn this lesson we will reuse the annual estimates of bird species abundance in four coastal wetlands along the California coast that we used in the previous lesson on subsetting a `pandas.DataFrame`. This dataset was derived for education purposes for this course from the [UCSB SONGS Mitigation Monitoring: Wetland Performance Standard - Bird Abundance and Species Richness dataset](https://portal.edirepository.org/nis/mapbrowse?packageid=edi.649.6) @schroeter_ucsb_2024. \nThe SONGS dataset was collected as part of the [San Onofre Nuclear Generating Station (SONGS) San Dieguito Wetland Restoration monitoring program](https://marinemitigation.msi.ucsb.edu). \n\nThe annual bird species abundance estimates is a CSV file with 17 columns. You can see the first three rows below.\n<!-- TODO: add link to other lesson. Add pictures of birds -->\n\n::: {#29bc7372 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>CSM_winter</th>\n      <th>CSM_spring</th>\n      <th>CSM_fall</th>\n      <th>MUL_winter</th>\n      <th>MUL_spring</th>\n      <th>MUL_fall</th>\n      <th>SDW_winter</th>\n      <th>SDW_spring</th>\n      <th>SDW_fall</th>\n      <th>TJE_winter</th>\n      <th>TJE_spring</th>\n      <th>TJE_fall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>39.0</td>\n      <td>40.0</td>\n      <td>50.0</td>\n      <td>45.0</td>\n      <td>NaN</td>\n      <td>61.0</td>\n      <td>NaN</td>\n      <td>75.0</td>\n      <td>85.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>81.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011</td>\n      <td>48.0</td>\n      <td>44.0</td>\n      <td>NaN</td>\n      <td>58.0</td>\n      <td>52.0</td>\n      <td>NaN</td>\n      <td>78.0</td>\n      <td>74.0</td>\n      <td>NaN</td>\n      <td>67.0</td>\n      <td>70.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>51.0</td>\n      <td>43.0</td>\n      <td>49.0</td>\n      <td>57.0</td>\n      <td>58.0</td>\n      <td>53.0</td>\n      <td>71.0</td>\n      <td>72.0</td>\n      <td>73.0</td>\n      <td>70.0</td>\n      <td>63.0</td>\n      <td>69.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe four wetlands where the bird surveys occured are Carpinteria Salt Marsh (CSM),  Mugu Lagoon (MUL), the San Dieguito Wetland (SDW), and the Tijuana Estuary (TJE). The values from the second column to the last column correspond to the number of different bird species recorded across the survey sites in each wetland during winter, spring, and fall of a given year. For example, the `CSM_fall` column has the number of species recorded in fall at Carpinteria Salt Marsh across years. The `year` column corresponds to the calendar year on which the data was collected. Surveys have happened yearly from 2010 to 2023. \n\n\n## `plot()` method\n\nLet us start by loading the data:\n\n```python\nimport pandas as pd\n\n# Read in file\ndf = pd.read_csv('data/wetlands_seasonal_bird_diversity.csv')\n\n# Check the first five rows\ndf.head()\n```\n\n::: {#d9fe7513 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>CSM_winter</th>\n      <th>CSM_spring</th>\n      <th>CSM_fall</th>\n      <th>MUL_winter</th>\n      <th>MUL_spring</th>\n      <th>MUL_fall</th>\n      <th>SDW_winter</th>\n      <th>SDW_spring</th>\n      <th>SDW_fall</th>\n      <th>TJE_winter</th>\n      <th>TJE_spring</th>\n      <th>TJE_fall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>39.0</td>\n      <td>40.0</td>\n      <td>50.0</td>\n      <td>45.0</td>\n      <td>NaN</td>\n      <td>61.0</td>\n      <td>NaN</td>\n      <td>75.0</td>\n      <td>85.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>81.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011</td>\n      <td>48.0</td>\n      <td>44.0</td>\n      <td>NaN</td>\n      <td>58.0</td>\n      <td>52.0</td>\n      <td>NaN</td>\n      <td>78.0</td>\n      <td>74.0</td>\n      <td>NaN</td>\n      <td>67.0</td>\n      <td>70.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>51.0</td>\n      <td>43.0</td>\n      <td>49.0</td>\n      <td>57.0</td>\n      <td>58.0</td>\n      <td>53.0</td>\n      <td>71.0</td>\n      <td>72.0</td>\n      <td>73.0</td>\n      <td>70.0</td>\n      <td>63.0</td>\n      <td>69.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013</td>\n      <td>42.0</td>\n      <td>46.0</td>\n      <td>38.0</td>\n      <td>60.0</td>\n      <td>58.0</td>\n      <td>62.0</td>\n      <td>69.0</td>\n      <td>70.0</td>\n      <td>70.0</td>\n      <td>69.0</td>\n      <td>74.0</td>\n      <td>64.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2014</td>\n      <td>38.0</td>\n      <td>43.0</td>\n      <td>45.0</td>\n      <td>49.0</td>\n      <td>52.0</td>\n      <td>57.0</td>\n      <td>61.0</td>\n      <td>78.0</td>\n      <td>71.0</td>\n      <td>60.0</td>\n      <td>81.0</td>\n      <td>62.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nA `pandas.DataFrame` has a [built-in method `plot()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html) for plotting. \nWhen we call it without specifying any other parameters `plot()` creates one line plot for each of the columns with numeric data. \n\n::: {#44133fd5 .cell execution_count=3}\n``` {.python .cell-code}\n# Default plot(): one line plot per column with numeric data\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-plotting-pandas_files/figure-html/cell-4-output-1.png){width=583 height=411}\n:::\n:::\n\n\nAs we can see, this doesn't make much sense! In particular, look at the x-axis. The default for `plot` is to use the values of the index as the x-axis values. Let's see some examples about how to improve this situation.\n\n## Line plots\n\nWe can make a line plot of one column against another by using the following the general syntax:\n\n```python\ndf.plot(x='x_values_column', y='y_values_column')\n```\n#### Example\n\nIf we want to plot the bird surveys at Carpinteria Salt Marsh across years we can do:\n\n::: {#79d56a65 .cell execution_count=4}\n``` {.python .cell-code}\n# Birds species registered during winter at CSM yearly\ndf.plot(x='year', y='CSM_winter')\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-plotting-pandas_files/figure-html/cell-5-output-1.png){width=579 height=429}\n:::\n:::\n\n\nWe can do some basic customization specifying other parameters of the `plot()` method. Some basic ones are:\n\n- `title`: title to use for the plot.\n- `xlabel`: name to use for the x-label on x-axis\n- `ylabel`: bame to use for the y-label on y-axis\n- `color`: change the color of our plot\n- `legend`: boolean value `True` or `False`. `True` (default) includes the legend, `False` removes the legend\n\nIn action:\n\n::: {#f3ac3f87 .cell execution_count=5}\n``` {.python .cell-code}\ndf.plot(x='year', \n        y='CSM_winter',\n        title='Bird species registered during winter at Carpinteria Salt Marsh',\n        xlabel='Year',\n        ylabel='Number of bird species',\n        color='green',\n        legend=False\n        )\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-plotting-pandas_files/figure-html/cell-6-output-1.png){width=597 height=449}\n:::\n:::\n\n\nYou can see all the [optional parameters for the `plot()` function in the documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html).\n\n## Multiple line plots\n\nWe can plot multiple line plots by updating these parameters in the `plot()` method:\n\n- `y` : a list of column names that will be plotted against the x-axis\n- `color`: a dictionary `{'column_1' : 'color_1', 'column_2':'color_2}` specifying the color of each column's line plot\n\n#### Example\n\nLet's say we want to compare the bird surveys at the Tijuana Estuary during spring and fall across years. \n\n::: {#81ba92a9 .cell execution_count=6}\n``` {.python .cell-code}\ndf.plot(x='year', \n        y=['TJE_spring', 'TJE_fall'],\n        title = 'Seasonal bird surveys at Tijuana Estuary',\n        xlabel='Year',\n        ylabel='Number of bird species',        \n        color = {'TJE_spring':'#F48FB1',\n                 'TJE_fall': '#AB47BC'\n                 }\n        )\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-plotting-pandas_files/figure-html/cell-7-output-1.png){width=585 height=449}\n:::\n:::\n\n\n<!--It is not possible to rename the labels in the legend only using the plot() method and without updating the column names.-->\n\nNotice that for specifying the colors we used a **HEX code**, this gives us more control over how our graph looks.\n\n\nWe can also create separate plots for each column by setting the `subset` to `True`.\n\n::: {#a86d0670 .cell execution_count=7}\n``` {.python .cell-code}\ndf.plot(x='year', \n        y=['TJE_spring', 'TJE_fall'],\n        title = 'Seasonal bird surveys at Tijuana Estuary',\n        xlabel='Year',\n        ylabel='Number of bird species',        \n        color = {'TJE_spring':'#F48FB1',\n                 'TJE_fall': '#AB47BC'\n                 },\n        subplots=True\n        )\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\narray([<Axes: xlabel='Year', ylabel='Number of bird species'>,\n       <Axes: xlabel='Year', ylabel='Number of bird species'>],\n      dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-4-plotting-pandas_files/figure-html/cell-8-output-2.png){width=585 height=477}\n:::\n:::\n\n\n:::{.callout-tip}\n## Check-in\n(1)\nPlot a graph of the annual sea level rise with respect to the years.\n\n(2)\nWhat information is the `columns` variable retrieving from the data frame? Describe in a sentence what is being plotted.\n```python\ncolumns = df.loc[:,'europe':'antarctica'].columns\ndf.plot(x='year', \n        y=columns, \n        subplots=True)\n```\n:::\n\n",
    "supporting": [
      "lesson-4-plotting-pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}