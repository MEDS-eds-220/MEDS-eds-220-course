{
  "hash": "7fdff8416c25a45a7b161801fda20085",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 10 US energy sources\n---\n\n\n\nIn this lesson we will learn how to extract geospatial data from a CSV to create a `geopandas.GeoDataFrame` and go over some more customizations for maps and matplotlib figures.\n\n<!--\nTODO: learning objectives\n-->\n\n## About the data\n\nThe U.S. energy landscape relies on a mix of fossil fuels and renewables, each with unique environmental and economic impacts. As the nation works toward sustainability and energy security, understanding this energy mix is essential for informed policy and progress toward cleaner energy.\n\nIn this lesson, we will use data from the U.S. [Energy Information Administration (EIA)](https://www.eia.gov) about [operable electric generating plants in the United States by energy source, as of May 2023](https://atlas.eia.gov/datasets/eia::power-plants/about). The dataset includes information on plant types and energy sources, offering insights into the diversity of power sources—from fossil fuels to renewables—that supply electricity nationwide. The dataset's metadata can be [accessed here](https://eia.maps.arcgis.com/sharing/rest/content/items/bf5c5110b1b944d299bb683cdbd02d2a/info/metadata/metadata.xml?format=default&output=html)\n<!-- TODO: add citation -->\n<!-- TODO: add image -->\nThe EIA data on electric plants has been downloaded as a CSV and reprojected into the EPSG:4269 CRS for this lesson. It can be accessed [here](https://github.com/carmengg/eds-220-book/blob/main/data/power_plants_epsg4269.csv).\n\n<!-- TODO: column descriptions: lat lon, -->\n\nAdditionally, we will use a [TIGER shapefile of the US states from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). \n[TIGER](https://en.wikipedia.org/wiki/Topologically_Integrated_Geographic_Encoding_and_Referencing) stands for Topologically Integrated Geographic Encoding and Referencing. This used to be the data format the US Census distributed geospatial data, but since 2008 TIGER files are converted to shapefiles. You can view the metadata for all the TIGER shapefiles [here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). \n\nFollow these steps to download shapefile with the United States' states:\n\n1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on \"Web Interface\"\n2. For year, select 2022, and for layer type select \"States (and equivalent)\". Click submit. \n3. Click on \"Download national file\".\n\n\nThe column descriptions for the US states shapefile are:\n\n![Source: TIGER/Line Shapefiles Technical Documentation](/book/images/lesson-11/tiger_shp_columns.png)\n\n\n## CSV to `geopandas.GeoDataFrame`\n\nLet's start by importing packages and updating viewing options:\n\n\n::: {#078238a8 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\n\nimport pandas as pd\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n\n# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n```\n:::\n\n\nNext, we import the power plants dataset.  In this lesson, we have downloaded the data into a `data/` folder in the same level as our notebook.\n\n::: {#17ff4fe0 .cell execution_count=2}\n``` {.python .cell-code}\n# Import power plants data\nURL = 'https://raw.githubusercontent.com/carmengg/eds-220-book/refs/heads/main/data/power_plants_epsg4269.csv'\npower_plants = pd.read_csv(URL)\n\n# Simpify column names\npower_plants.columns = power_plants.columns.str.lower()\n\npower_plants.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unnamed: 0</th>\n      <th>objectid</th>\n      <th>plant_code</th>\n      <th>plant_name</th>\n      <th>utility_id</th>\n      <th>utility_name</th>\n      <th>sector_name</th>\n      <th>street_address</th>\n      <th>city</th>\n      <th>county</th>\n      <th>state</th>\n      <th>zip</th>\n      <th>primsource</th>\n      <th>source_desc</th>\n      <th>tech_desc</th>\n      <th>install_mw</th>\n      <th>total_mw</th>\n      <th>bat_mw</th>\n      <th>bio_mw</th>\n      <th>coal_mw</th>\n      <th>geo_mw</th>\n      <th>hydro_mw</th>\n      <th>hydrops_mw</th>\n      <th>ng_mw</th>\n      <th>nuclear_mw</th>\n      <th>crude_mw</th>\n      <th>solar_mw</th>\n      <th>wind_mw</th>\n      <th>other_mw</th>\n      <th>source</th>\n      <th>period</th>\n      <th>longitude</th>\n      <th>latitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>11570</td>\n      <td>1</td>\n      <td>Sand Point</td>\n      <td>63560</td>\n      <td>TDX Sand Point Generating, LLC</td>\n      <td>Electric Utility</td>\n      <td>100 Power Plant Way</td>\n      <td>Sand Point</td>\n      <td>Aleutians East</td>\n      <td>Alaska</td>\n      <td>99661.0</td>\n      <td>petroleum</td>\n      <td>Petroleum = 1.3 MW, Wind = 0.4 MW</td>\n      <td>Petroleum Liquids; Onshore Wind Turbine;</td>\n      <td>3.7</td>\n      <td>1.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.3</td>\n      <td>NaN</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-160.497222</td>\n      <td>55.339722</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>11571</td>\n      <td>2</td>\n      <td>Bankhead Dam</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>19001 Lock 17 Road</td>\n      <td>Northport</td>\n      <td>Tuscaloosa</td>\n      <td>Alabama</td>\n      <td>35476.0</td>\n      <td>hydroelectric</td>\n      <td>Hydroelectric = 53 MW</td>\n      <td>Conventional Hydroelectric</td>\n      <td>53.9</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>53.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-87.356823</td>\n      <td>33.458665</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>11572</td>\n      <td>3</td>\n      <td>Barry</td>\n      <td>195</td>\n      <td>Alabama Power Co</td>\n      <td>Electric Utility</td>\n      <td>North Highway 43</td>\n      <td>Bucks</td>\n      <td>Mobile</td>\n      <td>Alabama</td>\n      <td>36512.0</td>\n      <td>natural gas</td>\n      <td>Coal = 1118.5 MW, Natural Gas = 1296.2 MW</td>\n      <td>Conventional Steam Coal; Natural Gas Fired Com...</td>\n      <td>2569.5</td>\n      <td>2414.7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1118.5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1296.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>EIA-860, EIA-860M and EIA-923</td>\n      <td>202305.0</td>\n      <td>-88.010300</td>\n      <td>31.006900</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!--TO DO: Need to drop the unnamed column--> \n\nThe power plants file is a CSV. Unlike shapefiles or other geospatial file formats, `geopandas` doesn't have a way to extract a geometry column from a CSV file, so we will need to create this geometry manually. \n\nTo do so we will use the longitude and latitude columns in the CSV, these indicate the location of the power plants in the NAD83 CRS (EPSG:4269).\nWe can use this information to create a new `geopandas.GeoDataFrame` from the `pandas.DataFrame` using the `geopandas` function [`points_from_xy()`](https://geopandas.org/en/stable/docs/reference/api/geopandas.points_from_xy.html):\n\n::: {#465d77ac .cell execution_count=3}\n``` {.python .cell-code}\n# Create points from latitude and longitude\npoints = gpd.points_from_xy(power_plants.longitude, \n                            power_plants.latitude)\n\n# Create geodataframe\npower_plants = gpd.GeoDataFrame(power_plants,    # Data\n                                geometry=points, # Specify geometry column\n                                crs='EPSG:4269'  # Specify CRS\n                                )\n```\n:::\n\n\nLet's check that we now have a `geometry` column:\n\n::: {#ca95c86d .cell execution_count=4}\n``` {.python .cell-code}\npower_plants['geometry']\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n0        POINT (-160.49722 55.33972)\n1         POINT (-87.35682 33.45867)\n2         POINT (-88.01030 31.00690)\n3         POINT (-86.28306 32.58389)\n4        POINT (-106.37500 31.75690)\n                    ...             \n12004     POINT (-82.37595 35.38014)\n12005     POINT (-79.36770 36.00932)\n12006     POINT (-79.73631 35.27343)\n12007     POINT (-73.91048 42.87657)\n12008     POINT (-77.27590 41.83800)\nName: geometry, Length: 12009, dtype: geometry\n```\n:::\n:::\n\n\nWe can now also access information about the CRS of our power plants dataset:\n\n::: {#e7d3863e .cell execution_count=5}\n``` {.python .cell-code}\n# Explore CRS\nprint('CRS: ', power_plants.crs)\nprint('ellipsoid: ', power_plants.crs.ellipsoid)\nprint('datum: ', power_plants.crs.datum)\nprint('is the CRS geographic?: ', power_plants.crs.is_geographic)\nprint('is the CRS projected?: ', power_plants.crs.is_projected)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCRS:  EPSG:4269\nellipsoid:  GRS 1980\ndatum:  North American Datum 1983\nis the CRS geographic?:  True\nis the CRS projected?:  False\n```\n:::\n:::\n\n\nWith the `geometry` column and CRS, we can plot our dataset:\n\n::: {#6397183b .cell execution_count=6}\n``` {.python .cell-code}\n# Plot points and color them according to values in primsource column\npower_plants.plot(column='primsource')  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/galaz-garcia/opt/anaconda3/envs/mpc-env/lib/python3.11/site-packages/geopandas/plotting.py:732: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(values.dtype):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-11-csv-to-geo_files/figure-html/cell-7-output-2.png){width=580 height=408}\n:::\n:::\n\n\n## Import shapefile\n\nLet's import the TIGER shapefile\n\n::: {#1fd27d37 .cell execution_count=7}\n``` {.python .cell-code}\n# Import states data\nfp = os.path.join('data','tl_2022_us_state','tl_2022_us_state.shp')\nstates = gpd.read_file(fp)\n\n# Simplify column names \nstates.columns = states.columns.str.lower()\n\nstates.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>5</td>\n      <td>54</td>\n      <td>01779805</td>\n      <td>54</td>\n      <td>WV</td>\n      <td>West Virginia</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>62266456923</td>\n      <td>489045863</td>\n      <td>+38.6472854</td>\n      <td>-080.6183274</td>\n      <td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>5</td>\n      <td>12</td>\n      <td>00294478</td>\n      <td>12</td>\n      <td>FL</td>\n      <td>Florida</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>138962819934</td>\n      <td>45971472526</td>\n      <td>+28.3989775</td>\n      <td>-082.5143005</td>\n      <td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>01779784</td>\n      <td>17</td>\n      <td>IL</td>\n      <td>Illinois</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>143778515726</td>\n      <td>6216539665</td>\n      <td>+40.1028754</td>\n      <td>-089.1526108</td>\n      <td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nand obtain some preliminary geospatial information about the states geodataframe:\n\n::: {#b7829fa3 .cell execution_count=8}\n``` {.python .cell-code}\nprint(states.crs)\nstates.plot()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEPSG:4269\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-11-csv-to-geo_files/figure-html/cell-9-output-2.png){width=566 height=183}\n:::\n:::\n\n\n## `for` loops for DRY code\nFor this lesson, we want to use only the contiguous states. As seen in the plot, the data covers a bigger extension. From the TIGER shapefiles metadata we know that:\n \n> In addition to the fifty states, the Census Bureau treats the District of Columbia, Puerto Rico, and the Island areas (American Samoa, the Commonwealth of the Northern Mariana Islands, Guam, and the U.S. Virgin Islands) as statistical equivalents of states for the purpose of data presentation. \n\n:::{.callout-tip}\n## Check-in\nIn [this US Census Bureau file](https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf) we can see what each code for the region, division, and state corresponds to. What are the unique values for region, division, or state codes in the data and which should should we select to keep ponly states in the contiguous US?\n\n<!--\n States corresponds to regions 1 through 4. \n However, there's also a region code 9.\n Hawaii = state code 15\n Alaska = satate code 02\n Need to exclude: region code 9 ans state codes 15 and 02\n -->\n:::\n\n These should be numeric codes, so we can start by updating the corresponding columns in the states geo-dataframe:\n\n::: {#8f3fa4f7 .cell execution_count=9}\n``` {.python .cell-code}\n code_cols = ['region', 'division', 'statefp']\n\n# Check whether codes columns are strings\n for column in code_cols: \n    print(column, 'is string dtype?', is_string_dtype(states[column]))\n\n # Update code columns into integers\nfor column in code_cols:\n    states[column] = states[column].astype('int')\n\n# Check whether code columns are numeric\nprint('\\n','After update:' )\nfor column in code_cols:\n    print(column, 'is numeric dtype?', is_numeric_dtype(states[column]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nregion is string dtype? True\ndivision is string dtype? True\nstatefp is string dtype? True\n\n After update:\nregion is numeric dtype? True\ndivision is numeric dtype? True\nstatefp is numeric dtype? True\n```\n:::\n:::\n\n\nRemember `for` loops execute a code of blocked a fixed number of times, iterating over a set of objects. In this case, we iterate over the list of column names `code_cols = ['region', 'division', 'statefp']`.\n\n:::{.callout-caution}\n## DRY code\nNotice that we could have initially checked whether all the code columns were of string data type by using the following code:\n\n```python\nprint(column, 'is string dtype?', is_string_dtypes(states['region']))\nprint(column, 'is string dtype?', is_string_dtypes(states['division']))\nprint(column, 'is string dtype?', is_string_dtypes(states['statefp']))\n```\nHowever, this is inconvenient as it repeats the same pieces of code, only changing the column name. Instead, using the `for` loop allows us to succintly print the same information:\n```python\ncode_cols = ['region', 'division', 'statefp']\n\nfor column in code_cols: \n    print(column, 'is string dtype?', is_string_dtypes(states[column]))\n```\n**Don't Repeat Yourself (DRY)** is a core programming principle that encourages on reducing redundancy and consolidating repeated logic. Try implementing it as much as possible! If you need to repeat the \"same\" code more than twice, you likely need a for loop.\n:::\n\n## Data selection\n\nNow we are ready to select our data:\n\n::: {#be276d16 .cell execution_count=10}\n``` {.python .cell-code}\ncontiguous = states[(states.region!=9) & (~states.statefp.isin([2,15]))]\n```\n:::\n\n\nIn this code we used the syntax \n```python\n~df.column.isin([val1, val2, val3])\n```\nThe `~` tilde symbol is used in Python to negate a statement. \nSo the previous line could be read as \"the values in `df`'s column which are *not* in the list `[val1, val2, val3]`.\"\n\n::: {.callout-tip}\n## Check-in\nSelect the data in the `power_plants` data frame for the contiguous US states. \n<!--\n\n::: {#bdeec702 .cell execution_count=11}\n``` {.python .cell-code}\npower_plants = power_plants[~power_plants.state.isin(['Puerto Rico','Hawaii','Alaska'])]\n```\n:::\n\n\n-->\n:::\n\n## Plotting\n\nBefore we plot our data, let's make sure they are in the same CRS:\n\n::: {#4ad7b88e .cell execution_count=12}\n``` {.python .cell-code}\ncontiguous.crs == power_plants.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#89883945 .cell execution_count=13}\n``` {.python .cell-code code-fold=\"true\"}\nfig, ax = plt.subplots(figsize=(9, 5)) # Update figure size\n\n# Remove the axis for a cleaner map\nax.axis('off')\n\n# Title for the plot\nax.set_title('Operable electric generating plants in the contiguous United States', \n              fontsize=15)\n\n# Add states\ncontiguous.plot(ax=ax,\n               color='none',\n               edgecolor='#362312')\n\n# Add electric power plants colored by energy source\npower_plants.plot(ax=ax, \n                  column='primsource',\n                  legend=True,\n                  markersize=4,\n                  cmap='tab20',\n                  alpha=0.5,\n                  legend_kwds={\n                      'title': 'Primary energy source',\n                      'title_fontsize': 'small',\n                      'fontsize': 'small',\n                      'loc': 'upper left',\n                      'bbox_to_anchor': (0, 0),\n                      'ncol': 6  \n                  })\n                  \nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/galaz-garcia/opt/anaconda3/envs/mpc-env/lib/python3.11/site-packages/geopandas/plotting.py:732: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if pd.api.types.is_categorical_dtype(values.dtype):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](lesson-11-csv-to-geo_files/figure-html/cell-14-output-2.png){width=698 height=463}\n:::\n:::\n\n\nIn the map above we specified the figure size when creating the plot. This size is given in inches, but [can be updated to other units](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/figure_size_units.html) (pixels, cm, etc). \n\nWe also controlled the legend location using `loc` and `bbox_to_anchor` in the `legend_kwds`:\n\n- `loc` indicates the corner of the legend we want to use for placement, and\n- `bbox_to_anchor` is a tuple with coordinates indicating where to place the corner specified in `loc` relative to the axes. Values between 0 and 1 are within the axes.\n\n`matplotlib` uses a variety of ways to locate elements within the graph and it is best to check the documentation to not spend too much time fidling with locations.\n\n<!--\n\nhttps://www.flexprojector.com\n\nhttps://www.earthdatascience.org/courses/scientists-guide-to-plotting-data-in-python/plot-spatial-data/customize-vector-plots/python-customize-map-legends-geopandas/\n\nhttps://stackoverflow.com/questions/74143732/customize-legend-labels-in-geopandas\n-->\n\n<!-- TODO: add exercise with for and plot \nunique_sources = power_plants['primsource'].unique()\nfig, axes = plt.subplots(nrows=1, ncols=len(unique_sources), figsize=(15, 5))\n\n# Loop through each energy source and plot it in a separate subplot\nfor ax, source in zip(axes, unique_sources):\n    subset = power_plants[power_plants['primsource'] == source]\n    subset.plot(ax=ax, markersize=5)\n    ax.set_title(source)\n    ax.axis('off')  # Remove axes for a cleaner look\n\nplt.suptitle(\"Power Plants by Primary Energy Source\")\nplt.tight_layout()\nplt.show()\n\n\n-->\n\n",
    "supporting": [
      "lesson-11-csv-to-geo_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}