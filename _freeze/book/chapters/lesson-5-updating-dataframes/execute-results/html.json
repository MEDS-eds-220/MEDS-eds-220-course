{
  "hash": "1ea8c908c80ed45bec138e46e6e47b03",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntoc-title: In this lesson\nfig-cap-location: margin\ntitle: Adding a single column...\n---\n\n\n\n\n\n\n# 4 Updating data frames\n\nIn this lesson we will introduce methods for updating a `pandas.DataFrame`, these include adding and removing columns and updating specific values. \n\n<!--\n## Learning objectives\n\n**TODO**\n\nBy the end of this lesson students will be able to:\n-->\n\n## About the data\n\nFor this section we will use the  Palmer Penguins dataset @palmerpenguins developed by Drs. Allison Horst, Alison Hill and Kristen Gorman. This dataset contains size measurements for three penguin species in the Palmer Archipelago, Antarctica  during 2007, 2008, and 2009. \n\n![The Palmer Archipelago penguins. Artwork by Dr. Allison Horst.](/book/images/lesson-5/penguins-logo.png)\n\nThe dataset has 344 rows and 8 columns. We can see the head of the dataset below:\n\n\n::: {#796693ca .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\nLet us start by importing the packages we will use in this lesson and loading the data:\n\n\n::: {#93f1bb4c .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport random  # Used for randomly sampling integers\n\n# Set the seed\nrandom.seed(42)\n\n# Import data\nURL = 'https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv'\npenguins = pd.read_csv(URL)\n```\n:::\n\n\n<!--\n:::{.callout-caution}\n**TODO** Explain seed.\n:::\n-->\n\n### ... using dictionary-like syntax\nThe simplest syntax to add a new column to a `pandas.DataFrame` is \n\n```python\ndf['new_col_name'] = new_column_values\n```\nwhere the `new_column_values` could be: \n\n- a `pandas.Series` or a `numpy.array` of the same length as the data frame, or\n- a single scalar.\n\nIf the column name exists, the existing column will be updated.\n\nRemember a `pandas.DataFrame` can be seen as a dictionary of its columns. This syntax for adding a new column to a `pandas.DataFrame` is the same as adding a new key-value pair to a dictionary:\n```python\n# Add a new key-value pair to a dictionary\ndict[new_key] = new_value\n```\n\n#### Example\n\nWe want to create a new column where the body mass is in kilograms instead of grams, then we need to divide each value in the `body_mass_g` by 1000. \n\n::: {#9cc9de48 .cell execution_count=3}\n``` {.python .cell-code}\n# Add new column body_mass_kg \npenguins['body_mass_kg'] = penguins['body_mass_g']/1000\n\n# Confirm the new column is in the data frame\nprint(\"body_mass_kg is in the data frame's columns: \", 'body_mass_kg' in penguins.columns)\n\n# Look at the new column\npenguins.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbody_mass_kg is in the data frame's columns:  True\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n      <td>3.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.80</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### ...using the `assign()` method\n\nWe can also create or update an existing column using the [`assign()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.assign.html) method for `pandas.DataFrames`. The general syntax is:\n```python\ndf = df.assign(new_col_name=new_column_values)\n```\nNotice the new column names are not strings, we declare them as if we were creating variables.\n\nThis way of creating a new column, unlike the dictionary-like syntax, does not modify the data frame in-place. This can be useful for chaining operations:\n\n::: {#347bc2b2 .cell execution_count=4}\n``` {.python .cell-code}\n(penguins.assign(bill_length_cm=penguins.bill_length_mm/10)\n        .plot(kind='scatter',\n              x='bill_length_cm', \n              y='body_mass_g')\n    )\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-5-updating-dataframes_files/figure-html/cell-5-output-1.png){width=602 height=429}\n:::\n:::\n\n\n### ...at a specific location\n\nThe new column was added by default at the end of the data frame. If we want to create a new column and insert it at a particular position we can use the data frame method [`insert()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.insert.html):\n```python\ndf.insert(loc=integer_index,  # Location of new column\n          column='new_col_name', \n          value=new_col_values)\n```\n\n#### Example\n\nLet's give each penguin observation a unique identifier as a three digit number and add this column at the beginning of the data frame.\n\n::: {#fa0b36cf .cell execution_count=5}\n``` {.python .cell-code}\n# Create random 3-digit codes\ncodes = random.sample(range(100,1000), len(penguins))  # Sampling w/o replacement\n\n# Insert codes at the front of data frame\npenguins.insert(loc=0,  # Index\n                column='id_code',\n                value=codes)\n        \npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>754</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n      <td>3.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>214</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.80</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>125</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>859</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>381</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!--\nMoving columns: pop, then insert\n\ndf.insert(0, 'name', df.pop('name'))\nhttps://stackoverflow.com/questions/35321812/move-column-in-pandas-dataframe\n\nInserting at a particular location.\ndf.columns.get_loc()\n-->\n\n\n## Adding multiple columns\n\nWe can also use the [`assign()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.assign.html) method to create or update multiple columns in the same call. The general syntax is:\n```python\ndf = df.assign(new_col1_name=new_col1_values, \n               new_col2_name=new_col2_values)\n```\nRemember this method does not modify the data frame, so you will need to reassign the output to the original data frame to update it.\n\n#### Example\n\nSuppose we want to add these new columns: \n\n- flipper length converted from mm to cm, and\n- a code representing the observer.\n\nWe can add these columns to `penguins` using `assign()`:\n\n::: {#49190c10 .cell execution_count=6}\n``` {.python .cell-code}\n# Create columns with observer codes and flipper length in cm\npenguins = penguins.assign(flipper_length_cm=penguins.flipper_length_mm/10, \n                           observer=random.choices(['A','B','C'],  # Sample with replacement\n                                                    k=len(penguins))\n                          )\n# Examine result\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_code</th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>754</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>214</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>125</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>859</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>381</td>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Removing columns\n\nWe can remove columns using the [`drop()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop.html) method for `pandas.Data.Frames`, the syntax is:\n```python\ndf = df.drop(columns=col_names)\n```\nwhere `col_names` can be a single column name (string) or a list of column names. Notice again that the `drop()` method does not modify the data frame in place, so you need to reassign the output.\n\n\n#### Example\n\nNow that we updated the units for flipper length and body mass, it makes sense to remove the previous columns to avoid duplicate information. We can do this using `drop()`:\n\n::: {#6d23bf79 .cell execution_count=7}\n``` {.python .cell-code}\n# Remove duplicate length and mass measurements\npenguins = penguins.drop(columns=['flipper_length_mm','body_mass_g'])\n\n# Confirm result\nprint(penguins.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['id_code', 'species', 'island', 'bill_length_mm', 'bill_depth_mm',\n       'sex', 'year', 'body_mass_kg', 'flipper_length_cm', 'observer'],\n      dtype='object')\n```\n:::\n:::\n\n\n<!--\n## Reordering columns and updating names\n-->\n\n<!--\n:::{.callout-tip}\n## Check-in\n**TODO**\n:::\n-->\n\n## Updating values\n\nSometimes we want to update a specific value in our data frame. We'll review some methods and best practices to do that in this section. \n\n### A single value\nWe can access a single value in a `pandas.DataFrame` using the locators\n\n- [`at[]`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.at.html) to select by labels, or\n- [`iat[]`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.at.html) to select by position. \n\n\nThe syntax for `at[]` is:\n```python\ndf.at[single_index_value, 'column_name']\n```\nThink of `at[]` as the equivalent to `loc[]` when trying to access a single value.\n\n#### Example\nFor this example, let's first update the index of the data frame to be the `id_code` column:\n\n::: {#3239259d .cell execution_count=8}\n``` {.python .cell-code}\npenguins = penguins.set_index('id_code')\npenguins\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n    </tr>\n    <tr>\n      <th>id_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>754</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>male</td>\n      <td>2007</td>\n      <td>3.750</td>\n      <td>18.1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.800</td>\n      <td>18.6</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>125</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.250</td>\n      <td>19.5</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>859</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>381</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.450</td>\n      <td>19.3</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>140</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>55.8</td>\n      <td>19.8</td>\n      <td>male</td>\n      <td>2009</td>\n      <td>4.000</td>\n      <td>20.7</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>43.5</td>\n      <td>18.1</td>\n      <td>female</td>\n      <td>2009</td>\n      <td>3.400</td>\n      <td>20.2</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>969</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>49.6</td>\n      <td>18.2</td>\n      <td>male</td>\n      <td>2009</td>\n      <td>3.775</td>\n      <td>19.3</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>635</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.8</td>\n      <td>19.0</td>\n      <td>male</td>\n      <td>2009</td>\n      <td>4.100</td>\n      <td>21.0</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>883</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.2</td>\n      <td>18.7</td>\n      <td>female</td>\n      <td>2009</td>\n      <td>3.775</td>\n      <td>19.8</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n<p>344 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nIf we want to know what was the bill length of the penguin which has ID number 859, we can directly access that information using `at[]`:\n\n::: {#f116a3b0 .cell execution_count=9}\n``` {.python .cell-code}\n# Check bill length of penguin with ID 859\npenguins.at[859, 'bill_length_mm']\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nnan\n```\n:::\n:::\n\n\nWe get this bill length is an NA. Maybe we want to update it to 38.3 mm. We can do this with `at[]` too:\n\n::: {#31a2587c .cell execution_count=10}\n``` {.python .cell-code}\n# Correct bill length value of penguin with ID 859\npenguins.at[859,'bill_length_mm'] = 38.3\n\n# Confirm value was updated\npenguins.loc[859]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nspecies                 Adelie\nisland               Torgersen\nbill_length_mm            38.3\nbill_depth_mm              NaN\nsex                        NaN\nyear                      2007\nbody_mass_kg               NaN\nflipper_length_cm          NaN\nobserver                     A\nName: 859, dtype: object\n```\n:::\n:::\n\n\nIf we want to access or update a single value by position we use the `iat[]` locator. The syntax for `iat[]` is:\n```python\ndf.iat[index_integer_location, column_integer_location]\n```\nThis is the same way you would index entries in a matrix. You may find it useful to think of `iat[]` as the equivalent of `iloc[]` to access a single value in the data frame.\n\nObtaining the location of a specific column within the column list can be prone to error if we do it 'by hand'. If we need to obtain this index, we can dynamically get the location this way:\n```python\npenguins.columns.get_loc('column_name')\n```\n\n:::{.callout-tip}\n## Check-in\na. Obtain the location of the `bill_length_mm` column.\n\nb. Use `iat[]` to access the same bill length value for the penguin with ID 859 and revert it back to an NA. Confirm your update using `iloc[]`.\n:::\n\n<!--\n\n::: {#a6ee547f .cell execution_count=11}\n``` {.python .cell-code}\n# Set to NaN using iat\nbill_length_index = penguins.columns.get_loc('bill_length_mm')\npenguins.iat[3,bill_length_index] = np.nan\n\n# Confirm using iloc\npenguins.iloc[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nspecies                 Adelie\nisland               Torgersen\nbill_length_mm             NaN\nbill_depth_mm              NaN\nsex                        NaN\nyear                      2007\nbody_mass_kg               NaN\nflipper_length_cm          NaN\nobserver                     A\nName: 859, dtype: object\n```\n:::\n:::\n\n\n-->\n\n### Multiple values in a column\n\nWhat if we want to update multiple values in a column? We'll cover two cases: with a condition on the column values and by selecting a few values to update. \n\n\n#### Using a condition \n\nOften, we need to create a new column where the new values depend on conditions on another column. \n\n#### Example\n\nWe want to classify the Palmer penguins such that :\n\n- penguins with body mass less than 3kg as small, \n- penguins with body mass greater or equal than 3 kg but less than 5 kg as medium, \n- and those with body mass greater or equal than 5 kg as large. \n\nOne way to add this information in a new column is using the [`numpy.select()`](https://numpy.org/doc/stable/reference/generated/numpy.select.html) function:\n\n::: {#f29fc822 .cell execution_count=12}\n``` {.python .cell-code}\n# Create a list with the conditions\nconditions = [penguins.body_mass_kg < 3, \n              (3 <= penguins.body_mass_kg) & (penguins.body_mass_kg < 5),\n              5 <= penguins.body_mass_kg]\n\n# Create a list with the choices\nchoices = [\"small\",\n           \"medium\",\n           \"large\"]\n\n# Add the selections using np.select\npenguins['size'] = np.select(conditions, \n                             choices, \n                             default=np.nan) # Value for anything outside conditions\n\n# Display the updated data frame to confirm the new column\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n    </tr>\n    <tr>\n      <th>id_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>754</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>male</td>\n      <td>2007</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>C</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>A</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>125</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>C</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>859</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>381</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>female</td>\n      <td>2007</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!-- \nhttps://stackoverflow.com/questions/54653356/case-when-function-from-r-to-python\n\nAdd np.where and pd.cut()\n-->\n\n#### By selecting values\n\nWhen we only want to update some values in a column we can do this by selecting this data using `loc` (if selecting by labels) or `iloc` (if selecting by position). The general syntax for updating data with `loc` is:\n```python\ndf.loc[row_selection, column_name] = new_values\n```\nwhere \n\n- `row_selection` is the rows we want to update, this can be any expression that gives us a boolean `pandas.Series`, \n- `col_name` is a single column name, and \n- `new_values` is the new value or values we want. If using multiple values, then `new_values` must be of the same length as the number of rows selected. \n\nUsing `loc[]` in assignment modifies the data frame directly without the need for reassignment.\n\n#### Example\n\nWe want to update the \"male\" values in the sex column to \"M\".\n\n::: {#7f3bf24c .cell execution_count=13}\n``` {.python .cell-code}\n# Select rows with sex=male and simplify values in 'sex' column\npenguins.loc[penguins.sex=='male', 'sex'] = 'M'\n\n# Check changes in 'sex' column specifically\nprint(penguins['sex'].unique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['M' 'female' nan]\n```\n:::\n:::\n\n\n### Best practices\n\nSuppose we want to similarly update the \"female\" values in the `sex` column to \"F\". This is an example of another way we might try to do it:\n\n::: {#09af0067 .cell execution_count=14}\n``` {.python .cell-code}\n# Select rows where 'sex' is 'female' and then attempt to update 'sex' column values\npenguins[penguins.sex=='female']['sex'] = 'F' # This raises SettingWithCopyWarning\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/gm/chd1kps96_g7xdxyfw150wm80000gp/T/ipykernel_7781/534867616.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  penguins[penguins.sex=='female']['sex'] = 'F' # This raises SettingWithCopyWarning\n```\n:::\n:::\n\n\nWhen we select the data we want to update using **chained indexing** (two selection brackets `[][]`) instead of `loc[]` we get a `SettingWithCopyWarning`. With this warning, `pandas` is trying to alert us to a potential bug. In this case, the bug is that we actually did not update our data frame:\n\n::: {#73620d12 .cell execution_count=15}\n``` {.python .cell-code}\n# Confirm values were updated\nprint(penguins['sex'].unique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['M' 'female' nan]\n```\n:::\n:::\n\n\n::: {.callout-caution}\n## Avoid chained indexing `[][]` and use `.loc[]`\nThe `SettingWithCopyWarning` often arises from chained indexing:\n```python\ndf[df['col'] == value]['col2'] = new_value\n```\nIn the words of the [`pandas` documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#why-does-assignment-fail-when-using-chained-indexing):\n\n> assigning to the product of chained indexing has inherently unpredictable results.\n\nThe best practice is to use `.loc[]` instead:\n```python\ndf.loc[df['col'] == value,'col2'] = new_value\n```\n`.loc[]` is generally more readable and explicitly modifies the original data frame.\n\nWarnings in Python are intended to be helpful and can prevent unintended data modification errors! \n:::\n\n:::{.callout-tip}\n## Check-in\nUpdate the \"female\" values in the `penguins` data frame to \"F\". Don't use chained indexing. Confirm that the values in the column were updated.\n:::\n<!--\n\n::: {#b5fc3e13 .cell execution_count=16}\n``` {.python .cell-code}\n# no chained indexing in assignment = no warning\npenguins.loc[penguins.sex=='female','sex'] = 'F'\n\n# notice the values were updated now\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n    </tr>\n    <tr>\n      <th>id_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>754</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>M</td>\n      <td>2007</td>\n      <td>3.75</td>\n      <td>18.1</td>\n      <td>C</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>F</td>\n      <td>2007</td>\n      <td>3.80</td>\n      <td>18.6</td>\n      <td>A</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>125</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>F</td>\n      <td>2007</td>\n      <td>3.25</td>\n      <td>19.5</td>\n      <td>C</td>\n      <td>medium</td>\n    </tr>\n    <tr>\n      <th>859</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>A</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>381</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>F</td>\n      <td>2007</td>\n      <td>3.45</td>\n      <td>19.3</td>\n      <td>B</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n-->\n\nTo understand why the `SettingWithCopyWarning` pops up we need to understand that some `pandas` operations return a view to your data, while others return a copy of your data.\n\n- **Views** are actual subsets of the original data, when we update them, we are modifying the original data frame. \n\n- **Copies** are unique objects, independent of our original data frames. When we update a copy we are not modifying the original data frame. \n\n<!-- MAKE SOME DIAGRAMS LIKE DATAQUEST https://www.dataquest.io/blog/settingwithcopywarning/ -->\n\n![](/book/images/lesson-5/view-copy.png)\n\nDepending on what we are trying to do we might want to modify the original data frame or we might want to modify a copy. \n\n![](/book/images/lesson-5/modify-view-copy.png)\n\nPandas raises the `SettingWithCopyWarning`  because it tries to balance memory efficiency with data integrity. By default, it avoids creating unnecessary copies, but sometimes it’s ambiguous whether a subset should be independent (a copy) or connected (a view).\n\n#### Example\n\nWe only want to use data from Biscoe island and, after doing some analyses, we want to add a new column to it:\n\n::: {#a3f99c2b .cell execution_count=17}\n``` {.python .cell-code}\n# Select penguins from Biscoe island\nbiscoe = penguins[penguins.island=='Biscoe']\n\n# ... Other analyses ...\n\n# Add a column\nbiscoe['sample_col'] = 100  # This raises SettingWithCopyWarning\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/gm/chd1kps96_g7xdxyfw150wm80000gp/T/ipykernel_7781/844154415.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  biscoe['sample_col'] = 100  # This raises SettingWithCopyWarning\n```\n:::\n:::\n\n\n`pandas` is trying to alert you that it is unsure about whether `biscoe` is a view or a copy and it's unclear whether an of our code will modify our dataset or not.\n\nTo fix this we can **take control of the copy-view situation and explicitly ask for a copy of the dataset when subsetting the data**. Use the [`copy()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.copy.html) method to do this:\n\n::: {#0c767cde .cell execution_count=18}\n``` {.python .cell-code}\n# Make sure you get an independent data frame that won't alter the original\nbiscoe = penguins[penguins.island=='Biscoe'].copy()\n\n# Add a column, no warning\nbiscoe['sample_col'] = 100\n```\n:::\n\n\nNow we are sure we did not modify our initial data, but rather the `biscoe` data frame:\n\n::: {#467c9909 .cell execution_count=19}\n``` {.python .cell-code}\n# Confirm the new column is in our subset data\nbiscoe.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>sex</th>\n      <th>year</th>\n      <th>body_mass_kg</th>\n      <th>flipper_length_cm</th>\n      <th>observer</th>\n      <th>size</th>\n      <th>sample_col</th>\n    </tr>\n    <tr>\n      <th>id_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>338</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>37.8</td>\n      <td>18.3</td>\n      <td>F</td>\n      <td>2007</td>\n      <td>3.40</td>\n      <td>17.4</td>\n      <td>A</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>617</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>37.7</td>\n      <td>18.7</td>\n      <td>M</td>\n      <td>2007</td>\n      <td>3.60</td>\n      <td>18.0</td>\n      <td>C</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>716</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>35.9</td>\n      <td>19.2</td>\n      <td>F</td>\n      <td>2007</td>\n      <td>3.80</td>\n      <td>18.9</td>\n      <td>C</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>127</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>38.2</td>\n      <td>18.1</td>\n      <td>M</td>\n      <td>2007</td>\n      <td>3.95</td>\n      <td>18.5</td>\n      <td>B</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>674</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>38.8</td>\n      <td>17.2</td>\n      <td>M</td>\n      <td>2007</td>\n      <td>3.80</td>\n      <td>18.0</td>\n      <td>C</td>\n      <td>medium</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#78b63278 .cell execution_count=20}\n``` {.python .cell-code}\n# Confirm that original data was not modified\nprint('sample_column' in penguins.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\n```\n:::\n:::\n\n\nThe `SettingWithCopyWarning` can be tricky, there are also false positives and false negatives. Avoiding chained indexing and making a copy of your data frame subset when needed and possible will save you from the usual pitfalls! \n\nTo learn more about the `SettingWithCopyWarning`, these are some articles that go into more depth:\n\n📖 [`pandas` Documentation -  Returning a view versus a copy](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy)\n\n📖 [Real Python-  SettingWithCopyWarning in pandas: Views vs Copies](https://realpython.com/pandas-settingwithcopywarning/#reader-comments)\n\n📖 [Dataquest - SettingwithCopyWarning: How to Fix This Warning in Pandas](https://www.dataquest.io/blog/settingwithcopywarning/)\n\n",
    "supporting": [
      "lesson-5-updating-dataframes_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}