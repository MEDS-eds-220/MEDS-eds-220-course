{
  "hash": "f9441bc100f4670be2ddee726acc6f17",
  "result": {
    "engine": "jupyter",
    "markdown": "<!--\nIgnore specific warnings in render\n\n::: {#3f9ac0b2 .cell execution_count=1}\n``` {.python .cell-code}\nimport shapely\nimport warnings\nfrom shapely.errors import ShapelyDeprecationWarning\n\nwarnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning) \nwarnings.filterwarnings(\"ignore\", message=\"is_categorical_dtype is deprecated\")\n```\n:::\n\n\n-->\n\n# 12 Clipping\n\nIn this lesson we will learn how to to clip different geometries.\n\n## About the data\n\nWe will use three datasets in this lesson. \n\nThe first dataset is a [TIGER shapefile of the US states from the United States Census Bureau](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341). Follow these steps to download shapefile with the United States' states:\n\n1. At the bottom of the [2022 page](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.2022.html#list-tab-790442341), under Download, click on \"Web Interface\"\n2. For year, select 2022, and for layer type select \"States (and equivalent)\". Click submit. \n3. Click on \"Download national file\".\n\nYou can check the [metadata for all the TIGER shapefiles here](https://www.census.gov/programs-surveys/geography/technical-documentation/complete-technical-documentation/tiger-geo-line.html). \nThe columns for this shapefile are:\n\n![Source: TIGER/Line Shapefiles Technical Documentation](/book/images/lesson-11/tiger_shp_columns.png){width=\"70%\"}\n\nThe second dataset we'll use is [Natural Earth's simple medium scale populated places dataset](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/). We can obtain this dataset by downloading the shapefile (choose the one that says \"simple (less columns)\").\n\nThe third dataset we'll use is [Natural Earth's road dataset](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/roads/). \nWe can obtain this dataset by downloading the shapefile \n\nWe will combine these datasets to create the following map of infrastructure in Alaska:\n\n![](/book/images/lesson-13/alaska.png)\n\nFor these notes, all the data is inside a `data/` directory at the same level as the notebook. \n\n## Import data\n\nLet's start by loading our libraries and then importing the datasets we will use.\n<!--\nReading in states shapefile from a different directory\n\n::: {#928d3940 .cell execution_count=2}\n``` {.python .cell-code}\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\n\nfrom shapely.geometry import box  # To create polygon bounding box\n\npd.set_option(\"display.max.columns\", None)\n\n# -------------------------------------\n# Import and simplify states polygons\nstates = gpd.read_file('/Users/galaz-garcia/Documents/MEDS/MEDS-eds-220-course/book/chapters/lesson-11-csv-to-geodataframe/data/tl_2022_us_state/tl_2022_us_state.shp')\nstates.columns = states.columns.str.lower()\n\n# Import Natural Earth populated places points\nplaces = gpd.read_file(os.path.join('data',\n                                    'ne_50m_populated_places',\n                                    'ne_50m_populated_places.shp')\n                                    )\n\n# Import ferry routes lines\nroads = gpd.read_file(os.path.join('data',\n                                   'ne_10m_roads',\n                                   'ne_10m_roads.shp')\n                                   )\n```\n:::\n\n\n-->\n\n```python\n\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\n\nfrom shapely.geometry import box  # To create polygon bounding box\n\npd.set_option(\"display.max.columns\", None)\n\n# -------------------------------------\n# Import and simplify states polygons\nstates = gpd.read_file(os.path.join('data',\n                                    'tl_2022_us_state',\n                                    'tl_2022_us_state.shp')\n                                    )\n\n# Import Natural Earth populated places points\nplaces = gpd.read_file(os.path.join('data',\n                                    'ne_50m_populated_places_simple',\n                                    'ne_50m_populated_places_simple.shp')\n                                    )\n\n# Import ferry routes lines\nroads = gpd.read_file(os.path.join('data',\n                                   'ne_10m_roads',\n                                   'ne_10m_roads.shp')\n                                   )\n```\n\n:::{.callout-tip}\n## Check-in\nUse a `for` loop to iterate over the three geo-dataframes we imported and change their column names to lower caps.\n\n<!--\n\n::: {#5e845a48 .cell execution_count=3}\n``` {.python .cell-code}\nfor df in [states, places, roads]:\n    df.columns = df.columns.str.lower()\n```\n:::\n\n\n-->\n:::\n\n## Prepare Alaska multipolygon\n\nLet's start by taking taking a look at our `states` geo-dataframe. \nSince this is a geospatial dataset, exploration should include *at least* checking the head of the dataset, plotting the data, and looking at its CRS.\n\n::: {#e8e41ceb .cell execution_count=4}\n``` {.python .cell-code}\nprint(f\"CRS: {states.crs}\")\n\nstates.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCRS: EPSG:4269\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>region</th>\n      <th>division</th>\n      <th>statefp</th>\n      <th>statens</th>\n      <th>geoid</th>\n      <th>stusps</th>\n      <th>name</th>\n      <th>lsad</th>\n      <th>mtfcc</th>\n      <th>funcstat</th>\n      <th>aland</th>\n      <th>awater</th>\n      <th>intptlat</th>\n      <th>intptlon</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>5</td>\n      <td>54</td>\n      <td>01779805</td>\n      <td>54</td>\n      <td>WV</td>\n      <td>West Virginia</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>62266456923</td>\n      <td>489045863</td>\n      <td>+38.6472854</td>\n      <td>-080.6183274</td>\n      <td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>5</td>\n      <td>12</td>\n      <td>00294478</td>\n      <td>12</td>\n      <td>FL</td>\n      <td>Florida</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>138962819934</td>\n      <td>45971472526</td>\n      <td>+28.3989775</td>\n      <td>-082.5143005</td>\n      <td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>01779784</td>\n      <td>17</td>\n      <td>IL</td>\n      <td>Illinois</td>\n      <td>00</td>\n      <td>G4000</td>\n      <td>A</td>\n      <td>143778515726</td>\n      <td>6216539665</td>\n      <td>+40.1028754</td>\n      <td>-089.1526108</td>\n      <td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#224e78b9 .cell execution_count=5}\n``` {.python .cell-code}\nstates.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-6-output-1.png){width=566 height=183}\n:::\n:::\n\n\nFor this lesson, we are intersted in plotting data only Alaska, se let's select this data:\n\n::: {#e8d5286d .cell execution_count=6}\n``` {.python .cell-code}\nalaska = states[states.name =='Alaska']\nalaska.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-7-output-1.png){width=566 height=103}\n:::\n:::\n\n\nNotice that the way the Alaska multipolygon is plotted under the NAD83/EPSG:4269 CRS separates the islands and unnaturally elongates the map. \nTo fix this, we will reproject the Alaska geo-dataframe to the EPSG:3338 CRS. \nThis CRS is a *projected* CRS, better suited for working with data from Alaska:\n\n![Source: [spatialreference.org](https://spatialreference.org/ref/epsg/3338/)](/book/images/lesson-13/epsg_3338.png)\n\n::: {#4a7ea170 .cell execution_count=7}\n``` {.python .cell-code}\n# Reproject to CRS optimized for Alaska\nalaska = alaska.to_crs('epsg:3338')\n\n# Inspect the new CRS\nprint('Is this CRS projected? ', alaska.crs.is_projected)\nalaska.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIs this CRS projected?  True\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<Projected CRS: EPSG:3338>\nName: NAD83 / Alaska Albers\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: United States (USA) - Alaska.\n- bounds: (172.42, 51.3, -129.99, 71.4)\nCoordinate Operation:\n- name: Alaska Albers (meters)\n- method: Albers Equal Area\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\n::: {#ef4389f4 .cell execution_count=8}\n``` {.python .cell-code}\nalaska.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-9-output-1.png){width=579 height=353}\n:::\n:::\n\n\n## Prepare populated places points\n\nLet's now explore the populated places data. \n\n::: {#d904a2b7 .cell execution_count=9}\n``` {.python .cell-code}\nprint(f\"CRS: {places.crs}\")\n\nplaces.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCRS: EPSG:4326\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scalerank</th>\n      <th>natscale</th>\n      <th>labelrank</th>\n      <th>featurecla</th>\n      <th>name</th>\n      <th>namepar</th>\n      <th>namealt</th>\n      <th>nameascii</th>\n      <th>adm0cap</th>\n      <th>capin</th>\n      <th>worldcity</th>\n      <th>megacity</th>\n      <th>sov0name</th>\n      <th>sov_a3</th>\n      <th>adm0name</th>\n      <th>adm0_a3</th>\n      <th>adm1name</th>\n      <th>iso_a2</th>\n      <th>note</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>pop_max</th>\n      <th>pop_min</th>\n      <th>pop_other</th>\n      <th>rank_max</th>\n      <th>rank_min</th>\n      <th>meganame</th>\n      <th>ls_name</th>\n      <th>max_pop10</th>\n      <th>max_pop20</th>\n      <th>max_pop50</th>\n      <th>max_pop300</th>\n      <th>max_pop310</th>\n      <th>max_natsca</th>\n      <th>min_areakm</th>\n      <th>max_areakm</th>\n      <th>min_areami</th>\n      <th>max_areami</th>\n      <th>min_perkm</th>\n      <th>max_perkm</th>\n      <th>min_permi</th>\n      <th>max_permi</th>\n      <th>min_bbxmin</th>\n      <th>max_bbxmin</th>\n      <th>min_bbxmax</th>\n      <th>max_bbxmax</th>\n      <th>min_bbymin</th>\n      <th>max_bbymin</th>\n      <th>min_bbymax</th>\n      <th>max_bbymax</th>\n      <th>mean_bbxc</th>\n      <th>mean_bbyc</th>\n      <th>timezone</th>\n      <th>un_fid</th>\n      <th>pop1950</th>\n      <th>pop1955</th>\n      <th>pop1960</th>\n      <th>pop1965</th>\n      <th>pop1970</th>\n      <th>pop1975</th>\n      <th>pop1980</th>\n      <th>pop1985</th>\n      <th>pop1990</th>\n      <th>pop1995</th>\n      <th>pop2000</th>\n      <th>pop2005</th>\n      <th>pop2010</th>\n      <th>pop2015</th>\n      <th>pop2020</th>\n      <th>pop2025</th>\n      <th>pop2050</th>\n      <th>min_zoom</th>\n      <th>wikidataid</th>\n      <th>wof_id</th>\n      <th>capalt</th>\n      <th>name_en</th>\n      <th>name_de</th>\n      <th>name_es</th>\n      <th>name_fr</th>\n      <th>name_pt</th>\n      <th>name_ru</th>\n      <th>name_zh</th>\n      <th>label</th>\n      <th>name_ar</th>\n      <th>name_bn</th>\n      <th>name_el</th>\n      <th>name_hi</th>\n      <th>name_hu</th>\n      <th>name_id</th>\n      <th>name_it</th>\n      <th>name_ja</th>\n      <th>name_ko</th>\n      <th>name_nl</th>\n      <th>name_pl</th>\n      <th>name_sv</th>\n      <th>name_tr</th>\n      <th>name_vi</th>\n      <th>ne_id</th>\n      <th>name_fa</th>\n      <th>name_he</th>\n      <th>name_uk</th>\n      <th>name_ur</th>\n      <th>name_zht</th>\n      <th>geonamesid</th>\n      <th>fclass_iso</th>\n      <th>fclass_us</th>\n      <th>fclass_fr</th>\n      <th>fclass_ru</th>\n      <th>fclass_es</th>\n      <th>fclass_cn</th>\n      <th>fclass_tw</th>\n      <th>fclass_in</th>\n      <th>fclass_np</th>\n      <th>fclass_pk</th>\n      <th>fclass_de</th>\n      <th>fclass_gb</th>\n      <th>fclass_br</th>\n      <th>fclass_il</th>\n      <th>fclass_ps</th>\n      <th>fclass_sa</th>\n      <th>fclass_eg</th>\n      <th>fclass_ma</th>\n      <th>fclass_pt</th>\n      <th>fclass_ar</th>\n      <th>fclass_jp</th>\n      <th>fclass_ko</th>\n      <th>fclass_vn</th>\n      <th>fclass_tr</th>\n      <th>fclass_id</th>\n      <th>fclass_pl</th>\n      <th>fclass_gr</th>\n      <th>fclass_it</th>\n      <th>fclass_nl</th>\n      <th>fclass_se</th>\n      <th>fclass_bd</th>\n      <th>fclass_ua</th>\n      <th>fclass_tlc</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>1</td>\n      <td>5</td>\n      <td>Admin-1 region capital</td>\n      <td>Bombo</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Bombo</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Bamunanika</td>\n      <td>UG</td>\n      <td>None</td>\n      <td>0.583299</td>\n      <td>32.533300</td>\n      <td>75000</td>\n      <td>21000</td>\n      <td>0.0</td>\n      <td>8</td>\n      <td>7</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>None</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>Q4940747</td>\n      <td>1141906025</td>\n      <td>0</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Бомбо</td>\n      <td>邦博</td>\n      <td>None</td>\n      <td>بومبو</td>\n      <td>বোম্বো</td>\n      <td>Μπόμπο</td>\n      <td>बॉम्बो</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>ボンボ</td>\n      <td>봄보</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>Bombo</td>\n      <td>1159113923</td>\n      <td>بمبو</td>\n      <td>בומבו</td>\n      <td>Бомбо</td>\n      <td>بومبو</td>\n      <td>邦博</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>POINT (32.53330 0.58330)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10</td>\n      <td>1</td>\n      <td>5</td>\n      <td>Admin-1 region capital</td>\n      <td>Fort Portal</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Fort Portal</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Uganda</td>\n      <td>UGA</td>\n      <td>Kabarole</td>\n      <td>UG</td>\n      <td>None</td>\n      <td>0.671004</td>\n      <td>30.275002</td>\n      <td>42670</td>\n      <td>42670</td>\n      <td>0.0</td>\n      <td>7</td>\n      <td>7</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Africa/Kampala</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>Q500107</td>\n      <td>421174009</td>\n      <td>0</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Форт-Портал</td>\n      <td>波特爾堡</td>\n      <td>None</td>\n      <td>فورت بورتال</td>\n      <td>ফোর্ট পোর্টাল</td>\n      <td>Φορτ Πορτάλ</td>\n      <td>फोर्ट पोर्टल</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>フォート・ポータル</td>\n      <td>포트포털</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>Fort Portal</td>\n      <td>1159113959</td>\n      <td>فورت پورتال</td>\n      <td>פורט פורטל</td>\n      <td>Форт-Портал</td>\n      <td>فورٹ پورٹل</td>\n      <td>波特爾堡</td>\n      <td>233476.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>POINT (30.27500 0.67100)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Admin-1 region capital</td>\n      <td>Potenza</td>\n      <td>None</td>\n      <td>None</td>\n      <td>Potenza</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Italy</td>\n      <td>ITA</td>\n      <td>Italy</td>\n      <td>ITA</td>\n      <td>Basilicata</td>\n      <td>IT</td>\n      <td>None</td>\n      <td>40.642002</td>\n      <td>15.798997</td>\n      <td>69060</td>\n      <td>69060</td>\n      <td>0.0</td>\n      <td>8</td>\n      <td>8</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Europe/Rome</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>Q3543</td>\n      <td>101752567</td>\n      <td>0</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Потенца</td>\n      <td>波坦察</td>\n      <td>None</td>\n      <td>بوتنسا</td>\n      <td>পোটেঞ্জা</td>\n      <td>Ποτέντσα</td>\n      <td>पोटेंजा</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>ポテンツァ</td>\n      <td>포텐차</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>Potenza</td>\n      <td>1159117259</td>\n      <td>پوتنزا</td>\n      <td>פוטנצה</td>\n      <td>Потенца</td>\n      <td>پوتینتسا</td>\n      <td>波坦察</td>\n      <td>3170027.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>POINT (15.79900 40.64200)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#a78e937b .cell execution_count=10}\n``` {.python .cell-code}\nplaces.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-11-output-1.png){width=578 height=290}\n:::\n:::\n\n\nThis dataset has the EPSG:4326 CRS. Remember this is the EPSG code for the WGS 84 CRS. \nThis is not a surprise since the places data is global and EPSG:4326/WGS84 is the most widely used CRS for such data.\n\nLet's see what happens when we try to plot this data on top of Alaska:\n\n::: {#d4d51846 .cell execution_count=11}\n``` {.python .cell-code}\n# Trouble\nfig, ax = plt.subplots()\n\nalaska.plot(ax=ax)\nplaces.plot(ax=ax, color='red')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-12-output-1.png){width=571 height=413}\n:::\n:::\n\n\n::: {.callout-warning}\n## Data in weird places? Check your CRSs\nThis is a classic slip in geospatial analysis. \nTo plot, analyze, or integrate different geospatial datasets they **must have the same CRS**. \n\nHere, `alaska` and `places` have different CRSs, leading to unexpected results when plotting them together:\n\n::: {#6d076967 .cell execution_count=12}\n``` {.python .cell-code}\nalaska.crs == places.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nFalse\n```\n:::\n:::\n\n\n:::\n\n:::{.callout-tip}\n## Check-in\nReproject the `places` geo-datafarme into `alaska`'s CRS and verify the CRSs match using `assert`.\n\n<!--\n\n::: {#2c6ffccf .cell execution_count=13}\n``` {.python .cell-code}\n# Reproject to match Alaska CRS\nplaces = places.to_crs(alaska.crs)\nassert alaska.crs == places.crs\n```\n:::\n\n\n-->\n:::\n\n\nLet's check that map again:\n\n::: {#6fcf68fb .cell execution_count=14}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nalaska.plot(ax=ax)\nplaces.plot(ax=ax, color='red', markersize=2)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-15-output-1.png){width=490 height=442}\n:::\n:::\n\n\nThis is better: we can see there the Alaska poygons and some of the `places` points on top of it. \nOur next step is to select these points. \n\n<!--TODO: add if-else here with reprojecting -->\n\n## Clipping\n\n**Clipping** means using a polygon (or polygons) to only select geospatial data within them. \nClipping a `geopandas.GeoDataFrame` is simple using the geopandas [`clip()` function](https://geopandas.org/en/stable/docs/reference/api/geopandas.clip.html). \nThe general syntax is:\n```python\nupdated_geodf = geopandas.clip(geodf, mask)\n```\nwhere:\n\n- `updated_geodf` is the output of the method: the intersection of the geometries in `geodf` with `mask`,\n- `geodf` is the `geopandas.GeoDataFrame` we want to clip, \n- `mask` is a `geopandas.GeoDataFrame` with the polygon(s) we want to use for clipping. This `mask` must be in the same CRS as `geodf`!\n\nIn our case:\n\n::: {#2b6a1e53 .cell execution_count=15}\n``` {.python .cell-code}\n# Clip populated places to Alaska multipolygon\nak_places = gpd.clip(places, alaska)\n\nfig, ax = plt.subplots()\nalaska.plot(ax=ax)\nak_places.plot(ax=ax, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-16-output-1.png){width=579 height=353}\n:::\n:::\n\n\n## Prepare roads \n\nNow we move on to our roads dataset. \n\n::: {#8401f8f1 .cell execution_count=16}\n``` {.python .cell-code}\nprint(roads.crs)\n\nroads.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEPSG:4326\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>scalerank</th>\n      <th>featurecla</th>\n      <th>type</th>\n      <th>sov_a3</th>\n      <th>note</th>\n      <th>edited</th>\n      <th>name</th>\n      <th>namealt</th>\n      <th>namealtt</th>\n      <th>routeraw</th>\n      <th>question</th>\n      <th>length_km</th>\n      <th>toll</th>\n      <th>ne_part</th>\n      <th>label</th>\n      <th>label2</th>\n      <th>local</th>\n      <th>localtype</th>\n      <th>localalt</th>\n      <th>labelrank</th>\n      <th>ignore</th>\n      <th>add</th>\n      <th>rwdb_rd_id</th>\n      <th>orig_fid</th>\n      <th>prefix</th>\n      <th>uident</th>\n      <th>continent</th>\n      <th>expressway</th>\n      <th>level</th>\n      <th>min_zoom</th>\n      <th>min_label</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8</td>\n      <td>Road</td>\n      <td>Secondary Highway</td>\n      <td>CAN</td>\n      <td>None</td>\n      <td>Version 1.5: Changed alignment, a few adds in ...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>ne_1d4_original</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>314705</td>\n      <td>North America</td>\n      <td>0</td>\n      <td>None</td>\n      <td>7.1</td>\n      <td>9.6</td>\n      <td>LINESTRING (-133.32533 62.21571, -133.31664 62...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7</td>\n      <td>Road</td>\n      <td>Secondary Highway</td>\n      <td>USA</td>\n      <td>None</td>\n      <td>Version 1.5: Changed alignment, a few adds in ...</td>\n      <td>83</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>164</td>\n      <td>0</td>\n      <td>ne_1d4_original</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>108105</td>\n      <td>North America</td>\n      <td>0</td>\n      <td>Federal</td>\n      <td>7.0</td>\n      <td>8.6</td>\n      <td>LINESTRING (-100.50543 42.80753, -100.53495 42...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n      <td>Road</td>\n      <td>Secondary Highway</td>\n      <td>USA</td>\n      <td>None</td>\n      <td>Version 1.5: Changed alignment, a few adds in ...</td>\n      <td>840</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>98</td>\n      <td>0</td>\n      <td>ne_1d4_original</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>0</td>\n      <td>North America</td>\n      <td>0</td>\n      <td>U/C</td>\n      <td>7.0</td>\n      <td>9.5</td>\n      <td>LINESTRING (-87.27432 36.02439, -87.22916 35.9...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#25671c3f .cell execution_count=17}\n``` {.python .cell-code}\nroads.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-18-output-1.png){width=578 height=234}\n:::\n:::\n\n\nYou may have already noticed that the `roads` data is not in the same CRS as the `alaska` polygons, so these geo-datasets shound't interact until they're in the same CRS. \nBefore jumping right into reprojecting and clipping, we will subset the data to select only US roads:\n\n::: {#e1a7ae63 .cell execution_count=18}\n``` {.python .cell-code}\nusa_roads = roads[roads.sov_a3 == 'USA']\nusa_roads.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-19-output-1.png){width=557 height=411}\n:::\n:::\n\n\n::: {.callout-caution}\n## Reduce your tabular data before reducing via geometries\nGeospatial operations are usually costly in terms of computing power. \nThe more detailed our geometries are, the longer in takes to do geospatial computations. \nIt's a good practice to reduce your data as much as possible before applying any geospatial transformation. \n:::\n\n<!--\nYOU CAN JUMP FROM HERE TO CLIPPING WITH BOUNDING BOX\n-->\n\nWe will now compose functions to clip `usa_roads` using the `alaska` multipolygon. Notice we are using the ouput of `usa_roads.to_crs(alaska.crs)` directly and thus not changing the `usa_roads` geo-dataframe or creating new variables:\n\n::: {#ffa4e2d1 .cell execution_count=19}\n``` {.python .cell-code}\n# Clip usa_roads to alaska geometry\nak_roads = gpd.clip(usa_roads.to_crs(alaska.crs), alaska)\n\n\nfig, ax = plt.subplots()\nalaska.plot(ax=ax)\nak_roads.plot(ax=ax, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-20-output-1.png){width=579 height=353}\n:::\n:::\n\n\nNotice how the lines break on the small islands? \nHowever, in the `usa_roads` there are no broken lines. \nThis should make us suspect we are leaving data out and clipping *exactly* to the polygons in `alaska` is not quite what we want. \n\n### Clipping with a bounding box\nWe will clip the `usa_roads` geo-dataframe with the **bounding box** of `alaska` instead of its polygons. \nTo create a bounding box, we first use the [`box()` function](https://shapely.readthedocs.io/en/stable/manual.html#shapely.geometry.box) we imported from `shapely.geometry`. \nThe syntax for `box()` is:\n```python\nbox(minx, miny, maxx, maxy)\n```\nthe output is a polygon representing a box constructed like this:\n\n![Image adapted from: National Ecological Observatory Network (NEON)](/book/images/lesson-13/bounding-box.png)\n\nIf we want to create a `shapely` polygon from the bounds of a geo-dataframe `gdf`, a more straightforward syntax is:\n```python \nbox(*gdf.total_bounds)\n```\nIn our case:\n\n::: {#cc95a33b .cell execution_count=20}\n``` {.python .cell-code}\nbbox = box(*alaska.total_bounds)\nprint(type(bbox))\nbbox\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'shapely.geometry.polygon.Polygon'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](lesson-13-clipping_files/figure-html/cell-21-output-2.svg){}\n:::\n:::\n\n\n::: {.callout-tip}\n## `*` = unpacking operator\nIn the last syntax we used the asterisk `*` as an **unpacking operator** on the array `alaska.total_bounds`. \nThink about it as unpacking the elements of `alaska.total_bounds` and assigning them one-by-one to the paremeters `minx, miny, maxx, maxy` of the `box()` function.\n\nThis is a good article explaining more about unpacking with `*` in Python:\nhttps://geekflare.com/python-unpacking-operators/\n:::\n\nNotice that the bounding box is not a geodataframe, it is a stand alone, abstract polygon without any geospatial information. To interpret this polygon as something on the Earth's surface we need to wrap it into a geo-datfrane abd assign it a CRS:\n\n::: {#8fc8762e .cell execution_count=21}\n``` {.python .cell-code}\n# Create geo-dataframe from bounding box\nak_bbox = gpd.GeoDataFrame(geometry = [bbox],  # Assign geometry column\n                           crs = alaska.crs)  # Assign CRS\nprint(type(ak_bbox))\nak_bbox\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLYGON ((1493082.309 404545.108, 1493082.309 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can now clip the roads using Alaska's bounding box:\n\n::: {#80b6d905 .cell execution_count=22}\n``` {.python .cell-code}\nak_complete_roads = gpd.clip(usa_roads.to_crs(ak_bbox.crs), ak_bbox)\n```\n:::\n\n\nNotice the difference between the two clipping methods:\n\n::: {#7c97d46e .cell execution_count=23}\n``` {.python .cell-code}\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10,10))\n\nak_roads.plot(ax=ax1)\nax1.set_title('Roads clipped with AK multipolygon')\n\nak_complete_roads.plot(ax=ax2)\nax2.set_title('Roads clipped with AK bounding box')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-24-output-1.png){width=495 height=818}\n:::\n:::\n\n\n## Plot\n\nFinally, we can put all our data together in the same map:\n\n::: {#32ad0444 .cell execution_count=24}\n``` {.python .cell-code code-fold=\"true\"}\nfig, ax = plt.subplots(figsize=(11,5))\nax.axis('off')\n\nalaska.plot(ax=ax, color='whitesmoke', edgecolor='0.7')\n\nak_complete_roads.plot(ax=ax, \n                       zorder=1,  # Specify layer plotting order\n                       column='type', \n                       legend=True,\n                       legend_kwds={'title': \"Road Types\", \n                                    'loc': 'upper left',\n                                    'bbox_to_anchor':(0,0.9),\n                                    'fontsize':'small'}\n                                    )\n\nak_places.plot(ax=ax, \n               zorder=2,  # Specify layer plotting order\n               color='red', \n               marker='s'  # Square marker\n               )\n# Add city names as text annotations\nfor x, y, name in zip(ak_places.geometry.x, ak_places.geometry.y, ak_places['name']):\n    ax.text(x-30000, y+20000, name, fontsize=8, ha='right')\n\nax.set_title(\"Road Networks and Major Cities in Alaska\", fontsize=14, fontweight='bold')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](lesson-13-clipping_files/figure-html/cell-25-output-1.png){width=704 height=411}\n:::\n:::\n\n\n:::{.callout-tip}\n## Exercise\nNotice the overlaying labels for Anchorage and Valdez:\n\n![](/book/images/lesson-13/overlapping_points.png){width=\"40%\" fig-align=\"center\"}\n\nUpdate the map so these labels do not overlap. One way to do it is using an `if` when iterating over the Alaska populated places.\n\n<!--\nUpdate text labels to this:\n\n```python\n# Add city names as text annotations\nfor x, y, name in zip(ak_places.geometry.x, ak_places.geometry.y, ak_places['name']):\n    if name != 'Valdez':\n        ax.text(x-30000, y+20000, name, fontsize=8, ha='right')\n\n# Add text label for Valdez\nvaldez = ak_places[ak_places['name']=='Valdez']\nax.text(valdez.geometry.x.iloc[0]+30000, valdez.geometry.y.iloc[0]+20000, 'Valdez', fontsize=8, ha='left')\n```\n-->\n:::\n\n",
    "supporting": [
      "lesson-13-clipping_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}