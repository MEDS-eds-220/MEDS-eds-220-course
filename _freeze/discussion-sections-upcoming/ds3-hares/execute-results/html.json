{
  "hash": "870cf33c9bb08d3c197b36d56f47cf9f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Snowshoe hares at Bonanza Creek Experimental Forest\nsubtitle: Week 3 - Discussion section\nweek: 3\nimage: images/hare.jpg\nsidebar: false\njupyter: mpc-env-kernel\n---\n\n\nThis discussion section will guide you through exploring data about snowshoe hares in the (*Lepus americanus*) in the Bonanza Creek Experimental Forest located in Alaska, USA. In this discussion section, you will:\n\n- Practice markdown syntax for creating tables and inserting images\n- Practice detecting and cleaning messy data\n- Use `groupby()` to calculate summary statistics by groups\n- Select, clean, and comment your code to create a condensed data analysis workflow\n\n## Setup\n\n:::{.callout-tip appearance=\"minimal\"}\n1. Access the workbench-1 server.\n\n2. Navigate to the`eds-220-sections` directory in the file navigation panel and the terminal.\n\n3. Create a new Python notebook inside your `eds-220-sections` directory and rename it to `section-3-snowshoe-hares.ipynb`. \n\n4. Use the terminal to push this file to you remote repository. \n:::\n\n## General directions\n:::{.callout-tip appearance=\"minimal\"}\n- Add comments as appropriate along your code.\n- Include markdown cells in between your code cells to add titles and information to each exercise\n- You won't need to upload any data.\n- Indications about when to commit and push changes are included. Commit every time you finish a major step! **Remember to write your commits in the imperative mood.**\n:::\n\n## About the data\nFor these exercises we will use data about [Snowshoe hares (*Lepus americanus*) in the Bonanza Creek Experimental Forest @kielland_snowshoe_2017](https://portal.edirepository.org/nis/mapbrowse?packageid=knb-lter-bnz.55.22). \n\nThis dataset is stored in the [Environmental Data Initiative (EDI)](https://edirepository.org) data repository. This is a huge data repository committed to make data Findable, Accessible, Interoperable, and Reusable (FAIR). \nIt is the main repository for all the data associated to the [Long Term Ecological Research Network (LTER)](https://lternet.edu).\n\n\n## 1. Archive exploration\na. Take some time to look through the dataset's description in EDI and click around. Discuss the following questions with your team:\n\n    i. What is this data about?\n    ii. During what time frame were the observations in the dataset collected?\n    iii. Does the dataset contain sensitive data?\n    iv. Is there a publication associated with this dataset?\n\nb. In your notebook: use a markdown cell to add a *brief* description of the dataset, including a citation, date of access, and a link to the archive. \n\nc. Back in the EDI repository, click on *View Full Metadata* to access more information if you haven't done so already. Go to the \"Detailed Metadata\" section and click on \"Data Entities\". Take some time to look at the descriptions for the dataset's columns.  \n\n## 2. Adding an image\nBack in your notebook, follow these steps to add an image of a hare using a URL:\n\na. Go to [this link](https://commons.wikimedia.org/wiki/File:SNOWSHOE_HARE_%28Lepus_americanus%29_%285-28-2015%29_quoddy_head,_washington_co,_maine_-01_%2818988734889%29.jpg).\n\nb. Get the URL of the hare image. To do this:\n\n- hover over the image –> right click –> “Copy Image Address\".\n\nc. At the end of the markdown cell with the dataset description, use markdown sytanx to add the image from its URL:\n```default\n![image description](URL-goes-here)\n```\n\nd. Do you need to add an attribution in the image description? Check the license at the [bottom of wikimedia page](https://commons.wikimedia.org/wiki/File:SNOWSHOE_HARE_%28Lepus_americanus%29_%285-28-2015%29_quoddy_head,_washington_co,_maine_-01_%2818988734889%29.jpg).\n\n<p style=\"text-align: center;\">\n**commit, pull, and push changes**\n</p>\n\n## 3. Data loading and preliminary exploration\n\na. Back in your notebook, import the `55_Hare_Data_2012.txt` file from its URL using the `pandas.read_csv()` function. Store it in a variable named `hares`. \n\n<!--\n\n::: {#6832f293 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\nURL = 'https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-bnz.55.22&entityid=f01f5d71be949b8c700b6ecd1c42c701'\nhares = pd.read_csv(URL)\n\nhares.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=257}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>time</th>\n      <th>grid</th>\n      <th>trap</th>\n      <th>l_ear</th>\n      <th>r_ear</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>weight</th>\n      <th>hindft</th>\n      <th>notes</th>\n      <th>b_key</th>\n      <th>session_id</th>\n      <th>study</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>1A</td>\n      <td>414D096A08</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1370.0</td>\n      <td>160.0</td>\n      <td>NaN</td>\n      <td>917.0</td>\n      <td>51</td>\n      <td>Population</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>2C</td>\n      <td>414D320671</td>\n      <td>NaN</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>1430.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>936.0</td>\n      <td>51</td>\n      <td>Population</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>2D</td>\n      <td>414D103E3A</td>\n      <td>NaN</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>1430.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>921.0</td>\n      <td>51</td>\n      <td>Population</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>2E</td>\n      <td>414D262D43</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1490.0</td>\n      <td>135.0</td>\n      <td>NaN</td>\n      <td>931.0</td>\n      <td>51</td>\n      <td>Population</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>3B</td>\n      <td>414D2B4B58</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1710.0</td>\n      <td>150.0</td>\n      <td>NaN</td>\n      <td>933.0</td>\n      <td>51</td>\n      <td>Population</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n-->\n\nb. Using `pandas` methods, obtain preliminary information and explore this data frame in at least four different ways. For each method, write a short sentence explaining why you decided to obtain that information.\n\n<p style=\"text-align: center;\">\n**CHECK IN WITH YOUR TEAM** \n</p>\n<p style=\"text-align: center;\">\n**MAKE SURE YOU'VE ALL SUCCESSFULLY ACCESSED THE DATA BEFORE CONTINUING**\n</p>\n\n<p style=\"text-align: center;\">\n**commit, pull, and push changes**\n</p>\n\n## 4. Detecting messy values\n\na. In the metadata section of the EDI repository, find which are the allowed values for the hares' sex. Create a small table in a markdown cell showing the values and their definitions.\n\n<!--\n*Allowed values are:*\n\n| Value | Definition |\n| ------| ---------- |\n| f | female |\n| m | male |\n| m?| male not confirmed |\n-->\n\nb. Get the number of times each unique sex non-NA value appears.\n\n<!--\n\n::: {#764660a7 .cell execution_count=2}\n``` {.python .cell-code}\nhares['sex'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=258}\n```\nsex\nF     1161\nM      730\nf      556\nm      515\n?       40\nF?      10\nf        4\nm        4\nf?       3\nM?       2\nm?       2\npf       1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n-->\n\nc. Check the [documentation of `value_counts()`](https://pandas.pydata.org/docs/reference/api/pandas.Series.value_counts.html). What is the purpose of the `dropna` parameter and what is its default value? Repeat step (a), this time adding the `dropna=False` parameter to `value_counts()`.\n<!--\n\n::: {#ab984b11 .cell execution_count=3}\n``` {.python .cell-code}\nhares['sex'].value_counts(dropna=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=259}\n```\nsex\nF      1161\nM       730\nf       556\nm       515\nNaN     352\n?        40\nF?       10\nf         4\nm         4\nf?        3\nM?        2\nm?        2\npf        1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n-->\n\nd. Discuss with your team the output of the unique value counts. In particular: \n    i. Do the values in the `sex` column correspond to the values declared in the metadata?\n    ii. What could have been potential causes for multiple codes?\n    iii. Are there seemingly repated values? If so, what could be the cause?\n\ne. Write code to confirm your suspicions about c-iii.\n\n<!--\n\n::: {#5fffc25f .cell execution_count=4}\n``` {.python .cell-code}\nhares['sex'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=260}\n```\narray([nan, 'M', 'F', '?', 'F?', 'M?', 'pf', 'm', 'f', 'f?', 'm?', 'f ',\n       'm '], dtype=object)\n```\n:::\n:::\n\n\n-->\n\n<p style=\"text-align: center;\">\n**commit, pull, and push changes**\n</p>\n\n## 5. Brainstorm\n\na. Individually, write step-by-step instructions on how you would wrangle the `hares` data frame to clean the values in the `sex` column to have only two classes `female` and `male`. Which codes would you assign to each new class? **Remember:** It’s ok if you don’t know how to code each step - it’s more important to have an idea of what you would like to do.\n\nb. Discuss your step-by-step instructions with your team.\n\nThe next exercise will guide you through cleaning the codes. There are *many* ways of doing this. The one presented here might not be the same way you thought about doing it - that's ok! This one was designed to practice using the `numpy.select()` function.\n\n## 6. Clean values\n\na. Create a new column called `sex_simple` using the `numpy.select()` function so that \n\n- 'F', 'f', and 'f_' in the `sex` column get assigned to 'female', \n- 'M', 'm', and 'm_' get assigned to 'male', and \n- anything else gets assigned `np.nan`\n\nHINT: \nYou need to create a list with two conditions and a list with two choices. \n<!--\n\n::: {#5062be4f .cell execution_count=5}\n``` {.python .cell-code}\nconditions = [(hares.sex=='F') | (hares.sex=='f') |(hares.sex=='f '),\n              (hares.sex=='M') | (hares.sex=='m') |(hares.sex=='m ')]\n\nchoices = ['female', \n            'male']\n\nhares['sex_simple'] = np.select(conditions, choices, default=np.nan)\nhares.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=261}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>time</th>\n      <th>grid</th>\n      <th>trap</th>\n      <th>l_ear</th>\n      <th>r_ear</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>weight</th>\n      <th>hindft</th>\n      <th>notes</th>\n      <th>b_key</th>\n      <th>session_id</th>\n      <th>study</th>\n      <th>sex_simple</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>1A</td>\n      <td>414D096A08</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1370.0</td>\n      <td>160.0</td>\n      <td>NaN</td>\n      <td>917.0</td>\n      <td>51</td>\n      <td>Population</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>2C</td>\n      <td>414D320671</td>\n      <td>NaN</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>1430.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>936.0</td>\n      <td>51</td>\n      <td>Population</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>2D</td>\n      <td>414D103E3A</td>\n      <td>NaN</td>\n      <td>M</td>\n      <td>NaN</td>\n      <td>1430.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>921.0</td>\n      <td>51</td>\n      <td>Population</td>\n      <td>male</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>2E</td>\n      <td>414D262D43</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1490.0</td>\n      <td>135.0</td>\n      <td>NaN</td>\n      <td>931.0</td>\n      <td>51</td>\n      <td>Population</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11/26/1998</td>\n      <td>NaN</td>\n      <td>bonrip</td>\n      <td>3B</td>\n      <td>414D2B4B58</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1710.0</td>\n      <td>150.0</td>\n      <td>NaN</td>\n      <td>933.0</td>\n      <td>51</td>\n      <td>Population</td>\n      <td>nan</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n-->\n\nb. Check the counts of unique values (including NAs) in the new `sex_simple` column.\n<!--\n\n::: {#0df03a81 .cell execution_count=6}\n``` {.python .cell-code}\nhares['sex_simple'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=262}\n```\nsex_simple\nfemale    1721\nmale      1249\nnan        410\nName: count, dtype: int64\n```\n:::\n:::\n\n\n-->\n\n<p style=\"text-align: center;\">\n**commit, pull, and push changes**\n</p>\n\n## 7. Calculate mean weight\n\na. Use `groupby()` to calculate the mean weight by sex using the new column. \n\n<!--\n\n::: {#995d8005 .cell execution_count=7}\n``` {.python .cell-code}\nhares.groupby('sex_simple')['weight'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=263}\n```\nsex_simple\nfemale    1365.164792\nmale      1349.935542\nnan       1193.364055\nName: weight, dtype: float64\n```\n:::\n:::\n\n\n-->\n\nb. Write a full sentence explaining the results you obtained.\n\n<p style=\"text-align: center;\">\n**commit, pull, and push changes**\n</p>\n\n## 8. Collect your code and explain your results\n\nIn a new code cell, collect all the relevant code to obtain to create a streamlined workflow to obtain the final result from exercise 7 starting from importing the data. Your code cell should:\n\n- Only print the final results for mean weight by `sex_simple`. \n- Not include output from intermediate variables or checks.\n- Not include methods or functions that do not directly contribute to the analysis (even if they don't print anything ex: `df.head()`).\n- If appropriate, combine methods using code chaining instead of creating intermediate variables.\n- Comment your code following our class comments guidelines. \n- Use appropriate line breaks and indentation to make code readable.\n\n<!-- \n\n::: {#51e524d9 .cell execution_count=8}\n``` {.python .cell-code}\n# Load data from EDI data repository\nURL = 'https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-bnz.55.22&entityid=f01f5d71be949b8c700b6ecd1c42c701'\nhares = pd.read_csv(URL)\n\n# Create new sex_simpel column dropping the uncertain sex codes and \n# simplifying codes without no question mark\nconditions = [(hares.sex=='F') | (hares.sex=='f') |(hares.sex=='f '),\n              (hares.sex=='M') | (hares.sex=='m') |(hares.sex=='m ')]\nchoices = ['female', 'male']\n\nhares['sex_simple'] = np.select(conditions, choices, default=np.nan)\n\n# Calculate average hare weight by sex\nhares.groupby('sex_simple')['weight'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=264}\n```\nsex_simple\nfemale    1365.164792\nmale      1349.935542\nnan       1193.364055\nName: weight, dtype: float64\n```\n:::\n:::\n\n\n-->\n\n<!--TODO: add explanation of why this is important-->\n\n<p style=\"text-align: center;\">\n**commit, pull, and push changes**\n</p>\n\n",
    "supporting": [
      "ds3-hares_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}