{
  "hash": "edadb34148c07323ac5ad871a719c73e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Water conflicts in the Colorado River Basin\nsubtitle: Week 2 - Discussion section\nweek: 2\nimage: images/free-photo-of-colorado-river-in-usa.jpeg\nsidebar: false\njupyter: mpc-env-kernel\n---\n\n\n\n\nThis discussion section will guide you through exploring data about water-related conflicts at the Colorado River Basin using data from the [U.S. Geological Survey (USGS)](https://www.usgs.gov). In this discussion section, you will:\n\n- Practice version control using git via the terminal\n- Use methods to work with `pandas.Series` of strings using the `.str` accessor\n- Practice method chaining\n\n## Setup\n\n:::{.callout-tip appearance=\"minimal\"}\n1. In the workbench-1 server, start a new JupyterLab session or access an active one.\n\n2. In the terminal, use `cd` to navigate into the `eds-220-sections` directory. Use `pwd` to verify `eds-220-sections` is your current working directory.\n\n3. Create a new Python notebook inside your `eds-220-sections` directory and rename it to `section-2-co-basin-water-conflicts.ipynb`. \n\n4. Use the terminal to stage, commit, and push this file to the remote repository. Remember:\n    1. `git status` : check git status\n    2. `git add FILE-NAME` : stage updated file\n    3. `git status` : check git status again to confirm\n    4. `git commit -m \"Commit message\"` : commit with message\n    5. `git pull` : check local repo is up to date (best practice)\n    5. `git push` : push changes to upstream repository\n\n<p style=\"text-align: center;\">\n**CHECK IN WITH YOUR TEAM** \n</p>\n<p style=\"text-align: center;\">\n**MAKE SURE YOU'VE ALL SUCCESSFULLY SET UP YOUR NOTEBOOKS BEFORE CONTINUING**\n</p>\n:::\n\n## General directions\n:::{.callout-tip appearance=\"minimal\"}\n- Add comments in each one of your code cells. \n- Include markdown cells in between your code cells to add titles and information.\n- Indications about when to commit and push changes are included, but you are encouraged to commit and push more often. \n:::\n\n## About the data\nFor these exercises we will use data about [Water Conflict and Crisis Events in the Colorado River Basin](https://www.sciencebase.gov/catalog/item/63acac09d34e92aad3ca1480) @holloman_coded_2023. This dataset is stored at [ScienceBase](https://www.sciencebase.gov/catalog/), a digital repository from the U.S. Geological Survey (USGS) created to share scientific data products and USGS resources. \n\nThe dataset is a CSV file containing conflict or crisis around water resource management in the Colorado River Basin. \nThe Colorado River Basin, inhabited by several Native American tribes for centuries, is a crucial water source in the southwestern United States and northern Mexico, supporting over 40 million people, extensive agricultural lands, and diverse ecosystems. \nIts management is vital due to the region's arid climate and the competing demands for water, leading to significant challenges related to water allocation and conservation. \n\n![Colorado River Basin.  U.S. Bureau of Reclamation. ](/discussion-sections/images/co-river-basin.png)\n\n\n## 1. Archive exploration\na. Look through the dataset's description in the ScienceBase repository. Find the following information:\n\n    i. Where was the data collected from??\n<!-- \narticles from newspapers describing water-related events in geographic areas in the Basin\n-->\n    ii. During what time frame were the observations in the dataset collected?\n<!--\n2005-2021\n-->\n    iii. What was the author's perceived value of this dataset?\n<!--\n examining crisis on a continual basis toward identification of hotspots from conflict, identifying primary stakeholders, and who experiences crises.\n-->\n\n\nb. In a markdown cell, use your answers to the previous questions to add a brief description of the dataset. Briefly discuss anything else that seems relevant to you. Include a citation, date of access, and a link to the archive. \n\nc. Take a look at the data's metadata by clicking on the \"View\" icon of the `Coded Events Colorado River Basin Water Conflict Table Metadata.xml` file.\n\n<p style=\"text-align: center;\">\n**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**\n</p>\n\n<!-- 3 minutes -->\n## 2. Data loading\n\n<!--\na. In class we have (so far) loaded data into our workspace either by downloading the file and storing a copy of it in our computer or by accessing the file directly through a URL. With your team, discuss what are, in general, the advantages and disadvantages of these two methods of data access. \n-->\n\na. Create a new directory `data/` inside your `eds-220-sections` directory.\n\nb. Download the `Colorado River Basin Water Conflict Table.csv` file [from the Science Base repository](https://www.sciencebase.gov/catalog/item/63acac09d34e92aad3ca1480) and upload it into the `data/` folder.\n\nc. Update the `.gitignore` file of your `eds-220-sections` so it ignores the `data/` folder. Push the changes to this file. Verify that git is ignoring the data file. **Note:** If you update the `.gitignore` file via GitHub, you need to run `git pull` when you go back to the server.\n\nd. Load the data into your `section-2-co-basin-water-conflicts.ipynb` notebook. Name your data frame variable `df`.\n\n<!--\n```python\nimport pandas as pd\npd.set_option(\"display.max.columns\", None)\n\ndf = pd.read_csv('data/Colorado River Basin Water Conflict Table.csv')\ndf.head(5)\n```\n-->\n\n## 3. Preliminary data exploration\n\na. Set `pandas` to display all columns in the data frame. \n\nb. Using `pandas` methods, obtain preliminary information and explore this data frame in at least four different ways.\n\n<!--\n```python\n# df.head()\n# df.shape\n# df.columns\n# df.Stakeholders.unique()\n```\n\n-->\n<p style=\"text-align: center;\">\n**CHECK IN WITH YOUR TEAM  ðŸ™Œ** \n</p>\n<p style=\"text-align: center;\">\n**YOU CAN SLACK THEM TO LET THEM KNOW YOU'RE READY FOR TOMORROW OR BRING UP ANY QUESTIONS** \n</p>\n<p style=\"text-align: center;\">\n**MAKE SURE YOU'VE ALL SUCCESSFULLY LOADED THE DATA AND DONE A PRELIMINARY EXPLORATION BEFORE CONTINUING**\n</p>\n\n<p style=\"text-align: center;\">\n**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**\n</p>\n\n## 4. Location column descriptions\n\nIn these exercises we will work with columns in the data frame pertaining to the location of an event. Before continuing, read the following column descriptions form the .xml metadata file:\n\n| Column | Description |\n|---------|-----|\n| Place      | Where the event actually occurred, but also where the event's direct implications are felt most directly. When the researchers reviewed the articles, they were looking for mentions of specific places impacted by the events. Empty cell indicates a place was not coded for this event. NA indicates a place is not referenced in the event text.|\n| State | State Name coded from Place field. Empty cell indicates a state was not coded for this event or that the article was not coded. |\n: {tbl-colwidths=\"[10,90]\"}\n\n\n\n## 5. String accessor for `pandas.Series`\n\nIn the following exercises we will work with `pandas.Series` whose values are strings. This is a common scenario, so `pandas` has special [string methods](https://pandas.pydata.org/docs/user_guide/text.html#string-methods) for this kind of series. These methods are accessed via the **`str` accessor**. **Accessors** provide additional functionality for working with specific kinds of data (in this case, strings). \n\n\na. The code below gives a brief demonstration of the using the `str` accessor to use the `split()` method for `pandas.Series`. Carefully read the code and check in with your team to see if you have questions about it. We'll use it in a moment.\n\n::: {#48615eaf .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd \n\n# Example series\ns = pd.Series(['California; Nevada', 'Arizona', np.nan, 'Nevada; Utah'])\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n0    California; Nevada\n1               Arizona\n2                   NaN\n3          Nevada; Utah\ndtype: object\n```\n:::\n:::\n\n\n::: {#4039747b .cell execution_count=2}\n``` {.python .cell-code}\n# str accessor (doesn't do anything by itself)\ns.str\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n<pandas.core.strings.accessor.StringMethods at 0x1102bd510>\n```\n:::\n:::\n\n\n::: {#7d1efd9d .cell execution_count=3}\n``` {.python .cell-code}\n# Use str accessor with additional methods to perform string operations\n# .split splits strings by ';' and expands output into separate columns\ns.str.split(';', expand=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>California</td>\n      <td>Nevada</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Arizona</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Nevada</td>\n      <td>Utah</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#9a6e9719 .cell execution_count=4}\n``` {.python .cell-code}\n# Use stack() method to flatten the data frame into a series\n# default is to drop NAs and None from result\ns.str.split(';', expand=True).stack()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0  0    California\n   1        Nevada\n1  0       Arizona\n3  0        Nevada\n   1          Utah\ndtype: object\n```\n:::\n:::\n\n\n## 6. Examine state codes\n\nOur goal today is to **find which states are reported in the dataset as having a water conflicts**. \n\na. What are the unique values in the `States` column once filtering the dataset for states that have a water conflict? What could be a challenge to writing code to find which states are listed (without repetition)? Remember to write longer answers in markdown cells, not as comments.\n\n<!--\n```python\nprint(df['State'].unique())\n```\n\n```python\nfor x in df['State'].unique():\n    print(x)\n```\n-->\n\n## 7. Brainstorm\n\na. Individually, write step-by-step instructions on how you would wrangle the data frame `df` to obtain a list (without repetition) of the state codes in which a water conflict has been reported. It's ok if you don't know how to code each step - it's more important to have an idea of what you would like to do.\n\nb. Discuss your step-by-step instructions with your team.\n\nThe next exercises will guide you through finding the unique state codes in the dataset. There are *many* ways of extracting this information. The one presented here might not be the same way you thought about doing it - that's ok! This one was designed to practice using the `.str` accessor in a `pandas.Series`.\n\n<!--\n## X. Drop NAs\n\nUse the `dropna()` method on the State column to create a new `pandas.Series` called `states` without NAs. Confirm there are no NAs in the new `states` series.\n\n```python\nstates = df['State'].dropna()\nstates\n```\n\n```python\nstates.hasnans\n```\n-->\n\n## 8. Exploratory wrangling\na. Perform the following wrangling:\n    i. select the State column from the `df` data frame\n    i. split the strings in the column by the delimeter `;` into different columns \n    ii. stack the results of the resulting data frame into a single `pandas.Series`\n    iii. find the unique string values in the resulting series\n\nYour final answer should use method chaining without creating new variables.\n\n<!--\n```python\ndf['State'].str.split(';', expand=True).stack().unique()\n```\n-->\n\n<p style=\"text-align: center;\">\n**CHECK IN WITH YOUR TEAM: IS EVERY STEP IN THE CHAINING CLEAR?** \n</p>\n<p style=\"text-align: center;\">\n**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**\n</p>\n\n## 9. Find unique state codes\n\na. Discuss with your team: Why do some state codes seem to be repeated? What would we need to do to get the correct strings?\n\nb. Update your code to obtain a list of codes (without repetition) of the states mentioned in the news articles about water conflicts in the Colorado River Basin. **Hint:** [str.strip().](https://pandas.pydata.org/docs/reference/api/pandas.Series.str.strip.html)\n\n<!--\n```python\n(df['State'].str.split(';', expand=True)\n            .stack()\n            .str.strip()\n            .unique()\n            )\n```\n-->\n\nc. Bonus: How many articles mention each state? \n\n<!--\n```python\n(df['State'].str.split(';', expand=True)\n            .stack()\n            .str.strip()\n            .value_counts()\n            )\n```\n-->\n\n<p style=\"text-align: center;\">\n**check git status -> stage changes -> check git status -> commit with message -> pull -> push  changes**\n</p>\n\n",
    "supporting": [
      "ds-2-water-crisis-exploration_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}